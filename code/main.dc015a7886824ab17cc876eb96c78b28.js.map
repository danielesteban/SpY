{"version":3,"sources":["webpack:///./src/engine/input.js","webpack:///./src/engine/camera.js","webpack:///./src/materials/grid.js","webpack:///./src/engine/grid.js","webpack:///./src/engine/moon.js","webpack:///./src/engine/starfield.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/building/elevator.js","webpack:///./src/building/hallway.js","webpack:///./src/building/doors.js","webpack:///./src/building/shaft.js","webpack:///./src/building/index.js","webpack:///./src/scenes/game.js","webpack:///./src/index.js"],"names":["Input","_ref","_ref$mount","mount","document","body","_classCallCheck","this","pointer","current","Vector2","movement","x","y","normalized","last","raycaster","Raycaster","wheel","touches","Touches","window","preventSimulated","target","on","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","addEventListener","e","preventDefault","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","isEnabled","button","length","secondary","primary","_ref2","_ref4","_slicedToArray","_ref3","rect","top","left","i","_touches$i","clientX","clientY","width","height","copy","_ref5","deltaY","_ref6","getBoundingClientRect","Camera","_this","camera_classCallCheck","_getPrototypeOf","call","distance","maxHeight","Infinity","offset","tilt","Math","PI","pitch","speed","step","Vector3","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","delta","position","distanceTo","sub","normalize","multiplyScalar","hasUpdated","min","max","set","cos","sin","lookAt","GridMaterial","arguments","undefined","_ref$color","color","_ref$size","size","_ref$subdivisions","subdivisions","rest","_objectWithoutProperties","grid_classCallCheck","vertexShader","ShaderLib","phong","replace","join","primaryGrid","secondaryGrid","fragmentShader","concat","grid_possibleConstructorReturn","grid_getPrototypeOf","grid_objectSpread","name","uniforms","UniformsUtils","clone","extensions","derivatives","fog","lights","diffuse","value","ShaderMaterial","Grid","_ref$background","background","Color","engine_grid_classCallCheck","geometry","CircleBufferGeometry","translate","rotateX","engine_grid_possibleConstructorReturn","engine_grid_getPrototypeOf","material","Mesh","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","MeshBasicMaterial","Starfield","starfield_classCallCheck","radius","BufferGeometry","Float32Array","count","aux","floor","random","o","z","addAttribute","BufferAttribute","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","Scene","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","starfield","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","render","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Actor","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actor_assertThisInitialized","actions","Object","keys","animations","reduce","action","actor_objectSpread","actor_defineProperty","clipAction","idle","timeScale","play","rotationAux","movementAux","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","fromGeometry","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destination","destinationMarker","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","abs","setAnimation","visible","onDestinationCallback","fadeOut","reset","fadeIn","point","faceTo","angle","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","boundingSphere","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","marker_possibleConstructorReturn","marker_getPrototypeOf","transparent","scale","inc","s","opacity","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","map","v","dude","walkTo","mainDudeX","mainDudeZ","mainDude","debug_slicedToArray","getPointerFrame","processInput","setFromCamera","hit","intersectObject","Elevator","floors","origin","elevator_classCallCheck","BoxGeometry","setHSL","splice","elevator_possibleConstructorReturn","elevator_getPrototypeOf","side","DoubleSide","animationStart","mid","Hallway","_ref2$hasElevator","hasElevator","_ref2$isEdge","isEdge","_ref2$isLobby","isLobby","hallway_classCallCheck","generateWall","orientation","wall","rotateY","hallway_possibleConstructorReturn","hallway_getPrototypeOf","_ref$width","_ref$height","PlaneGeometry","ceil","Doors","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","plane","door","Shaft","elevator","shaft_classCallCheck","back","shaft_possibleConstructorReturn","shaft_getPrototypeOf","doors","shaft_toConsumableArray","Building","elevators","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","pallete","mesh","shaft","rooms","room","type","findIndex","game","timer","positionAux","clearTimeout","setTimeout","getWorldPosition","building","game_toConsumableArray","intersectObjects","object","getElementById","once","style","display","route","location","hash","split","slice","Scenes"],"mappings":"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","file":"code/main.2700d7e5a1988fcd27cd.js","sourcesContent":["import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.01, 2048);\n    this.distance = 4;\n    this.maxHeight = Infinity;\n    this.offset = 1.2;\n    this.tilt = Math.PI * -0.65;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 8);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      root,\n      tilt,\n    } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance);\n    position.y = Math.min(Math.max(position.y, 0.1 - offset), maxHeight - offset);\n    this.lookAt(root.position);\n    position.y += offset;\n  }\n}\n\nexport default Camera;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.phong.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.phong.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.phong.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(1024, 8);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0x999999,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\nimport Starfield from './starfield';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.025);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.starfield = new Starfield();\n    this.root.add(this.starfield);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      starfield,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    starfield.position.copy(grid.position);\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n      if (this.onDestinationCallback) {\n        this.onDestinationCallback();\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point) {\n    const { destinationMarker } = this;\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    this.faceTo(point);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walkTo(point);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = () => {\n    const { camera, grid } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObject(grid)[0];\n      if (!hit) return;\n      pack.walkTo(hit.point);\n    }\n  };\n};\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Elevator extends Mesh {\n  constructor({\n    floors,\n    origin,\n  }) {\n    const geometry = new BoxGeometry(\n      0.99, 0.99, 0.99,\n      Elevator.scale.x, Elevator.scale.y, Elevator.scale.z\n    );\n    const color = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(color);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(Elevator.scale.x, Elevator.scale.y, Elevator.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color: Elevator.color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n  }\n\n  onAnimationTick({ time }) {\n    const { animationStart, floors, position } = this;\n    const mid = (floors - 1) * Elevator.scale.y * 0.5;\n    position.y = mid + (Math.sin((animationStart + time) * 0.5) * mid);\n  }\n}\n\nElevator.color = 0x440000;\nElevator.scale = new Vector3(2, 3, 2);\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Hallway extends Mesh {\n  static generateWall({\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Hallway.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Hallway.scale.x : Hallway.scale.y))\n    );\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      face.color.copy(color);\n    });\n    return wall;\n  }\n\n  constructor({\n    hasElevator = false,\n    isEdge = false,\n    isLobby = false,\n  } = {}) {\n    const merged = new Geometry();\n    const floor = Hallway.generateWall({\n      material: 0,\n      orientation: 'horizontal',\n    });\n    floor.translate(0, -0.0005, 0);\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Hallway.generateWall({\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Hallway.generateWall({\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Hallway.generateWall({\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Hallway.generateWall({\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n    this.scale.copy(Hallway.scale);\n  }\n}\n\nHallway.scale = new Vector3(4, 3, 4);\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Doors extends Object3D {\n  constructor({\n    floor,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, Doors.scale.x * 0.5, Doors.scale.y);\n    const color = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(color);\n    });\n    plane.scale(Doors.scale.x, Doors.scale.y, Doors.scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color: Doors.color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.25 + (i * 0.5)) * Doors.scale.x,\n        0.5 * Doors.scale.y,\n        0.499 * Doors.scale.z\n      );\n      this.add(door);\n    }\n    this.position.y = floor * Doors.scale.y;\n    this.animationStart = Math.random() * 512;\n  }\n\n  onAnimationTick({ time }) {\n    const { animationStart, children } = this;\n    const step = (0.25 + (Math.sin(animationStart + time) * 0.25)) + 0.01;\n    children.forEach((door, i) => {\n      door.position.x = (-0.25 + (i * 0.5) + (step * (i === 0 ? -1 : 1))) * Doors.scale.x;\n    });\n  }\n}\n\nDoors.color = 0x333333;\nDoors.scale = new Vector3(2, 3, 2);\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\nimport Doors from './doors';\n\nclass Shaft extends Mesh {\n  constructor({\n    elevator,\n  }) {\n    const { floors, origin } = elevator;\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(Shaft.scale.x, Shaft.scale.y, Shaft.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color: Shaft.color,\n        side: DoubleSide,\n      })\n    );\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({ floor });\n      this.add(doors);\n      return doors;\n    });\n    this.position.x = origin.x * 4;\n    this.position.y = origin.y * 3;\n    this.position.z = -1.5 * Shaft.scale.z;\n    this.add(elevator);\n  }\n}\n\nShaft.color = 0x333333;\nShaft.scale = new Vector3(2, 3, 2);\n\nexport default Shaft;\n","import { Object3D } from 'three';\nimport Dude from '@/actors/dude';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Shaft from './shaft';\n\nclass Building extends Object3D {\n  constructor({\n    dudes,\n    elevators,\n    floors,\n  }) {\n    super();\n    this.dudes = dudes.map(({\n      pallete,\n      position,\n    }) => {\n      const mesh = new Dude(pallete);\n      mesh.position.copy(position);\n      this.add(mesh);\n      return mesh;\n    });\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      const shaft = new Shaft({ elevator });\n      elevator.doors = shaft.doors;\n      this.add(shaft);\n      return elevator;\n    });\n    this.floors = floors.map((rooms, floor) => rooms.map(({ type }, room) => {\n      let isEdge = false;\n      if (room === 0) isEdge = 'left';\n      else if (room === rooms.length - 1) isEdge = 'right';\n      const hasElevator = (\n        this.elevators.findIndex(({\n          floors,\n          origin,\n        }) => (\n          origin.x === room - Math.floor(rooms.length / 2)\n          && origin.y <= floor\n          && origin.y + floors > floor\n        ))\n      ) !== -1;\n      let mesh;\n      switch (type) {\n        default:\n          mesh = new Hallway({\n            hasElevator,\n            isEdge,\n            isLobby: floor === 0,\n          });\n          break;\n      }\n      mesh.position.set(room * 4 - (Math.floor(rooms.length / 2) * 4), floor * 3, 0);\n      this.add(mesh);\n      return mesh;\n    }));\n  }\n\n  onAnimationTick(animation) {\n    const { dudes, elevators } = this;\n    dudes.forEach(dude => dude.onAnimationTick(animation));\n    elevators.forEach((elevator) => {\n      elevator.onAnimationTick(animation);\n      elevator.doors.forEach(door => door.onAnimationTick(animation));\n    });\n  }\n}\n\nexport default Building;\n","import { Vector3 } from 'three';\nimport Dude from '@/actors/dude';\nimport Building from '@/building';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  /* Spawn main dude */\n  const dude = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  dude.position.set(2, 3, 0);\n  dude.destinationMarker = new Marker();\n  const positionAux = new Vector3();\n  let timer;\n  dude.onDestinationCallback = () => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      if (dude.destination) return;\n      scene.camera.getWorldPosition(positionAux);\n      dude.faceTo(positionAux);\n    }, 5000);\n  };\n  scene.root.add(dude);\n  scene.root.add(dude.destinationMarker);\n  scene.camera.maxHeight = 3;\n  scene.camera.target = dude.position;\n\n  /* Spawn test building */\n  const building = new Building({\n    dudes: [...Array(4)].map(() => ({\n      pallete: {\n        arms: 0x222222,\n        eyes: 0x999999 * Math.random(),\n        head: 0x999999 * Math.random(),\n        legs: 0x222222,\n        torso: 0x999999 * Math.random(),\n      },\n      position: new Vector3(\n        (Math.random() * 9 - 4.5) * 2,\n        Math.floor(Math.random() * 3) * 3,\n        0\n      ),\n    })),\n    elevators: [\n      {\n        floors: 2,\n        origin: { x: -1, y: 0 },\n      },\n      {\n        floors: 2,\n        origin: { x: 1, y: 1 },\n      },\n    ],\n    floors: [\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n    ],\n  });\n  scene.root.add(building);\n\n  /* Animation loop */\n  const floor = 1;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    if (camera.processInput(pointer)) {\n      dude.onDestinationCallback();\n    }\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObjects([\n        // ...building.elevators,\n        ...building.floors[floor],\n      ])[0];\n      if (!hit) return;\n      hit.point.x = Math.min(Math.max(hit.point.x, -9.5), 9.5);\n      hit.point.y = hit.object.position.y;\n      hit.point.z = Math.min(Math.max(hit.point.z, -1.5), 1.5);\n      dude.walkTo(hit.point);\n    }\n  };\n};\n","import Input from '@/engine/input';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst scene = new Scene({ mount });\n\ninput.touches.once('end', () => {\n  document.getElementById('splash').style.display = 'none';\n  input.isEnabled = true;\n});\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nScenes[route]({ input, scene });\n"],"sourceRoot":""}