{"version":3,"sources":["webpack:///./src/engine/camera.js","webpack:///./src/engine/grid.js","webpack:///./src/engine/moon.js","webpack:///./src/engine/starfield.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/input.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/building/elevator.js","webpack:///./src/building/hallway.js","webpack:///./src/building/doors.js","webpack:///./src/building/shaft.js","webpack:///./src/building/index.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js"],"names":["Camera","_this","_classCallCheck","this","_getPrototypeOf","call","distance","maxHeight","Infinity","offset","tilt","Math","PI","pitch","speed","step","Vector3","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","delta","_ref","position","target","distanceTo","copy","sub","normalize","multiplyScalar","movement","_ref2","secondary","wheel","hasUpdated","x","y","min","max","set","cos","sin","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","size","_ref$subdivisions","subdivisions","grid_classCallCheck","geometry","CircleBufferGeometry","translate","rotateX","grid_possibleConstructorReturn","grid_getPrototypeOf","GridMaterial","material","color","Mesh","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","MeshBasicMaterial","fog","Starfield","starfield_classCallCheck","radius","BufferGeometry","Float32Array","count","aux","i","floor","random","o","z","addAttribute","BufferAttribute","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","Scene","_ref$mount","mount","document","body","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","bind","setPixelRatio","window","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","starfield","addEventListener","onResize","ShaderChunk","fog_pars_vertex","replace","fog_vertex","fog_pars_fragment","fog_fragment","join","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","render","end","_mount$getBoundingCli","getBoundingClientRect","width","height","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Input","pointer","current","Vector2","normalized","last","raycaster","Raycaster","touches","Touches","preventSimulated","on","onPointerDown","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","e","preventDefault","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","isEnabled","button","primary","_ref4","_slicedToArray","_ref3","rect","top","left","_touches$i","clientX","clientY","_ref5","deltaY","_ref6","Actor","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actions","Object","keys","animations","reduce","action","_defineProperty","clipAction","idle","timeScale","play","rotationAux","movementAux","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","fromGeometry","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destination","destinationMarker","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","abs","setAnimation","visible","onDestinationCallback","fadeOut","reset","fadeIn","point","clone","faceTo","angle","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","concat","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","boundingSphere","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","marker_possibleConstructorReturn","marker_getPrototypeOf","transparent","scale","inc","s","opacity","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","map","v","dude","walkTo","mainDudeX","mainDudeZ","mainDude","getPointerFrame","processInput","setFromCamera","hit","intersectObject","Elevator","floors","origin","elevator_classCallCheck","BoxGeometry","setHSL","splice","elevator_possibleConstructorReturn","elevator_getPrototypeOf","side","DoubleSide","animationStart","mid","Hallway","_ref2$hasElevator","hasElevator","_ref2$isEdge","isEdge","_ref2$isLobby","isLobby","hallway_classCallCheck","generateWall","aoBottom","orientation","wall","aoTop","rotateY","hallway_possibleConstructorReturn","hallway_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","PlaneGeometry","ceil","hallway_toConsumableArray","j","offsetHSL","Doors","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","plane","door","Shaft","elevator","shaft_classCallCheck","back","shaft_possibleConstructorReturn","shaft_getPrototypeOf","doors","shaft_toConsumableArray","Building","elevators","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","pallete","mesh","shaft","rooms","room","type","findIndex","game","timer","positionAux","clearTimeout","setTimeout","getWorldPosition","building","game_toConsumableArray","intersectObjects","object","__webpack_require__","d","__webpack_exports__","_ref$color","rest","_objectWithoutProperties","vertexShader","ShaderLib","phong","primaryGrid","secondaryGrid","fragmentShader","_possibleConstructorReturn","name","uniforms","UniformsUtils","extensions","derivatives","lights","diffuse","value","ShaderMaterial","r","setImmediate","fonts","loaded","_engine_input__WEBPACK_IMPORTED_MODULE_0__","_engine_scene__WEBPACK_IMPORTED_MODULE_1__","_scenes__WEBPACK_IMPORTED_MODULE_2__","getElementById","route","location","hash","split","slice","Scenes","reload","font","test","fontTester","createElement","innerText","style","fontFamily","initialWidth","check","removeChild","className","once","display"],"mappings":"01BAkFeA,cA3Eb,SAAAA,IAAc,IAAAC,MAAA,mGAAAC,CAAAC,KAAAH,KACZG,MAAAF,MAAAG,EAAAJ,GAAAK,KAAAF,KAAM,GAAI,EAAG,IAAM,sDACdG,SAAW,EAChBL,EAAKM,UAAYC,IACjBP,EAAKQ,OAAS,IACdR,EAAKS,MAAkB,IAAXC,KAAKC,GACjBX,EAAKY,MAAkB,GAAVF,KAAKC,GAClBX,EAAKa,MAAQ,KACbb,EAAKc,KAAO,IAAIC,IAChBf,EAAKgB,KAAO,IAAIC,IAChBjB,EAAKgB,KAAKE,IAAVC,IAAAnB,KACAA,EAAKoB,cAXOpB,wPADKqB,yDAeQ,IAATC,EAASC,EAATD,MAENE,EAINtB,KAJFc,KAAQQ,SACRX,EAGEX,KAHFW,MACAC,EAEEZ,KAFFY,KACAW,EACEvB,KADFuB,QAEGA,GAAUD,EAASE,WAAWD,IAAW,KAC9CX,EACGa,KAAKF,GACLG,IAAIJ,GACJK,YACAC,eAAeR,EAAQT,GAC1BW,EAASN,IAAIJ,4CAOZ,IAHDiB,EAGCC,EAHDD,SACAE,EAECD,EAFDC,UACAC,EACCF,EADDE,MAEIC,GAAa,EACjB,GAAIF,EAAW,CAEb/B,KAAKO,MADe,KACPsB,EAASK,EACtBlC,KAAKU,OAFe,KAENmB,EAASM,EACvBnC,KAAKU,MAAQF,KAAK4B,IAAI5B,KAAK6B,IAAIrC,KAAKU,OAAkB,IAAXF,KAAKC,IAAuB,IAAVD,KAAKC,IAClEwB,GAAa,EAEf,GAAID,EAAO,CAEThC,KAAKG,SAAWK,KAAK4B,IAAI5B,KAAK6B,IAAIrC,KAAKG,SADnB,KAC+B6B,EAAsB,GAAI,GAC7EC,GAAa,EAGf,OADIA,GAAYjC,KAAKkB,cACde,wCAGK,IAEV9B,EAOEH,KAPFG,SACAC,EAMEJ,KANFI,UACAE,EAKEN,KALFM,OACAI,EAIEV,KAJFU,MACAY,EAGEtB,KAHFsB,SACAR,EAEEd,KAFFc,KACAP,EACEP,KADFO,KAEFe,EAASgB,IACP9B,KAAK+B,IAAIhC,GAAQC,KAAK+B,IAAI7B,GAC1BF,KAAKgC,IAAI9B,GACTF,KAAKgC,KAAKjC,GAAQC,KAAK+B,IAAI7B,IAE1BiB,YACAC,eAAezB,GAClBmB,EAASa,EAAI3B,KAAK4B,IAAI5B,KAAK6B,IAAIf,EAASa,EAAG,GAAM7B,GAASF,EAAYE,GACtEN,KAAKyC,OAAO3B,EAAKQ,UACjBA,EAASa,GAAK7B,wrBCnDHoC,cAnBb,SAAAA,IAIQ,IAAA5C,EAAAuB,EAAA,EAAAsB,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAIG,EAAAzB,EAHN0B,kBAGM,IAAAD,EAHO,IAAIE,IAAM,UAGjBF,EAAAG,EAAA5B,EAFN6B,YAEM,IAAAD,EAFC,EAEDA,EAAAE,EAAA9B,EADN+B,oBACM,IAAAD,EADS,GACTA,+FAAAE,CAAArD,KAAA0C,GACN,IAAMY,EAAW,IAAIC,IAAqB,KAAM,GAD1C,OAEND,EAASE,UAAU,EAAG,GAAI,KAC1BF,EAASG,SAAmB,GAAXjD,KAAKC,KACtBX,EAAA4D,EAAA1D,KAAA2D,EAAAjB,GAAAxC,KAAAF,KACEsD,EACA,IAAIM,IAAa,CACfV,OACAE,oBAGCS,SAASC,MAAMxB,IAAIS,GAXlBjD,8OALSiE,kpBCWJC,cAXb,SAAAA,IAAc,mGAAAC,CAAAjE,KAAAgE,GAAAE,EAAAlE,KAAAmE,EAAAH,GAAA9D,KAAAF,KAEV,IAAIoE,IAAqB,IAAK,GAAI,IAClC,IAAIC,IAAkB,CACpBP,MAAO,SACPQ,KAAK,kPANMP,kpBCuCJQ,cAnCb,SAAAA,IAAc,IAAAzE,+FAAA0E,CAAAxE,KAAAuE,GAOZ,IANA,IACME,EAAS,KACTnB,EAAW,IAAIoB,IACfpD,EAAW,IAAIqD,aAAaC,KAC5B1B,EAAO,IAAIyB,aAJH,KAKRE,EAAM,IAAIhE,IACPiE,EAAI,EAAGA,EANF,IAMaA,GAAK,EAAG,CACjCD,EAAIvC,IACF9B,KAAKuE,MAAM,KAAAvE,KAAKwE,UAAiCP,EACjDjE,KAAKuE,MAAM,KAAAvE,KAAKwE,UAChBxE,KAAKuE,MAAM,KAAAvE,KAAKwE,UAAiCP,GACjD9C,YAAYC,eAAe6C,GAC7B,IAAMQ,EAAQ,EAAJH,EACVxD,EAAS2D,GAAKJ,EAAI3C,EAClBZ,EAAS2D,EAAI,GAAKJ,EAAI1C,EACtBb,EAAS2D,EAAI,GAAKJ,EAAIK,EACtBhC,EAAK4B,GAAK,GAAKtE,KAAKuE,MAAsB,IAAhBvE,KAAKwE,UAjBrB,OAmBZ1B,EAAS6B,aAAa,WAAY,IAAIC,IAAgB9D,EAAU,IAChEgC,EAAS6B,aAAa,OAAQ,IAAIC,IAAgBlC,EAAM,KACxDpD,EAAAuF,EAAArF,KAAAsF,EAAAf,GAAArE,KAAAF,KACEsD,EACA,IAAIiC,IAAe,CACjBzB,MAAO,SACPQ,KAAK,EACLkB,iBAAiB,OAGhBC,KAAO,IAAIzB,EAChBlE,EAAK2F,KAAKnE,SAASgB,IAAImC,EAAQA,IAAcA,GAC7C3E,EAAKkB,IAAIlB,EAAK2F,MA/BF3F,8OADQ4F,uLCSlBC,aACJ,SAAAA,IAEQ,IAAAC,GAAA,EAAAjD,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,IADFkD,aACM,IAAAD,EADEE,SAASC,KACXH,+FAAAI,CAAAhG,KAAA2F,GACN3F,KAAKiG,OAAS,IAAIpG,EAClBG,KAAKkG,MAAQ,IAAIC,IACjBnG,KAAK6F,MAAQA,EACb7F,KAAKoG,SAAW,IAAIC,IAAc,CAChCC,OAAO,EACPC,WAAW,IAEbvG,KAAKoG,SAASI,iBAAiBxG,KAAKyG,UAAUC,KAAK1G,OACnDA,KAAKoG,SAASO,cAAcC,OAAOC,kBAAoB,GACvD,IAAMC,EAAM,IAAI9D,IAAM,SACtBhD,KAAKoG,SAASW,cAAcD,GAC5BjB,EAAMmB,YAAYhH,KAAKoG,SAASa,YAChCjH,KAAKc,KAAO,IAAIoG,IAChBlH,KAAKc,KAAKwD,IAAM,IAAI6C,IAAQL,EAAK,MACjC9G,KAAKc,KAAKE,IAAI,IAAIoG,IAAa,UAC/B,IAAMC,EAAQ,IAAIC,IAAiB,SAAU,IAC7CD,EAAM/F,SAASgB,IAAI,EAAG,GAAK,GAC3BtC,KAAKc,KAAKE,IAAIqG,GACd,IAAME,EAAiB,IAAID,IAAiB,SAAU,IACtDC,EAAejG,SAASgB,KAAK,GAAI,GAAK,GACtCtC,KAAKc,KAAKE,IAAIuG,GACdvH,KAAKc,KAAKE,IAAIhB,KAAKiG,OAAOnF,MAC1Bd,KAAKwH,KAAO,IAAI9E,EAAK,CAAEK,WAAY,IAAIC,IAAM,WAC7ChD,KAAKc,KAAKE,IAAIhB,KAAKwH,MACnBxH,KAAKyH,UAAY,IAAIlD,EACrBvE,KAAKc,KAAKE,IAAIhB,KAAKyH,WACnBb,OAAOc,iBAAiB,SAAU1H,KAAK2H,SAASjB,KAAK1G,OAAO,GAC5DA,KAAK2H,yEAuDLC,IAAYC,gBAAkBD,IAAYC,gBAAgBC,QACxD,0BACA,0BAEFF,IAAYG,WAAaH,IAAYG,WAAWD,QAC9C,4BACA,0BAEFF,IAAYI,kBAAoBJ,IAAYI,kBAAkBF,QAC5D,0BACA,0BAEFF,IAAYK,aAAeL,IAAYK,aAAaH,QAClD,uGACA,CACE,oCACA,sGACAI,KAAK,OACPJ,QACA,6DACA,+GA9DQ,IAER5B,EAOElG,KAPFkG,MACAD,EAMEjG,KANFiG,OACAuB,EAKExH,KALFwH,KACApB,EAIEpG,KAJFoG,SACAtF,EAGEd,KAHFc,KACA2G,EAEEzH,KAFFyH,UACAU,EACEnI,KADFmI,MAEEA,GAAOA,EAAMC,QACjB,IAAMC,EAAY,CAAEjH,MAAOZ,KAAK4B,IAAI8D,EAAMoC,WAAY,GAAIC,KAAMrC,EAAMsC,QAAU,KAC5ExI,KAAKyI,iBACPzI,KAAKyI,gBAAgBJ,GAEvBvH,EAAK4H,SAASC,QAAQ,SAACC,GACjBA,EAAMH,iBACRG,EAAMH,gBAAgBJ,KAGtBpC,EAAOwC,iBACTxC,EAAOwC,gBAAgBJ,GAEzBb,EAAKlG,SAASgB,IAAI2D,EAAOnF,KAAKQ,SAASY,EAAG,EAAG+D,EAAOnF,KAAKQ,SAAS4D,GAClEuC,EAAUnG,SAASG,KAAK+F,EAAKlG,UAC7B8E,EAASyC,OAAO/H,EAAMmF,GAClBkC,GAAOA,EAAMW,yCAGR,IAEP7C,EAGEjG,KAHFiG,OACAJ,EAEE7F,KAFF6F,MACAO,EACEpG,KADFoG,SAJO2C,EAMiBlD,EAAMmD,wBAAxBC,EANCF,EAMDE,MAAOC,EANNH,EAMMG,OACf9C,EAAS+C,QAAQF,EAAOC,GACxBjD,EAAOmD,OAASH,EAAQC,EACxBjD,EAAOoD,8DA6BX1D,EAAM2D,gBACNC,IAAwBC,qBAAuBC,IAC/CC,IAAoBF,qBAAuBC,IAE5B9D,8tBCjITgE,aACJ,SAAAA,EAAAtI,GAEG,IAAAuE,EAAAvE,EADDwE,aACC,IAAAD,EADOE,SAASC,KAChBH,+FAAA7F,CAAAC,KAAA2J,GACD3J,KAAK6F,MAAQA,EACb7F,KAAK4J,QAAU,CACbC,QAAS,IAAIC,IAAQ,EAAG,GACxBjI,SAAU,CAAEK,EAAG,EAAGC,EAAG,GACrB4H,WAAY,IAAID,IAAQ,EAAG,GAC3BE,KAAM,IAAIF,IAAQ,EAAG,GACrBG,UAAW,IAAIC,IACflI,MAAO,GAEThC,KAAKmK,QAAUC,IAAQxD,OAAQ,CAC7ByD,kBAAkB,EAClB9I,OAAQsE,IAEPyE,GAAG,QAAStK,KAAKuK,cAAc7D,KAAK1G,OACpCsK,GAAG,OAAQtK,KAAKwK,cAAc9D,KAAK1G,OACnCsK,GAAG,MAAOtK,KAAKyK,YAAY/D,KAAK1G,OACnC0K,2BAAiB9D,OAAQ5G,KAAK2K,eAAejE,KAAK1G,OAClD4G,OAAOc,iBAAiB,cAAe,SAAAkD,GAAC,OAAIA,EAAEC,mBAAkB,GAChEjE,OAAOc,iBAAiB,SAAU1H,KAAK2H,SAASjB,KAAK1G,OAAO,GAC5DA,KAAK2H,4EAGW,IACRiC,EAAY5J,KAAZ4J,QACFkB,4aAAKC,CAAA,GAAQnB,GAOnB,OANAA,EAAQoB,aAAc,EACtBpB,EAAQqB,WAAY,EACpBrB,EAAQsB,eAAgB,EACxBtB,EAAQuB,aAAc,EACtBvB,EAAQ/H,SAAW,CAAEK,EAAG,EAAGC,EAAG,GAC9ByH,EAAQ5H,MAAQ,EACT8I,wCAGKF,GAAG,IACPQ,EAAuBpL,KAAvBoL,UAAWxB,EAAY5J,KAAZ4J,QACnB,GAAKwB,EAAL,CAFe,IAGPC,EAAoBT,EAApBS,OAAQlB,EAAYS,EAAZT,QAChB,GAAIA,EAcF,OAbqB,EAAjBA,EAAQvH,QACVgI,EAAEC,sBAECjB,EAAQ7H,YACY,IAAnBoI,EAAQvH,QACVgH,EAAQ0B,SAAU,EAClB1B,EAAQoB,aAAc,IAEtBpB,EAAQ7H,WAAY,EACpB6H,EAAQsB,eAAgB,EACxBtB,EAAQ0B,SAAU,KAKxB,OAAQD,GACN,KAAK,EACHzB,EAAQ0B,SAAU,EAClB1B,EAAQoB,aAAc,EACtB,MACF,KAAK,EACHpB,EAAQ7H,WAAY,EACpB6H,EAAQsB,eAAgB,+CAMK,IAAnBf,EAAmBrI,EAAnBqI,QAAmBoB,EAAAC,EAAAC,EAAA,GAAPvJ,EAAOqJ,EAAA,GAAJpJ,EAAIoJ,EAAA,GACzBH,EAA6BpL,KAA7BoL,UAAWxB,EAAkB5J,KAAlB4J,QAAS8B,EAAS1L,KAAT0L,KAC5B,GAAKN,EAAL,CACA,GAAIjB,EAAS,CAIX,IAJW,IACHwB,EAAcD,EAAdC,IAAKC,EAASF,EAATE,KAGJ9G,EADT3C,EADAD,EAAI,EAEY4C,EAAIqF,EAAQvH,OAAQkC,GAAK,EAAG,KAAA+G,EACb1B,EAAQrF,GACrC5C,GAF0C2J,EAClCC,QACQF,EAChBzJ,GAH0C0J,EACzBE,QAEDJ,EAElBzJ,GAAKiI,EAAQvH,OACbT,GAAKgI,EAAQvH,OAbkB,IAezBqG,EAAkByC,EAAlBzC,MAAOC,EAAWwC,EAAXxC,OACfU,EAAQC,QAAQ3H,EAAIA,EACpB0H,EAAQC,QAAQ1H,EAAIA,EACpByH,EAAQG,WAAW7H,EAAMA,EAAI+G,EAAS,EAAK,EAC3CW,EAAQG,WAAW5H,EAAI,EAAMA,EAAI+G,EAAU,EAC3CU,EAAQ/H,SAAW,CACjBK,EAAG0H,EAAQC,QAAQ3H,EAAI0H,EAAQI,KAAK9H,EACpCC,EAAGyH,EAAQC,QAAQ1H,EAAIyH,EAAQI,KAAK7H,GAEtCyH,EAAQI,KAAKvI,KAAKmI,EAAQC,iDAGK,IAAnBwB,EAAmBW,EAAnBX,OAAQlB,EAAW6B,EAAX7B,QACZiB,EAAuBpL,KAAvBoL,UAAWxB,EAAY5J,KAAZ4J,QACnB,GAAKwB,EAAL,CACA,GAAIjB,EASF,OARIP,EAAQ0B,UACV1B,EAAQ0B,SAAU,EAClB1B,EAAQqB,WAAY,QAElBrB,EAAQ7H,YACV6H,EAAQ7H,WAAY,EACpB6H,EAAQuB,aAAc,IAI1B,OAAQE,GACN,KAAK,EACHzB,EAAQ0B,SAAU,EAClB1B,EAAQqB,WAAY,EACpB,MACF,KAAK,EACHrB,EAAQ7H,WAAY,EACpB6H,EAAQuB,aAAc,8CAMD,IAAVc,EAAUC,EAAVD,OACPb,EAAuBpL,KAAvBoL,UAAWxB,EAAY5J,KAAZ4J,QACdwB,IACLxB,EAAQ5H,MAAQiK,sCAGP,IACDpG,EAAU7F,KAAV6F,MACR7F,KAAK0L,KAAO7F,EAAMmD,6DAKPW,6yCC9HTwC,cAyBJ,SAAAA,EAAA9K,GAGG,IAAAvB,MAFDwD,EAECjC,EAFDiC,SACAO,EACCxC,EADDwC,sGACC9D,CAAAC,KAAAmM,KACDnM,OAAAC,EAAAkM,GAAAjM,KAAAF,KACEsD,EACAO,GAFF/D,mDAIA,IAAMsM,EAAM,IAAIC,IAChBvM,EAAKkB,IAAIoL,GACT,IAAME,EAAQ,IAAID,IAClBD,EAAIpL,IAAIsL,GACR,IAAMC,EAAO,IAAIF,IACjBC,EAAMtL,IAAIuL,GACV,IAAMC,EAAU,IAAIH,IACpBC,EAAMtL,IAAIwL,GACV,IAAMC,EAAW,IAAIJ,IACrBC,EAAMtL,IAAIyL,GACV,IAAMC,EAAU,IAAIL,IACpBD,EAAIpL,IAAI0L,GACR,IAAMC,EAAW,IAAIN,IAjBpB,OAkBDD,EAAIpL,IAAI2L,GACR7M,EAAK4G,KAAK,IAAIkG,IAAS,CACrBR,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,KAEF7M,EAAK+M,MAAQ,IAAIC,IAAJ7L,IAAAnB,KACbA,EAAKiN,QAAUC,OAAOC,KAAKd,EAAMe,YAAYC,OAAO,SAACJ,EAASK,GAAV,yUAAArC,CAAA,GAC/CgC,EAD+CM,EAAA,GAEjDD,EAAStN,EAAK+M,MAAMS,WAAWnB,EAAMe,WAAWE,OAC/C,IACJtN,EAAKuI,UAAY,OACjBvI,EAAKiN,QAAQQ,KAAKC,UAAY,GAC9B1N,EAAKiN,QAAQQ,KAAKE,OAClB3N,EAAK4N,YAAc,IAAI5D,IACvBhK,EAAK6N,YAAc,IAAI9M,IArCtBf,8OA5Be8N,0DACOC,GACvB,IAAMC,EAAS,IAAIC,IACnBf,OAAOC,KAAKY,GAAOlF,QAAQ,SAACqF,GAC1BH,EAAMG,GAAMC,MAAMtF,QAAQ,SAACuF,GACzBA,EAAKC,cAAgBhC,EAAMiC,MAAMJ,KAEnCF,EAAOO,MAAMR,EAAMG,MAErBF,EAAOG,MAAMtF,QAAQ,SAACuF,GACpBJ,EAAOQ,SAASJ,EAAKK,GAAGC,KAAON,EAAKC,cACpCL,EAAOQ,SAASJ,EAAKO,GAAGD,KAAON,EAAKC,cACpCL,EAAOQ,SAASJ,EAAKQ,GAAGF,KAAON,EAAKC,cACpCD,EAAKC,cAAgB,IAEvBL,EAAOQ,SAAS3F,QAAQ,SAACgG,GACvBb,EAAOc,YAAYC,KAAK,IAAIC,IAAQH,EAAOH,KAAM,EAAG,EAAG,IACvDV,EAAOiB,YAAYF,KAAK,IAAIC,IAAQ,EAAG,EAAG,EAAG,MAE/C,IAAMxL,GAAY,IAAIoB,KAAkBsK,aAAalB,GAGrD,OAFAxK,EAAS2L,uBACT3L,EAAS4L,wBACF5L,oDA8CkB,IAATlC,EAASU,EAATV,MAEgB+N,EAQ5BnP,KARF+M,QAAWqC,KAAQ5B,UACnB6B,EAOErP,KAPFqP,YACAC,EAMEtP,KANFsP,kBACAzC,EAKE7M,KALF6M,MACAc,EAIE3N,KAJF2N,YACArM,EAGEtB,KAHFsB,SACAiO,EAEEvP,KAFFuP,cACAC,EACExP,KADFwP,eAGF,GADA3C,EAAM4C,OAAOrO,GACToO,EAAgB,CAClB,IAAME,EAAetO,EAAQmO,EACvBI,EAAgBH,EAAiBxP,KAAK4P,SAASzN,EACrDnC,KAAK4P,SAASzN,GAAK3B,KAAK4B,IACtB5B,KAAK6B,IACHsN,GACCD,GAEHA,GAEElP,KAAKqP,IAAIF,IAAkBD,IAC7B1P,KAAKwP,gBAAiB,GAG1B,GAAKH,EAAL,CACA,IAAMlP,EAAWmB,EAASE,WAAW6N,GAC/BzO,EAAe,IAARQ,EAAc+N,EAC3B7N,EAASN,IACP2M,EACGlM,KAAK4N,GACL3N,IAAIJ,GACJK,YACAC,eAAepB,KAAK4B,IAAIjC,EAAUS,KAEnCT,GAAYS,IACdZ,KAAK8P,aAAa,QAClB9P,KAAKqP,aAAc,EACfC,IACFA,EAAkBS,SAAU,GAE1B/P,KAAKgQ,uBACPhQ,KAAKgQ,+DAKE3H,GAAW,IACd0E,EAAY/M,KAAZ+M,QACJ/M,KAAKqI,YAAcA,IACvB0E,EAAQ/M,KAAKqI,WAAW4H,QAAQ,IAChCjQ,KAAKqI,UAAYA,EACjB0E,EAAQ/M,KAAKqI,WACV6H,QACAC,OAAO,IACP1C,uCAGE2C,GAAO,IACJd,EAAsBtP,KAAtBsP,kBACRtP,KAAK8P,aAAa,QAClB9P,KAAKqP,YAAce,EAAMC,QACrBf,IACFA,EAAkBhO,SAASG,KAAKzB,KAAKqP,aACrCC,EAAkBS,SAAU,GAE9B/P,KAAKsQ,OAAOF,kCAGPA,GAGL,IAHY,IACJ9O,EAA0BtB,KAA1BsB,SACFiP,EAD4BvQ,KAAhB0N,YACQpL,IAAI8N,EAAMlO,EAAIZ,EAASY,EAAGkO,EAAMlL,EAAI5D,EAAS4D,GAAGqL,QACnEvQ,KAAK4P,SAASzN,GAAK3B,KAAKC,IAAIT,KAAK4P,SAASzN,GAAe,EAAV3B,KAAKC,GAC3D,KAAOT,KAAK4P,SAASzN,EAAI3B,KAAKC,IAAIT,KAAK4P,SAASzN,GAAe,EAAV3B,KAAKC,GAE1D,IADAT,KAAKwP,eAA4B,GAAVhP,KAAKC,GAAY8P,EACjCvQ,KAAKwP,gBAAkBhP,KAAKC,IAAIT,KAAKwP,gBAA4B,EAAVhP,KAAKC,GACnE,KAAOT,KAAKwP,eAAiBhP,KAAKC,IAAIT,KAAKwP,gBAA4B,EAAVhP,KAAKC,GAC7DT,KAAKwP,eAAiBxP,KAAK4P,SAASzN,EAAK3B,KAAKC,GACjDT,KAAKwP,gBAA4B,EAAVhP,KAAKC,GAClBT,KAAKwP,eAAiBxP,KAAK4P,SAASzN,GAAM3B,KAAKC,KACzDT,KAAKwP,gBAA4B,EAAVhP,KAAKC,IAE9BT,KAAKuP,cAAkE,IAAlD/O,KAAKqP,IAAI7P,KAAKwP,eAAiBxP,KAAK4P,SAASzN,YAItEgK,EAAMiC,MAAQ,CACZhC,IAAK,EACLE,MAAO,EACPC,KAAM,EACNC,QAAS,EACTC,SAAU,EACVC,QAAS,EACTC,SAAU,GAGZ,IAAM6D,EAAc,SAACtO,EAAGC,EAAG+C,GAAP,OAAc,IAAIuL,KAAcC,aAAa,IAAIC,IAAMzO,EAAGC,EAAG+C,IAAI0L,WAErFzE,EAAMe,WAAa,CACjBK,KACE,IAAIsD,IAAc,OAAQ,EAAG,CAC3B,IAAItH,IAAJ,UAAAuH,OACY3E,EAAMiC,MAAM9B,MADxB,gBAEE,IAAI3H,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJoM,EACKP,EAAY,GAAc,IAAXhQ,KAAKC,GAAY,IADrCqQ,OAAAC,EAEKP,EAAY,EAAa,IAAVhQ,KAAKC,GAAW,IAFpCsQ,EAGKP,EAAY,GAAc,IAAXhQ,KAAKC,GAAY,OAGvC,IAAI8I,IAAJ,UAAAuH,OACY3E,EAAMiC,MAAM7B,KADxB,gBAEE,IAAI5H,aAAa,CACf,EACA,IACA,IAEF,IAAIA,aAAJoM,EACKP,GAAuB,KAAXhQ,KAAKC,GAAa,GAAc,KAAXD,KAAKC,KAD3CqQ,OAAAC,EAEKP,GAAuB,KAAXhQ,KAAKC,GAAa,EAAa,KAAVD,KAAKC,KAF3CsQ,EAGKP,GAAuB,KAAXhQ,KAAKC,GAAa,GAAc,KAAXD,KAAKC,QAG7C,IAAI8I,IAAJ,UAAAuH,OACY3E,EAAMiC,MAAM5B,QADxB,gBAEE,IAAI7H,aAAa,CACf,EACA,IACA,IAEF,IAAIA,aAAJoM,EACKP,EAAY,EAAG,GAAc,IAAXhQ,KAAKC,KAD5BqQ,OAAAC,EAEKP,EAAY,EAAG,GAAc,GAAXhQ,KAAKC,KAF5BsQ,EAGKP,EAAY,EAAG,GAAc,IAAXhQ,KAAKC,QAG9B,IAAI8I,IAAJ,UAAAuH,OACY3E,EAAMiC,MAAM3B,SADxB,gBAEE,IAAI9H,aAAa,CACf,EACA,IACA,IAEF,IAAIA,aAAJoM,EACKP,EAAY,EAAG,EAAa,IAAVhQ,KAAKC,KAD5BqQ,OAAAC,EAEKP,EAAY,EAAG,EAAa,GAAVhQ,KAAKC,KAF5BsQ,EAGKP,EAAY,EAAG,EAAa,IAAVhQ,KAAKC,UAKlC2O,KACE,IAAIyB,IAAc,OAAQ,EAAG,CAC3B,IAAItH,IAAJ,UAAAuH,OACY3E,EAAMiC,MAAM9B,MADxB,gBAEE,IAAI3H,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJoM,EACKP,GAAuB,IAAXhQ,KAAKC,GAAY,EAAa,IAAVD,KAAKC,KAD1CqQ,OAAAC,EAEKP,EAAsB,IAAVhQ,KAAKC,GAAW,GAAc,IAAXD,KAAKC,KAFzCsQ,EAGKP,GAAuB,IAAXhQ,KAAKC,GAAY,EAAa,IAAVD,KAAKC,QAG5C,IAAI8I,IAAJ,UAAAuH,OACY3E,EAAMiC,MAAM7B,KADxB,gBAEE,IAAI5H,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJoM,EACKP,EAAY,EAAG,GAAc,KAAXhQ,KAAKC,KAD5BqQ,OAAAC,EAEKP,EAAY,EAAG,EAAa,KAAVhQ,KAAKC,KAF5BsQ,EAGKP,EAAY,EAAG,GAAc,KAAXhQ,KAAKC,QAG9B,IAAI8I,IAAJ,UAAAuH,OACY3E,EAAMiC,MAAM5B,QADxB,gBAEE,IAAI7H,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJoM,EACKP,EAAsB,GAAVhQ,KAAKC,GAAU,EAAG,IADnCqQ,OAAAC,EAEKP,GAAuB,GAAXhQ,KAAKC,GAAW,GAAc,GAAXD,KAAKC,KAFzCsQ,EAGKP,EAAsB,GAAVhQ,KAAKC,GAAU,EAAG,OAGrC,IAAI8I,IAAJ,UAAAuH,OACY3E,EAAMiC,MAAM3B,SADxB,gBAEE,IAAI9H,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJoM,EACKP,GAAuB,GAAXhQ,KAAKC,GAAW,EAAa,GAAVD,KAAKC,KADzCqQ,OAAAC,EAEKP,EAAsB,GAAVhQ,KAAKC,GAAU,EAAG,IAFnCsQ,EAGKP,GAAuB,GAAXhQ,KAAKC,GAAW,EAAa,GAAVD,KAAKC,QAG3C,IAAI8I,IAAJ,UAAAuH,OACY3E,EAAMiC,MAAM1B,QADxB,gBAEE,IAAI/H,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJoM,EACKP,GAAuB,IAAXhQ,KAAKC,GAAY,EAAa,IAAVD,KAAKC,KAD1CqQ,OAAAC,EAEKP,EAAsB,IAAVhQ,KAAKC,GAAW,GAAc,IAAXD,KAAKC,KAFzCsQ,EAGKP,GAAuB,IAAXhQ,KAAKC,GAAY,EAAa,IAAVD,KAAKC,QAG5C,IAAI8I,IAAJ,UAAAuH,OACY3E,EAAMiC,MAAMzB,SADxB,gBAEE,IAAIhI,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJoM,EACKP,EAAsB,IAAVhQ,KAAKC,GAAW,GAAc,IAAXD,KAAKC,KADzCqQ,OAAAC,EAEKP,GAAuB,IAAXhQ,KAAKC,GAAY,EAAa,IAAVD,KAAKC,KAF1CsQ,EAGKP,EAAsB,IAAVhQ,KAAKC,GAAW,GAAc,IAAXD,KAAKC,WAOlC0L,ykBC3TT6E,cACJ,SAAAA,EAAYC,GAAS,IAAAnR,mGAAAoR,CAAAlR,KAAAgR,KACnBhR,KADmB,IAKCmR,EALDC,IACnBtR,MAAAuR,EAAAL,GAAA9Q,KAAAF,KAAM,CACJsD,SAAU0N,EAAK1N,SAAS2N,GACxBpN,SAAUmN,EAAKnN,4DAETyN,SAAYH,MALD,OAMnBnE,OAAOC,KAAK+D,EAAKG,OAAOxI,QAAQ,SAAC6F,GAC/B2C,EAAMhF,EAAMiC,MAAMI,IAAOlN,SAASG,KAAKuP,EAAKG,MAAM3C,MAPjC1O,8OADJqM,QAanB6E,EAAKG,MAAQ,CACX/E,IAAK,IAAIvL,IAAQ,EAAG,GAAK,GACzByL,MAAO,IAAIzL,IAAQ,EAAG,EAAG,GACzB0L,KAAM,IAAI1L,IAAQ,EAAG,GAAK,GAC1B2L,QAAS,IAAI3L,KAAS,IAAM,KAAO,GACnC4L,SAAU,IAAI5L,IAAQ,IAAM,KAAO,GACnC6L,QAAS,IAAI7L,KAAS,KAAO,EAAG,GAChC8L,SAAU,IAAI9L,IAAQ,KAAO,EAAG,IAGlCmQ,EAAK1N,SAAW,SAAC2N,GACf,IAAM3E,EAAQ,IAAIiF,IAAiB,KAAO,IAAM,GAAK,GACrDjF,EAAM9I,UAAU,EAAG,IAAM,GACzB8I,EAAM2B,MAAMtF,QAAQ,SAACuF,GACnBA,EAAKpK,MAAMxB,IAAI2O,EAAQ3E,OAAS,YAElC,IAAMC,EAAO,IAAIiF,IAAe,GAAK,EAAG,GACxCjF,EAAK/I,UAAU,EAAG,GAAK,GACvB+I,EAAK0B,MAAMtF,QAAQ,SAACuF,GAClBA,EAAKpK,MAAMxB,IAAI2O,EAAQ1E,QAEzB,IAAMkF,EAAU,IAAID,IAAe,KACnCC,EAAQxD,MAAMtF,QAAQ,SAACuF,GACrBA,EAAKpK,MAAMxB,IAAI2O,EAAQS,QAEzB,IAAMC,EAAWF,EAAQpB,QACzBoB,EAAQjO,WAAW,GAAK,GAAK,KAC7BmO,EAASnO,UAAU,GAAK,GAAK,KAC7B+I,EAAK8B,MAAMoD,GACXlF,EAAK8B,MAAMsD,GACX,IAAMnF,EAAU,IAAI+E,IAAiB,IAAM,IAAM,GAAK,GACtD/E,EAAQyB,MAAMtF,QAAQ,SAACuF,GACrBA,EAAKpK,MAAMxB,IAAI2O,EAAQW,QAEzB,IAAMnF,EAAWD,EAAQ6D,QACzB7D,EAAQhJ,UAAU,GAAI,GAAK,GAC3BiJ,EAASjJ,UAAU,GAAI,GAAK,GAC5B,IAAMkJ,EAAU,IAAI6E,IAAiB,IAAM,IAAM,GAAK,GACtD7E,EAAQuB,MAAMtF,QAAQ,SAACuF,GACrBA,EAAKpK,MAAMxB,IAAI2O,EAAQY,QAEzB,IAAMlF,EAAWD,EAAQ2D,QACzB3D,EAAQlJ,UAAU,GAAI,IAAM,GAC5BmJ,EAASnJ,UAAU,GAAI,IAAM,GAC7B,IAAMF,EAAW6I,EAAM2F,kBAAkB,CACvCxF,QACAC,OACAC,UACAC,WACAC,UACAC,aAIF,OAFArJ,EAASyO,eAAeC,OAAO1P,IAAI,EAAG,GAAK,GAC3CgB,EAASyO,eAAetN,OAAS,GAC1BnB,GAGT0N,EAAKnN,SAAW,IAAIoO,IAAkB,CACpCC,UAAU,EACVC,aAAcC,MAGDpB,mzBCrDAqB,cAxBb,SAAAA,IAAc,IAAAvS,+FAAAwS,CAAAtS,KAAAqS,GACZ,IAAM/O,EAAW,IAAIC,IAAqB,IAAM,IADpC,OAEZD,EAASG,SAAmB,GAAXjD,KAAKC,IACtB6C,EAASE,UAAU,EAAG,KAAO,IAC7B1D,EAAAyS,EAAAvS,KAAAwS,EAAAH,GAAAnS,KAAAF,KACEsD,EACA,IAAI2O,IAAkB,CACpBnO,MAAO,QACP2O,aAAa,OAGZ1C,SAAU,EAXHjQ,wPADKiE,yDAeO,IAARwE,EAAQlH,EAARkH,KACR1E,EAA6B7D,KAA7B6D,SAAU6O,EAAmB1S,KAAnB0S,MAClB,GADqC1S,KAAZ+P,QACzB,CACA,IAAM4C,EAAkC,MAA1B,EAAInS,KAAKgC,IAAW,EAAP+F,IACrBqK,EAAI,IAAOD,EACjBD,EAAMpQ,IAAIsQ,EAAG,EAAGA,GAChB/O,EAASgP,QAAU,IAAOF,+wBCxBf,IAAAG,EAAA,SAAAzR,GAAsB,IAAnB0R,EAAmB1R,EAAnB0R,MAAOC,EAAY3R,EAAZ2R,MACjBC,EAAO,CACXC,MAAOC,EAAIC,MAAM,KAAKC,IAAI,SAACC,EAAGxO,GAC5B,IAAMyO,EAAO,IAAIvC,EAAK,CACpBY,KAAM,QACNF,KAAY,IAAN5M,EAAU,SAAY,SAAWtE,KAAKwE,SAC5CuH,KAAY,IAANzH,EAAU,QAAY,SAAWtE,KAAKwE,SAC5C6M,KAAM,QACNvF,MAAa,IAANxH,EAAU,SAAY,SAAWtE,KAAKwE,WAI/C,OAFAuO,EAAKjS,SAASgB,IAAI9B,KAAKuE,OAAOD,EAAI,GAAK,KAAOA,EAAI,GAAK,GAAM,EAAI,GAAK,GAAI,EAAG,GAC7EkO,EAAMlS,KAAKE,IAAIuS,GACRA,IAETC,OAbW,SAaJpD,GAAO,IACDqD,EAA4BrD,EAA/BlO,EAAiBwR,EAActD,EAAjBlL,EACtBlF,KAAKkT,MAAMvK,QAAQ,SAAC4K,EAAMzO,GACxBsL,EAAMlO,EAAIuR,EAAYjT,KAAKuE,OAAOD,EAAI,GAAK,KAAOA,EAAI,GAAK,GAAM,EAAI,GAAK,GAC1EsL,EAAMlL,EAAIwO,GAAuC,EAA3BlT,KAAKuE,OAAOD,EAAI,GAAK,GACnC,EAAJA,IACFsL,EAAMlO,GAAsB,EAAhB1B,KAAKwE,SAAgB,EACjCoL,EAAMlL,GAAsB,EAAhB1E,KAAKwE,SAAgB,EACjCuO,EAAKxG,QAAQqC,KAAK5B,UAAY,GAAsB,GAAhBhN,KAAKwE,UAE3CuO,EAAKC,OAAOpD,OAKXuD,EA7B4BnI,EA6BhByH,EAAKC,MA7BW,MA8BnCS,EAASrE,kBAAoB,IAAI+C,EACjCW,EAAMlS,KAAKE,IAAI2S,EAASrE,mBACxB0D,EAAM/M,OAAO1E,OAASoS,EAASrS,SAE/B0R,EAAM/M,OAAO9F,SAAW,EACxB6S,EAAM/M,OAAOvF,MAAkB,KAAVF,KAAKC,GAC1BuS,EAAM/M,OAAO/E,cAEb8R,EAAMvK,gBAAkB,WAAM,IACpBxC,EAAiB+M,EAAjB/M,OAAQuB,EAASwL,EAATxL,KACVoC,EAAUmJ,EAAMa,kBAEtB,GADA3N,EAAO4N,aAAajK,GAChBA,EAAQqB,UAAW,KACbhB,EAAcL,EAAdK,UACRA,EAAU6J,cAAclK,EAAQG,WAAY9D,GAC5C,IAAM8N,EAAM9J,EAAU+J,gBAAgBxM,GAAM,GAC5C,IAAKuM,EAAK,OACVd,EAAKO,OAAOO,EAAI3D,qzBCvChB6D,cACJ,SAAAA,EAAA5S,GAGG,IAAAvB,EAFDoU,EAEC7S,EAFD6S,OACAC,EACC9S,EADD8S,oGACCC,CAAApU,KAAAiU,GACD,IAAM3Q,EAAW,IAAI+Q,IACnB,IAAM,IAAM,IACZJ,EAASvB,MAAMxQ,EAAG+R,EAASvB,MAAMvQ,EAAG8R,EAASvB,MAAMxN,GAE/CpB,EAAQ,IAAId,IAClBM,EAAS2K,MAAMtF,QAAQ,SAACuF,EAAMpJ,GACxBA,EAAI,GAAM,GACZhB,EAAMwQ,OAAO9T,KAAKwE,SAAU,IAAM,IAAwB,KAAhBxE,KAAKwE,UAEjDkJ,EAAKpK,MAAMrC,KAAKqC,KAElBR,EAASE,UAAU,EAAG,GAAK,GAC3B,IAAK,IAAIsB,EAAI,EAAGA,EAAI,GAAIA,GAAK,EAC3BxB,EAAS2K,MAAMsG,OAAO,GAAI,GAd3B,OAgBDjR,EAASoP,MAAMuB,EAASvB,MAAMxQ,EAAG+R,EAASvB,MAAMvQ,EAAG8R,EAASvB,MAAMxN,IAClEpF,EAAA0U,EAAAxU,KAAAyU,EAAAR,GAAA/T,KAAAF,MACG,IAAI0E,KAAkBsK,aAAa1L,GACpC,IAAI2O,IAAkB,CACpBnO,MAAOmQ,EAASnQ,MAChB4Q,KAAMC,IACNxC,aAAcC,SAGb8B,OAASA,EACdpU,EAAKqU,OAASA,EACdrU,EAAK8U,eAAiC,IAAhBpU,KAAKwE,SA3B1BlF,wPAJkBiE,yDAkCK,IAARwE,EAAQzG,EAARyG,KACRqM,EAAqC5U,KAArC4U,eAAgBV,EAAqBlU,KAArBkU,OAAQ5S,EAAatB,KAAbsB,SAC1BuT,GAAOX,EAAS,GAAKD,EAASvB,MAAMvQ,EAAI,GAC9Cb,EAASa,EAAI0S,EAAOrU,KAAKgC,IAA8B,IAAzBoS,EAAiBrM,IAAesM,uCAIlEZ,EAASnQ,MAAQ,QACjBmQ,EAASvB,MAAQ,IAAI7R,IAAQ,EAAG,EAAG,GAEpBoT,opCC1CTa,wBA2CJ,SAAAA,IAIQ,IAAAhV,EAAAgC,EAAA,EAAAa,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAIoS,EAAAjT,EAHNkT,mBAGM,IAAAD,KAAAE,EAAAnT,EAFNoT,cAEM,IAAAD,KAAAE,EAAArT,EADNsT,eACM,IAAAD,kGAAAE,CAAArV,KAAA8U,GACN,IAAMhH,EAAS,IAAIC,IACbhJ,EAAQ+P,EAAQQ,aAAa,CACjCC,UAAWH,EACXvR,SAAU,EACV2R,YAAa,eAIf,GAFAzQ,EAAMvB,UAAU,GAAI,KAAQ,GAC5BsK,EAAOO,MAAMtJ,GACTiQ,EAAa,CACf,IAAMS,EAAOX,EAAQQ,aAAa,CAChCrM,MAAO,IACPpF,SAAU,IAEZ4R,EAAKjS,WAAW,KAAO,IAAM,IAC7BsK,EAAOO,MAAMoH,GACbA,EAAKjS,UAAU,IAAM,EAAG,GACxBsK,EAAOO,MAAMoH,OACR,CACL,IAAMA,EAAOX,EAAQQ,aAAa,CAChCzR,SAAU,IAEZ4R,EAAKjS,UAAU,EAAG,IAAM,IACxBsK,EAAOO,MAAMoH,GAEf,IAAKL,EAAS,CACZ,IAAMK,EAAOX,EAAQQ,aAAa,CAChCI,OAAO,EACPxM,OAAQ,EAAI,EACZrF,SAAU,IAKZ,GAHA4R,EAAKE,QAAQnV,KAAKC,IAClBgV,EAAKjS,UAAU,EAAG,EAAI,EAAI,EAAG,IAC7BsK,EAAOO,MAAMoH,GACTP,EAAQ,CACV,IAAMO,EAAOX,EAAQQ,aAAa,CAChCI,OAAO,EACPxM,OAAQ,EAAI,EACZrF,SAAU,IAEZ4R,EAAKE,QAAkB,GAAVnV,KAAKC,IAAuB,SAAXyU,EAAoB,GAAK,IACvDO,EAAKjS,UAAqB,SAAX0R,GAAqB,GAAM,GAAK,EAAI,EAAI,EAAG,GAC1DpH,EAAOO,MAAMoH,IA1CX,OA6CN3V,EAAA8V,EAAA5V,KAAA6V,EAAAf,GAAA5U,KAAAF,MACG,IAAI0E,KAAkBsK,aAAalB,GACpC,CACE,IAAIlK,IAAa,CACf8Q,KAAMC,IACNxC,aAAcC,MAEhB,IAAIH,IAAkB,CACpByC,KAAMC,IACNxC,aAAcC,UAIfM,MAAMjR,KAAKqT,EAAQpC,OA1DlB5S,8OA/CYiE,qDAQjB,IAAA+R,EAAAzU,EANDqU,aAMC,IAAAI,KAAAC,EAAA1U,EALDkU,gBAKC,IAAAQ,KAAAC,EAAA3U,EAJD4H,aAIC,IAAA+M,EAJO,EAIPA,EAAAC,EAAA5U,EAHD6H,cAGC,IAAA+M,EAHQ,EAGRA,EAFDpS,EAECxC,EAFDwC,SACA2R,EACCnU,EADDmU,YAEMC,EAAO,IAAIS,IACfjN,EACAC,EACA1I,KAAK2V,KAAKlN,EAAQ6L,EAAQpC,MAAMxQ,GAChC1B,KAAK2V,KAAKjN,GAA0B,eAAhBsM,EAA+BV,EAAQpC,MAAMxQ,EAAI4S,EAAQpC,MAAMvQ,KAE/E2B,EAAQ,IAAId,IAyBlB,OAxBAyS,EAAKxH,MAAMtF,QAAQ,SAACuF,EAAMpJ,GACpBA,EAAI,GAAM,GACZhB,EAAMwQ,OAAO9T,KAAKwE,SAAU,IAAM,IAAwB,KAAhBxE,KAAKwE,UAEjDkJ,EAAKC,cAAgBtK,EACrB,IAAMyK,EAAW,CACfmH,EAAKnH,SAASJ,EAAKK,GACnBkH,EAAKnH,SAASJ,EAAKO,GACnBgH,EAAKnH,SAASJ,EAAKQ,IAErBR,EAAKiE,aAAeiE,EAAIhD,MAAM,IAAIC,IAAI,SAACC,EAAG+C,GACxC,IAAM3H,EAAI5K,EAAMuM,QAOhB,OALGqF,GAASlV,KAAKqP,IAAIvB,EAAS+H,GAAGlU,EAAa,GAAT+G,GAAgB,MAC/CqM,GAAY/U,KAAKqP,IAAIvB,EAAS+H,GAAGlU,IAAc,GAAV+G,GAAiB,OAE1DwF,EAAE4H,UAAU,EAAG,GAAI,IAEd5H,MAGS,eAAhB8G,GACFC,EAAKhS,SAAmB,GAAXjD,KAAKC,IAEbgV,+CAqEXX,EAAQpC,MAAQ,IAAI7R,IAAQ,EAAG,EAAG,GAEnBiU,mzBChHTyB,cACJ,SAAAA,EAAAlV,GAEG,IAAAvB,EADDiF,EACC1D,EADD0D,mGACCyR,CAAAxW,KAAAuW,GACDzW,EAAA2W,EAAAzW,KAAA0W,EAAAH,GAAArW,KAAAF,OACA,IAAM2W,EAAQ,IAAIT,IAAc,GAAK,EAAmB,GAAhBK,EAAM7D,MAAMxQ,EAASqU,EAAM7D,MAAMvQ,GACnE2B,EAAQ,IAAId,IAClB2T,EAAM1I,MAAMtF,QAAQ,SAACuF,EAAMpJ,GACrBA,EAAI,GAAM,GACZhB,EAAMwQ,OAAO9T,KAAKwE,SAAU,IAAM,IAAwB,KAAhBxE,KAAKwE,UAEjDkJ,EAAKpK,MAAMrC,KAAKqC,KAElB6S,EAAMjE,MAAM6D,EAAM7D,MAAMxQ,EAAGqU,EAAM7D,MAAMvQ,EAAGoU,EAAM7D,MAAMxN,GAEtD,IADA,IAAM5B,GAAY,IAAIoB,KAAkBsK,aAAa2H,GAC5C7R,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAC7B,IAAM8R,EAAO,IAAI7S,IACfT,EACA,IAAI2O,IAAkB,CACpBnO,MAAOyS,EAAMzS,MACb4Q,KAAMC,IACNxC,aAAcC,OAGlBwE,EAAKtV,SAASgB,KACE,GAAJwC,EAAR,KAAoByR,EAAM7D,MAAMxQ,EAClC,GAAMqU,EAAM7D,MAAMvQ,EAClB,KAAQoU,EAAM7D,MAAMxN,GAEtBpF,EAAKkB,IAAI4V,GA1BV,OA4BD9W,EAAKwB,SAASa,EAAI4C,EAAQwR,EAAM7D,MAAMvQ,EACtCrC,EAAK8U,eAAiC,IAAhBpU,KAAKwE,SA7B1BlF,wPAHeiB,yDAmCQ,IAARwH,EAAQzG,EAARyG,KACRqM,EAA6B5U,KAA7B4U,eAAgBlM,EAAa1I,KAAb0I,SAClB9H,EAAQ,IAA0C,IAAlCJ,KAAKgC,IAAIoS,EAAiBrM,GAChDG,EAASC,QAAQ,SAACiO,EAAM9R,GACtB8R,EAAKtV,SAASY,GAAkB,GAAJ4C,EAAR,IAAoBlE,GAAc,IAANkE,GAAW,EAAI,IAAOyR,EAAM7D,MAAMxQ,yCAKxFqU,EAAMzS,MAAQ,QACdyS,EAAM7D,MAAQ,IAAI7R,IAAQ,EAAG,EAAG,GAEjB0V,w+BChDTM,eACJ,SAAAA,EAAAxV,GAEG,IAAAvB,EADDgX,EACCzV,EADDyV,sGACCC,CAAA/W,KAAA6W,GAGD,IAHC,IACO3C,EAAmB4C,EAAnB5C,OAAQC,EAAW2C,EAAX3C,OACVrG,EAAS,IAAIC,IACVjJ,EAAI,EAAGA,GAAKoP,EAAQpP,GAAK,EAAG,CACnC,GAAU,IAANA,GAAWA,IAAMoP,EAAQ,CAC3B,IAAMnP,EAAQ,IAAImR,IAAc,EAAG,GAInC,GAHAnR,EAAMtB,SAAmB,GAAXjD,KAAKC,IACnBsE,EAAMvB,UAAU,EAAGsB,EAAG,GACtBgJ,EAAOO,MAAMtJ,GACTD,IAAMoP,EAAQ,MAEpB,IAAM8C,EAAO,IAAId,IAAc,EAAG,GAClCc,EAAKxT,UAAU,EAAGsB,EAAI,IAAM,IAC5BgJ,EAAOO,MAAM2I,GACb,IAAMtC,EAAO,IAAIwB,IAAc,EAAG,GAClCxB,EAAKiB,SAAmB,GAAXnV,KAAKC,IAClBiU,EAAKlR,WAAW,GAAKsB,EAAI,GAAK,GAC9BgJ,EAAOO,MAAMqG,GACbA,EAAKlR,UAAU,EAAG,EAAG,GACrBsK,EAAOO,MAAMqG,GAnBd,OAqBD5G,EAAO4E,MAAMmE,EAAMnE,MAAMxQ,EAAG2U,EAAMnE,MAAMvQ,EAAG0U,EAAMnE,MAAMxN,IACvDpF,EAAAmX,GAAAjX,KAAAkX,GAAAL,GAAA3W,KAAAF,MACG,IAAI0E,KAAkBsK,aAAalB,GACpC,IAAImE,IAAkB,CACpBnO,MAAO+S,EAAM/S,MACb4Q,KAAMC,SAGLwC,MAAQC,GAAIhE,MAAMc,IAASb,IAAI,SAACC,EAAGvO,GACtC,IAAMoS,EAAQ,IAAIZ,EAAM,CAAExR,UAE1B,OADAjF,EAAKkB,IAAImW,GACFA,IAETrX,EAAKwB,SAASY,EAAe,EAAXiS,EAAOjS,EACzBpC,EAAKwB,SAASa,EAAe,EAAXgS,EAAOhS,EACzBrC,EAAKwB,SAAS4D,GAAK,IAAM2R,EAAMnE,MAAMxN,EACrCpF,EAAKkB,IAAI8V,GArCRhX,+OAHeiE,aA4CpB8S,GAAM/S,MAAQ,QACd+S,GAAMnE,MAAQ,IAAI7R,IAAQ,EAAG,EAAG,GAEjBgW,8zBCcAQ,eAjEb,SAAAA,EAAAhW,GAIG,IAAAvB,EAHDoT,EAGC7R,EAHD6R,MACAoE,EAECjW,EAFDiW,UACApD,EACC7S,EADD6S,OACC,mGAAAqD,CAAAvX,KAAAqX,IACDvX,EAAA0X,GAAAxX,KAAAyX,GAAAJ,GAAAnX,KAAAF,QACKkT,MAAQA,EAAMG,IAAI,SAAAvR,GAGjB,IAFJ4V,EAEI5V,EAFJ4V,QACApW,EACIQ,EADJR,SAEMqW,EAAO,IAAI3G,EAAK0G,GAGtB,OAFAC,EAAKrW,SAASG,KAAKH,GACnBxB,EAAKkB,IAAI2W,GACFA,IAET7X,EAAKwX,UAAYA,EAAUjE,IAAI,SAAA5H,GAGzB,IAFJyI,EAEIzI,EAFJyI,OACAC,EACI1I,EADJ0I,OAEM2C,EAAW,IAAI7C,EAAS,CAAEC,SAAQC,WAClCyD,EAAQ,IAAIf,GAAM,CAAEC,aAG1B,OAFAA,EAASK,MAAQS,EAAMT,MACvBrX,EAAKkB,IAAI4W,GACFd,IAEThX,EAAKoU,OAASA,EAAOb,IAAI,SAACwE,EAAO9S,GAAR,OAAkB8S,EAAMxE,IAAI,SAAA9H,EAAWuM,GAASvM,EAAjBwM,KAAiB,IACnE7C,GAAS,EACA,IAAT4C,EAAY5C,EAAS,OAChB4C,IAASD,EAAMjV,OAAS,IAAGsS,EAAS,SAC7C,IAUIyC,EAVE3C,GASC,IARLlV,EAAKwX,UAAUU,UAAU,SAAAhM,GAAA,IACvBkI,EADuBlI,EACvBkI,OACAC,EAFuBnI,EAEvBmI,OAFuB,OAIvBA,EAAOjS,IAAM4V,EAAOtX,KAAKuE,MAAM8S,EAAMjV,OAAS,IAC3CuR,EAAOhS,GAAK4C,GACZoP,EAAOhS,EAAI+R,EAASnP,IAe3B,OATI4S,EAAO,IAAI7C,EAAQ,CACjBE,cACAE,SACAE,QAAmB,IAAVrQ,KAIVzD,SAASgB,IAAW,EAAPwV,EAA2C,EAA/BtX,KAAKuE,MAAM8S,EAAMjV,OAAS,GAAiB,EAARmC,EAAW,GAC5EjF,EAAKkB,IAAI2W,GACFA,MA/CR7X,yPALkBiB,sDAwDLsH,GAAW,IACjB6K,EAAqBlT,KAArBkT,MAAOoE,EAActX,KAAdsX,UACfpE,EAAMvK,QAAQ,SAAA4K,GAAI,OAAIA,EAAK9K,gBAAgBJ,KAC3CiP,EAAU3O,QAAQ,SAACmO,GACjBA,EAASrO,gBAAgBJ,GACzByO,EAASK,MAAMxO,QAAQ,SAAAiO,GAAI,OAAIA,EAAKnO,gBAAgBJ,oYC9D3C,IAAA4P,GAAA,SAAA5W,GAAsB,IAAnB0R,EAAmB1R,EAAnB0R,MAAOC,EAAY3R,EAAZ2R,MAEjBO,EAAO,IAAIvC,EAAK,CACpBY,KAAM,QACNF,KAAM,SACNnF,KAAM,QACNsF,KAAM,QACNvF,MAAO,WAETiH,EAAKjS,SAASgB,IAAI,EAAG,EAAG,GACxBiR,EAAKjE,kBAAoB,IAAI+C,EAC7B,IACI6F,EADEC,EAAc,IAAItX,IAExB0S,EAAKvD,sBAAwB,WAC3BoI,aAAaF,GACbA,EAAQG,WAAW,WACb9E,EAAKlE,cACT2D,EAAM/M,OAAOqS,iBAAiBH,GAC9B5E,EAAKjD,OAAO6H,KACX,MAELnF,EAAMlS,KAAKE,IAAIuS,GACfP,EAAMlS,KAAKE,IAAIuS,EAAKjE,mBACpB0D,EAAM/M,OAAO7F,UAAY,EACzB4S,EAAM/M,OAAO1E,OAASgS,EAAKjS,SAG3B,IAAMiX,EAAW,IAAIlB,GAAS,CAC5BnE,MAAOsF,GAAIpF,MAAM,IAAIC,IAAI,iBAAO,CAC9BqE,QAAS,CACP9F,KAAM,QACNF,KAAM,SAAWlR,KAAKwE,SACtBuH,KAAM,SAAW/L,KAAKwE,SACtB6M,KAAM,QACNvF,MAAO,SAAW9L,KAAKwE,UAEzB1D,SAAU,IAAIT,IACgB,GAAX,EAAhBL,KAAKwE,SAAe,KACW,EAAhCxE,KAAKuE,MAAsB,EAAhBvE,KAAKwE,UAChB,MAGJsS,UAAW,CACT,CACEpD,OAAQ,EACRC,OAAQ,CAAEjS,GAAI,EAAGC,EAAG,IAEtB,CACE+R,OAAQ,EACRC,OAAQ,CAAEjS,EAAG,EAAGC,EAAG,KAGvB+R,OAAQ,CACNsE,GAAIpF,MAAM,IAAIC,IAAI,iBAAO,CAAE0E,KAAM,aACjCS,GAAIpF,MAAM,IAAIC,IAAI,iBAAO,CAAE0E,KAAM,aACjCS,GAAIpF,MAAM,IAAIC,IAAI,iBAAO,CAAE0E,KAAM,aACjCS,GAAIpF,MAAM,IAAIC,IAAI,iBAAO,CAAE0E,KAAM,gBAGrC/E,EAAMlS,KAAKE,IAAIuX,GAIfvF,EAAMvK,gBAAkB,WAAM,IACpBxC,EAAW+M,EAAX/M,OACF2D,EAAUmJ,EAAMa,kBAItB,GAHI3N,EAAO4N,aAAajK,IACtB2J,EAAKvD,wBAEHpG,EAAQqB,UAAW,KACbhB,EAAcL,EAAdK,UACRA,EAAU6J,cAAclK,EAAQG,WAAY9D,GAC5C,IAAM8N,EAAM9J,EAAUwO,iBAAVD,GAEPD,EAASrE,OAZJ,KAaP,GACH,IAAKH,EAAK,OACVA,EAAI3D,MAAMlO,EAAI1B,KAAK4B,IAAI5B,KAAK6B,IAAI0R,EAAI3D,MAAMlO,GAAI,KAAM,KACpD6R,EAAI3D,MAAMjO,EAAI4R,EAAI2E,OAAOpX,SAASa,EAClC4R,EAAI3D,MAAMlL,EAAI1E,KAAK4B,IAAI5B,KAAK6B,IAAI0R,EAAI3D,MAAMlL,GAAI,KAAM,KACpDqO,EAAKC,OAAOO,EAAI3D,UCrFtBuI,EAAAC,EAAAC,EAAA,0BAAA/F,IAAA6F,EAAAC,EAAAC,EAAA,yBAAAZ,ijCCMMrU,cACJ,SAAAA,IAKQ,IAAA9D,EAAAuB,EAAA,EAAAsB,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAImW,EAAAzX,EAJNyC,aAIM,IAAAgV,EAJE,SAIFA,EAAA7V,EAAA5B,EAHN6B,YAGM,IAAAD,EAHC,EAGDA,EAAAE,EAAA9B,EAFN+B,oBAEM,IAAAD,EAFS,GAETA,EADH4V,EACGC,EAAA3X,EAAA,8HAAAtB,CAAAC,KAAA4D,GACN,IAAMqV,EAAeC,IAAUC,MAAMF,aAAanR,QAChD,yCACA,CACE,yCACA,2BACAI,KAAK,OACPJ,QACA,wBACA,CACE,wBACA,6DACAI,KAAK,OAEHkR,EAAc,EAAIlW,EAClBmW,EAAgBD,EAAchW,EAC9BkW,EAAiBJ,IAAUC,MAAMG,eAAexR,QACpD,2CACA,CACE,2CACA,0BACA,+BACA,sCACA,8DACA,+CACA,KACAI,KAAK,OACPJ,QACA,gDACA,gCAAAgJ,OACiCsI,GADjCtI,OAC+CsI,EAAc,GAAM,EAAI,KAAO,GAD9E,uCAAAtI,OAEmCuI,GAFnCvI,OAEmDuI,EAAgB,GAAM,EAAI,KAAO,GAFpF,MAGE,6FACA,4CACAnR,KAAK,OAlCH,OAoCNpI,EAAAyZ,EAAAvZ,KAAAC,EAAA2D,GAAA1D,KAAAF,+aAAA+K,CAAA,CACEyO,KAAI,iBAAA1I,OAAmB5N,EAAnB,KAAA4N,OAA2B1N,GAC/BqW,SAAUC,IAAcrJ,MAAM6I,IAAUC,MAAMM,UAC9CH,iBACAL,eACAU,WAAY,CAAEC,aAAa,GAC3BtV,KAAK,EACLuV,QAAQ,GACLd,MAEAjV,MAAQhE,EAAK2Z,SAASK,QAAQC,MACnCja,EAAKgE,MAAMxB,IAAIwB,GA/CThE,8OANiBka,aAyDZpW,yCC/Df+U,EAAAsB,EAAApB,GAAA,SAAAqB,GAAA,IAwBsBC,EAChBC,EAzBNC,EAAA1B,EAAA,QAAA2B,EAAA3B,EAAA,QAAA4B,EAAA5B,EAAA,QAIM9S,EAAQC,SAAS0U,eAAe,SAChCzH,EAAQ,IAAIpJ,IAAM,CAAE9D,UACpBmN,EAAQ,IAAIrN,IAAM,CAAEE,UAEtB4U,EAAQ7T,OAAO8T,SAASC,KAAKC,MAAM,KAAKC,MAAM,GAAG,GAChDC,EAAOL,KACV7T,OAAO8T,SAASC,KAAO,QACvBF,EAAQ,QAEVP,EAAa,kBAAMtT,OAAOc,iBAAiB,aAAc,kBAAMd,OAAO8T,SAASK,WAAU,KAYnFX,EAAS,GADOD,EA2BT,CACX,CAAEa,KAAM,kBAAmBC,KAAM,cA1B3BtS,QAAQ,SAAAtH,GAAoB,IAAjB2Z,EAAiB3Z,EAAjB2Z,KAAMC,EAAW5Z,EAAX4Z,KACfC,EAAapV,SAASqV,cAAc,OAC1CD,EAAWE,UAAYH,EACvBC,EAAWG,MAAM/Z,SAAW,WAC5B4Z,EAAWG,MAAMC,WAAa,aAC9BJ,EAAWG,MAAM1P,IAAM,YACvB7F,SAASC,KAAKiB,YAAYkU,GANM,IAOjBK,EAAiBL,EAAWlS,wBAAnCC,MACRiS,EAAWG,MAAMC,WAAaN,EAChB,SAARQ,IAAc,IACVvS,EAAUiS,EAAWlS,wBAArBC,MACIsS,EAARtS,GACFnD,SAASC,KAAK0V,YAAYP,IAC1Bd,GAAU,KACKD,EAAMvX,SAxB3BkD,SAASC,KAAK2V,UAAY,SAC1BZ,EAAOL,GAAO,CAAE1H,QAAOC,UACvBD,EAAM5I,QAAQwR,KAAK,MAAO,WACxB7V,SAAS0U,eAAe,UAAUa,MAAMO,QAAU,OAClD7I,EAAM3H,WAAY,MAwBdiN,WAAWmD,EAAO,IAGtBA","file":"code/main.dd872ddb85ca2aa4fbc2.js","sourcesContent":["import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.01, 2048);\n    this.distance = 4;\n    this.maxHeight = Infinity;\n    this.offset = 1.2;\n    this.tilt = Math.PI * -0.65;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 8);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      root,\n      tilt,\n    } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance);\n    position.y = Math.min(Math.max(position.y, 0.1 - offset), maxHeight - offset);\n    this.lookAt(root.position);\n    position.y += offset;\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(1024, 8);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0x999999,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\nimport Starfield from './starfield';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.025);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.starfield = new Starfield();\n    this.root.add(this.starfield);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      starfield,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    starfield.position.copy(grid.position);\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n      if (this.onDestinationCallback) {\n        this.onDestinationCallback();\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point) {\n    const { destinationMarker } = this;\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    this.faceTo(point);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walkTo(point);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = () => {\n    const { camera, grid } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObject(grid)[0];\n      if (!hit) return;\n      pack.walkTo(hit.point);\n    }\n  };\n};\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Elevator extends Mesh {\n  constructor({\n    floors,\n    origin,\n  }) {\n    const geometry = new BoxGeometry(\n      0.99, 0.99, 0.99,\n      Elevator.scale.x, Elevator.scale.y, Elevator.scale.z\n    );\n    const color = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(color);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(Elevator.scale.x, Elevator.scale.y, Elevator.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color: Elevator.color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n  }\n\n  onAnimationTick({ time }) {\n    const { animationStart, floors, position } = this;\n    const mid = (floors - 1) * Elevator.scale.y * 0.5;\n    position.y = mid + (Math.sin((animationStart + time) * 0.5) * mid);\n  }\n}\n\nElevator.color = 0x440000;\nElevator.scale = new Vector3(2, 3, 2);\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Hallway extends Mesh {\n  static generateWall({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Hallway.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Hallway.scale.x : Hallway.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    hasElevator = false,\n    isEdge = false,\n    isLobby = false,\n  } = {}) {\n    const merged = new Geometry();\n    const floor = Hallway.generateWall({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    floor.translate(0, -0.0005, 0);\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Hallway.generateWall({\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Hallway.generateWall({\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Hallway.generateWall({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Hallway.generateWall({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n    this.scale.copy(Hallway.scale);\n  }\n}\n\nHallway.scale = new Vector3(4, 3, 4);\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Doors extends Object3D {\n  constructor({\n    floor,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, Doors.scale.x * 0.5, Doors.scale.y);\n    const color = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(color);\n    });\n    plane.scale(Doors.scale.x, Doors.scale.y, Doors.scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color: Doors.color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.25 + (i * 0.5)) * Doors.scale.x,\n        0.5 * Doors.scale.y,\n        0.499 * Doors.scale.z\n      );\n      this.add(door);\n    }\n    this.position.y = floor * Doors.scale.y;\n    this.animationStart = Math.random() * 512;\n  }\n\n  onAnimationTick({ time }) {\n    const { animationStart, children } = this;\n    const step = (0.25 + (Math.sin(animationStart + time) * 0.24));\n    children.forEach((door, i) => {\n      door.position.x = (-0.25 + (i * 0.5) + (step * (i === 0 ? -1 : 1))) * Doors.scale.x;\n    });\n  }\n}\n\nDoors.color = 0x333333;\nDoors.scale = new Vector3(2, 3, 2);\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\nimport Doors from './doors';\n\nclass Shaft extends Mesh {\n  constructor({\n    elevator,\n  }) {\n    const { floors, origin } = elevator;\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(Shaft.scale.x, Shaft.scale.y, Shaft.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color: Shaft.color,\n        side: DoubleSide,\n      })\n    );\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({ floor });\n      this.add(doors);\n      return doors;\n    });\n    this.position.x = origin.x * 4;\n    this.position.y = origin.y * 3;\n    this.position.z = -1.5 * Shaft.scale.z;\n    this.add(elevator);\n  }\n}\n\nShaft.color = 0x333333;\nShaft.scale = new Vector3(2, 3, 2);\n\nexport default Shaft;\n","import { Object3D } from 'three';\nimport Dude from '@/actors/dude';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Shaft from './shaft';\n\nclass Building extends Object3D {\n  constructor({\n    dudes,\n    elevators,\n    floors,\n  }) {\n    super();\n    this.dudes = dudes.map(({\n      pallete,\n      position,\n    }) => {\n      const mesh = new Dude(pallete);\n      mesh.position.copy(position);\n      this.add(mesh);\n      return mesh;\n    });\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      const shaft = new Shaft({ elevator });\n      elevator.doors = shaft.doors;\n      this.add(shaft);\n      return elevator;\n    });\n    this.floors = floors.map((rooms, floor) => rooms.map(({ type }, room) => {\n      let isEdge = false;\n      if (room === 0) isEdge = 'left';\n      else if (room === rooms.length - 1) isEdge = 'right';\n      const hasElevator = (\n        this.elevators.findIndex(({\n          floors,\n          origin,\n        }) => (\n          origin.x === room - Math.floor(rooms.length / 2)\n          && origin.y <= floor\n          && origin.y + floors > floor\n        ))\n      ) !== -1;\n      let mesh;\n      switch (type) {\n        default:\n          mesh = new Hallway({\n            hasElevator,\n            isEdge,\n            isLobby: floor === 0,\n          });\n          break;\n      }\n      mesh.position.set(room * 4 - (Math.floor(rooms.length / 2) * 4), floor * 3, 0);\n      this.add(mesh);\n      return mesh;\n    }));\n  }\n\n  onAnimationTick(animation) {\n    const { dudes, elevators } = this;\n    dudes.forEach(dude => dude.onAnimationTick(animation));\n    elevators.forEach((elevator) => {\n      elevator.onAnimationTick(animation);\n      elevator.doors.forEach(door => door.onAnimationTick(animation));\n    });\n  }\n}\n\nexport default Building;\n","import { Vector3 } from 'three';\nimport Dude from '@/actors/dude';\nimport Building from '@/building';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  /* Spawn main dude */\n  const dude = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  dude.position.set(2, 3, 0);\n  dude.destinationMarker = new Marker();\n  const positionAux = new Vector3();\n  let timer;\n  dude.onDestinationCallback = () => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      if (dude.destination) return;\n      scene.camera.getWorldPosition(positionAux);\n      dude.faceTo(positionAux);\n    }, 5000);\n  };\n  scene.root.add(dude);\n  scene.root.add(dude.destinationMarker);\n  scene.camera.maxHeight = 3;\n  scene.camera.target = dude.position;\n\n  /* Spawn test building */\n  const building = new Building({\n    dudes: [...Array(4)].map(() => ({\n      pallete: {\n        arms: 0x222222,\n        eyes: 0x999999 * Math.random(),\n        head: 0x999999 * Math.random(),\n        legs: 0x222222,\n        torso: 0x999999 * Math.random(),\n      },\n      position: new Vector3(\n        (Math.random() * 9 - 4.5) * 2,\n        Math.floor(Math.random() * 3) * 3,\n        0\n      ),\n    })),\n    elevators: [\n      {\n        floors: 2,\n        origin: { x: -1, y: 0 },\n      },\n      {\n        floors: 2,\n        origin: { x: 1, y: 1 },\n      },\n    ],\n    floors: [\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n    ],\n  });\n  scene.root.add(building);\n\n  /* Animation loop */\n  const floor = 1;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    if (camera.processInput(pointer)) {\n      dude.onDestinationCallback();\n    }\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObjects([\n        // ...building.elevators,\n        ...building.floors[floor],\n      ])[0];\n      if (!hit) return;\n      hit.point.x = Math.min(Math.max(hit.point.x, -9.5), 9.5);\n      hit.point.y = hit.object.position.y;\n      hit.point.z = Math.min(Math.max(hit.point.z, -1.5), 1.5);\n      dude.walkTo(hit.point);\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as game } from './game';\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.phong.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.phong.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.phong.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/engine/input';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    document.getElementById('splash').style.display = 'none';\n    input.isEnabled = true;\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n"],"sourceRoot":""}