{"version":3,"sources":["webpack:///./src/core/music.js","webpack:///./src/core/input.js","webpack:///./src/meshes/bubble.js","webpack:///./src/core/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/meshes/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/meshes/building/floor.js","webpack:///./src/meshes/building/index.js","webpack:///./src/core/ui.js","webpack:///./src/ui/editor.js","webpack:///./src/core/history.js","webpack:///./src/materials/rain.js","webpack:///./src/meshes/rain.js","webpack:///./src/meshes/moon.js","webpack:///./src/meshes/starfield.js","webpack:///./src/scenes/editor.js","webpack:///./src/actors/thiccboi.js","webpack:///./src/meshes/legacy_building/elevator/cabin.js","webpack:///./src/meshes/button.js","webpack:///./src/meshes/legacy_building/elevator/doors.js","webpack:///./src/meshes/legacy_building/elevator/shaft.js","webpack:///./src/meshes/legacy_building/elevator/index.js","webpack:///./src/meshes/legacy_building/wall.js","webpack:///./src/meshes/legacy_building/hallway.js","webpack:///./src/meshes/legacy_building/road.js","webpack:///./src/meshes/legacy_building/walkable.js","webpack:///./src/meshes/legacy_building/ai.js","webpack:///./src/meshes/legacy_building/index.js","webpack:///./src/ui/elevator.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/core/camera.js","webpack:///./src/meshes/grid.js","webpack:///./src/core/vignette.js","webpack:///./src/core/scene.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/materials/sprite.js"],"names":["Music","_ref","_this","this","toggle","_classCallCheck","script","document","createElement","async","defer","src","body","appendChild","check","window","SC","api","initialize","client_id","tracks","shuffle","track","addEventListener","wantsToPlay","play","setTimeout","index","length","random","Math","floor","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","_ref$mount","mount","keyboard","backwards","forwards","leftwards","rightwards","pointer","current","Vector2","movement","x","y","normalized","last","wheel","touches","Touches","preventSimulated","target","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","onBlur","e","preventDefault","onKeydown","onKeyup","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","keyCode","_ref2","repeat","indexOf","tagName","_ref3","isEnabled","secondary","primary","_ref4","_ref6","_slicedToArray","_ref5","rect","top","left","i","_touches$i","clientX","clientY","width","height","copy","_ref7","deltaY","_ref8","getBoundingClientRect","Bubble","_possibleConstructorReturn","_getPrototypeOf","call","SpriteMaterial","depthTest","scale","set","visible","Sprite","lines","delay","arguments","undefined","_this$material","material","renderer","ctx","clearRect","fillStyle","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","map","needsUpdate","clearTimeout","timer","display","Actor","bonesOrigin","collisionGeometry","geometry","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","add","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","Object","keys","forEach","bone","skeleton","bones","Bones","position","mixer","AnimationMixer","actor_assertThisInitialized","actions","animations","reduce","action","_defineProperty","clipAction","animation","idle","timeScale","rotationAux","movementAux","Vector3","collisionMesh","Mesh","MeshBasicMaterial","opacity","transparent","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","merge","vertices","a","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","computeVertexNormals","computeBoundingSphere","delta","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","min","max","abs","waypoint","path","distance","distanceTo","step","sub","normalize","multiplyScalar","faceTo","setAnimation","fadeOut","reset","fadeIn","point","angle","z","PI","bubble","boundingSphere","radius","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","QuaternionKeyframeTrack","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","dude_possibleConstructorReturn","dude_getPrototypeOf","CylinderBufferGeometry","translate","CylinderGeometry","color","SphereGeometry","hat","leftEye","eyes","rightEye","clone","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","rotateX","marker_possibleConstructorReturn","marker_getPrototypeOf","time","inc","sin","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","root","onAnimationTick","camera","grid","getPointerFrame","processPointer","hit","getRaycaster","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","minHeight","pitch","updateOrbit","Floor","number","floor_classCallCheck","floor_possibleConstructorReturn","floor_getPrototypeOf","setNumber","_Floor$defaultGridSiz","defaultGridSize","Grid","setTile","type","tile","nodes","walkable","tiles","_grid$y$x","floor_slicedToArray","r","g","Color","setRGB","air","plane","PlaneBufferGeometry","intersect","side","DoubleSide","GridMaterial","chunks","floor_toConsumableArray","ceil","chunkSize","setIndex","BufferAttribute","Uint16Array","addAttribute","chunk","updateChunk","isActive","Object3D","avg","offsetHSL","cy","cx","indices","colors","normals","pushFace","n","offset","apply","pushBox","testNeighbor","topAO","testType","types","getNodeAt","testTileNeighbor","wall","testWallNeighbor","testWindowNeighbor","tileAO","windowAO","mesh","getIndex","getAttribute","normal","setArray","count","_isActive","active","Building","meta","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","floors","activeFloor","computeHeightmap","heightmap","splice","building_slicedToArray","remove","addFloor","_activeFloor","UI","ui_classCallCheck","wrapper","content","removeChild","tag","node","firstChild","EditorUI","floorCount","onAddFloor","onRemoveFloor","onSave","onSetFloor","editor_classCallCheck","editor_getPrototypeOf","editor_assertThisInitialized","innerText","colorInput","value","setColor","pick","_this$tool","tool","modifier","setTool","pickButton","label","floorInput","setFloor","parseInt","setFloorCount","save","saveButton","_get","prototype","removeEventListener","History","history_classCallCheck","past","future","prev","pop","undo","unshift","redo","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","replace","join","rain_possibleConstructorReturn","rain_getPrototypeOf","rain_objectSpread","name","uniforms","UniformsUtils","fragmentShader","fog","diffuse","ShaderMaterial","Rain","meshes_rain_classCallCheck","meshes_rain_possibleConstructorReturn","meshes_rain_getPrototypeOf","numDrops","setDynamic","ripples","Points","PointsMaterial","size","sizeAttenuation","frustumCulled","offsets","drop","BoxGeometry","attributes","array","InstancedBufferGeometry","InstancedBufferAttribute","drops","resetDrop","testHeight","func","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","Starfield","starfield_classCallCheck","aux","o","starfield_possibleConstructorReturn","starfield_getPrototypeOf","moon","scenes_editor","rain","starfield","stored","localStorage","getItem","building","JSON","parse","setHeightTest","getHeight","_building$floors$buil","maxDistance","history","ctrlKey","shiftKey","stopPropagation","ui","confirm","removeFloor","empty","export","setItem","stringify","setModified","constructor","Infinity","lastTile","processKeyboard","editor_objectSpread","raycaster","intersectObjects","addScaledVector","_ui$tool","currentType","currentColor","getHexString","ThiccBoi","thiccboi_classCallCheck","thiccboi_possibleConstructorReturn","thiccboi_getPrototypeOf","Cabin","cabin_classCallCheck","setHSL","cabin_possibleConstructorReturn","cabin_getPrototypeOf","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","origin","ret","tapping","ThreeMath","smoothstep","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","MOVING","OPEN","close","open","children","animationStep","Shaft","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","findIndex","p","travel","to","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","wall_toConsumableArray","j","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","Road","road_classCallCheck","markings","road_possibleConstructorReturn","road_getPrototypeOf","MeshLambertMaterial","Walkable","walkable_classCallCheck","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","AI","ai_classCallCheck","actors","actor","lastThought","IDLE","WALKING","destination","setWalkableAt","ai_slicedToArray","slice","elevators","legacy_building_classCallCheck","legacy_building_getPrototypeOf","ai","legacy_building_assertThisInitialized","layout","split","legacy_building_toConsumableArray","buttons","meshes","rooms","room","elevatorIndex","road","addToGrid","addActor","child","ElevatorUI","ui_elevator_classCallCheck","ui_elevator_possibleConstructorReturn","ui_elevator_getPrototypeOf","onFloor","onExit","unmount","game","reverse","maxHeight","testMeshes","game_toConsumableArray","spawn","isWalkableAt","elevatorUI","_building$floors$floo","object","parent","onDestination","say","getPath","elevatorFloor","show","addPassenger","removePassenger","tap","__webpack_require__","d","__webpack_exports__","Camera","tilt","speed","Raycaster","_assertThisInitialized","forward","right","worldUp","PerspectiveCamera","setFromCamera","far","hasUpdated","cos","negate","crossVectors","ray","direction","lookAt","_ref$background","background","_ref$size","_ref$subdivisions","subdivisions","grid_classCallCheck","grid_possibleConstructorReturn","grid_getPrototypeOf","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","OrthographicCamera","sprite","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Scene","grd","createRadialGradient","addColorStop","beginPath","fill","clearDepth","render","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","vignette","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","getDelta","oldTime","clear","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","lambert","primaryGrid","secondaryGrid","extensions","derivatives","lights","setImmediate","fonts","loaded","_core_input__WEBPACK_IMPORTED_MODULE_0__","_core_music__WEBPACK_IMPORTED_MODULE_1__","_core_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","splash","music","location","hash","Scenes","reload","test","fontTester","style","fontFamily","initialWidth","once","process","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.d2f58a30107181a71e75.js","sourcesContent":["class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.keyboard = {\n      backwards: false,\n      forwards: false,\n      leftwards: false,\n      rightwards: false,\n    };\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('blur', this.onBlur.bind(this), false);\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('keydown', this.onKeydown.bind(this), false);\n    window.addEventListener('keyup', this.onKeyup.bind(this), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onBlur() {\n    const { keyboard } = this;\n    keyboard.forwards = false;\n    keyboard.backwards = false;\n    keyboard.leftwards = false;\n    keyboard.rightwards = false;\n  }\n\n  onKeydown({ keyCode, repeat, target }) {\n    const { keyboard } = this;\n    if (\n      repeat\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = true;\n        break;\n      case 83:\n        keyboard.backwards = true;\n        break;\n      case 65:\n        keyboard.leftwards = true;\n        break;\n      case 68:\n        keyboard.rightwards = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    const { keyboard } = this;\n    if (repeat) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = false;\n        break;\n      case 83:\n        keyboard.backwards = false;\n        break;\n      case 65:\n        keyboard.leftwards = false;\n        break;\n      case 68:\n        keyboard.rightwards = false;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled || e.target.tagName !== 'CANVAS') return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/meshes/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    bonesOrigin,\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    Object.keys(bonesOrigin).forEach((bone) => {\n      this.skeleton.bones[Actor.Bones[bone]].position.copy(bonesOrigin[bone]);\n    });\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: Dude.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 24);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/meshes/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processPointer(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.minHeight = 0.1;\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import { Grid } from 'pathfinding';\nimport {\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneBufferGeometry,\n  VertexColors,\n  Object3D,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Floor extends Object3D {\n  constructor({ grid, number } = { number: 0 }) {\n    super();\n    this.setNumber(number);\n    const { width, height } = Floor.defaultGridSize;\n    this.grid = new Grid(width, height);\n    this.grid.setTile = function setTile({\n      color,\n      type,\n      x,\n      y,\n    }) {\n      const tile = this.nodes[y][x];\n      tile.color = color;\n      tile.type = type;\n      tile.walkable = type !== Floor.tiles.tile;\n    };\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        if (grid) {\n          const [type, r, g, b] = grid[y][x];\n          this.grid.setTile({\n            x,\n            y,\n            type,\n            color: (new Color())\n              .setRGB(r / 0xFF, g / 0xFF, b / 0xFF),\n          });\n        } else {\n          this.grid.setTile({\n            x,\n            y,\n            type: Floor.tiles.air,\n            color: new Color(0),\n          });\n        }\n      }\n    }\n    const plane = new PlaneBufferGeometry(width, height, 2, 2);\n    plane.rotateX(Math.PI * -0.5);\n    plane.translate(width * 0.5, 0, height * 0.5);\n    this.intersect = new Mesh(\n      plane,\n      new MeshBasicMaterial({\n        side: DoubleSide,\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.add(this.intersect);\n    const material = new GridMaterial({\n      vertexColors: VertexColors,\n    });\n    this.chunks = [...Array(Math.ceil(this.grid.height / Floor.chunkSize.height))].map(() => (\n      [...Array(Math.ceil(this.grid.width / Floor.chunkSize.width))].map(() => {\n        const geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(new Uint16Array(), 1));\n        geometry.addAttribute('position', new BufferAttribute(new Float32Array(), 3));\n        geometry.addAttribute('color', new BufferAttribute(new Float32Array(), 3));\n        geometry.addAttribute('normal', new BufferAttribute(new Float32Array(), 3));\n        const chunk = new Mesh(\n          geometry,\n          material\n        );\n        chunk.visible = false;\n        this.add(chunk);\n        return chunk;\n      })\n    ));\n    for (let y = 0; y < this.chunks.length; y += 1) {\n      for (let x = 0; x < this.chunks[0].length; x += 1) {\n        this.updateChunk(x, y);\n      }\n    }\n    this.isActive = false;\n  }\n\n  setTile({\n    color,\n    type,\n    x,\n    y,\n  }) {\n    const { chunks, grid } = this;\n    if (\n      x < 0\n      || x > grid.width - 1\n      || y < 0\n      || y > grid.height - 1\n    ) {\n      return;\n    }\n    color = new Color(color || 0);\n    const avg = (color.r + color.g + color.b) / 3 * 0.1;\n    color.offsetHSL(\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg\n    );\n    grid.setTile({\n      color,\n      type,\n      x,\n      y,\n    });\n    const chunk = {\n      x: Math.floor(x / Floor.chunkSize.width),\n      y: Math.floor(y / Floor.chunkSize.height),\n    };\n    for (\n      let cy = Math.max(chunk.y - 1, 0);\n      cy <= Math.min(y + 1, chunks.length - 1);\n      cy += 1\n    ) {\n      for (\n        let cx = Math.max(chunk.x - 1, 0);\n        cx <= Math.min(x + 1, chunks[0].length - 1);\n        cx += 1\n      ) {\n        this.updateChunk(cx, cy);\n      }\n    }\n  }\n\n  get isActive() {\n    return this._isActive;\n  }\n\n  set isActive(active) {\n    const { intersect } = this;\n    intersect.visible = active;\n    this._isActive = active;\n  }\n\n  setNumber(number) {\n    this.number = number;\n    this.position.set(0, Floor.height * number, 0);\n  }\n\n  updateChunk(cx, cy) {\n    const { chunks, grid, number } = this;\n    const indices = [];\n    const vertices = [];\n    const colors = [];\n    const normals = [];\n    const pushFace = (v, c, n) => {\n      const offset = vertices.length / 3;\n      vertices.push(...v);\n      colors.push(...c);\n      normals.push(...n);\n      indices.push(\n        offset, offset + 1, offset + 2,\n        offset + 2, offset + 3, offset\n      );\n    };\n    const pushBox = (x, y, { r, g, b }, height, testNeighbor, topAO, z = 0) => {\n      if (!testNeighbor(x, y + 1)) {\n        pushFace(\n          [\n            x, z, y + 1,\n            x + 1, z, y + 1,\n            x + 1, z + height, y + 1,\n            x, z + height, y + 1,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n          ]\n        );\n      }\n      if (!testNeighbor(x, y - 1)) {\n        pushFace(\n          [\n            x + 1, z, y,\n            x, z, y,\n            x, z + height, y,\n            x + 1, z + height, y,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n          ]\n        );\n      }\n      if (!testNeighbor(x - 1, y)) {\n        pushFace(\n          [\n            x, z, y,\n            x, z, y + 1,\n            x, z + height, y + 1,\n            x, z + height, y,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n          ]\n        );\n      }\n      if (!testNeighbor(x + 1, y)) {\n        pushFace(\n          [\n            x + 1, z, y + 1,\n            x + 1, z, y,\n            x + 1, z + height, y,\n            x + 1, z + height, y + 1,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n          ]\n        );\n      }\n      if (number > 0 || z !== 0) {\n        pushFace(\n          [\n            x, z + 0.001, y,\n            x + 1, z + 0.001, y,\n            x + 1, z + 0.001, y + 1,\n            x, z + 0.001, y + 1,\n          ],\n          [\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n          ],\n          [\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n          ]\n        );\n      }\n      pushFace(\n        [\n          x, z + height, y + 1,\n          x + 1, z + height, y + 1,\n          x + 1, z + height, y,\n          x, z + height, y,\n        ],\n        [\n          r * topAO[0], g * topAO[0], b * topAO[0],\n          r * topAO[1], g * topAO[1], b * topAO[1],\n          r * topAO[2], g * topAO[2], b * topAO[2],\n          r * topAO[3], g * topAO[3], b * topAO[3],\n        ],\n        [\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n        ]\n      );\n    };\n    const testType = (x, y, types) => {\n      if (x < 0 || x > grid.width - 1 || y < 0 || y > grid.height - 1) {\n        return false;\n      }\n      return types.indexOf(grid.getNodeAt(x, y).type) !== -1;\n    };\n    const testTileNeighbor = (x, y) => testType(\n      x,\n      y,\n      [Floor.tiles.tile, Floor.tiles.wall, Floor.tiles.window]\n    );\n    const testWallNeighbor = (x, y) => testType(x, y, [Floor.tiles.wall]);\n    const testWindowNeighbor = (x, y) => testType(x, y, [Floor.tiles.wall, Floor.tiles.window]);\n    const tileAO = (x, y, s = 0.2) => (\n      testType(x, y, [Floor.tiles.wall, Floor.tiles.window]) ? s : 0\n    );\n    const windowAO = (x, y, s = 0.2) => (\n      testType(x, y, [Floor.tiles.wall]) ? s : 0\n    );\n    const pushTile = (x, y, color) => (\n      pushBox(x, y, color, 0.1, testTileNeighbor, [\n        1 - Math.min(tileAO(x, y + 1) + tileAO(x - 1, y) + tileAO(x - 1, y + 1, 0.1), 0.4),\n        1 - Math.min(tileAO(x, y + 1) + tileAO(x + 1, y) + tileAO(x + 1, y + 1, 0.1), 0.4),\n        1 - Math.min(tileAO(x, y - 1) + tileAO(x + 1, y) + tileAO(x + 1, y - 1, 0.1), 0.4),\n        1 - Math.min(tileAO(x, y - 1) + tileAO(x - 1, y) + tileAO(x - 1, y - 1, 0.1), 0.4),\n      ])\n    );\n    const pushWall = (x, y, color) => (\n      pushBox(x, y, color, Floor.height, testWallNeighbor, [1, 1, 1, 1])\n    );\n    const pushWindow = (x, y, color) => {\n      pushBox(x, y, color, Floor.height * (1 / 3), testWindowNeighbor, [\n        1 - Math.min(windowAO(x, y + 1) + windowAO(x - 1, y) + windowAO(x - 1, y + 1, 0.1), 0.4),\n        1 - Math.min(windowAO(x, y + 1) + windowAO(x + 1, y) + windowAO(x + 1, y + 1, 0.1), 0.4),\n        1 - Math.min(windowAO(x, y - 1) + windowAO(x + 1, y) + windowAO(x + 1, y - 1, 0.1), 0.4),\n        1 - Math.min(windowAO(x, y - 1) + windowAO(x - 1, y) + windowAO(x - 1, y - 1, 0.1), 0.4),\n      ]);\n      pushBox(\n        x,\n        y,\n        color,\n        Floor.height * (1 / 3),\n        testWindowNeighbor,\n        [1, 1, 1, 1],\n        Floor.height * (1 / 3) * 2\n      );\n    };\n    for (\n      let y = cy * Floor.chunkSize.height;\n      y < Math.min((cy + 1) * Floor.chunkSize.height, grid.height);\n      y += 1\n    ) {\n      for (\n        let x = cx * Floor.chunkSize.width;\n        x < Math.min((cx + 1) * Floor.chunkSize.width, grid.width);\n        x += 1\n      ) {\n        const tile = grid.getNodeAt(x, y);\n        if (tile.type !== Floor.tiles.air) {\n          switch (tile.type) {\n            case Floor.tiles.wall:\n              pushWall(x, y, tile.color);\n              break;\n            case Floor.tiles.window:\n              pushWindow(x, y, tile.color);\n              break;\n            default:\n              pushTile(x, y, tile.color);\n              break;\n          }\n        }\n      }\n    }\n    const mesh = chunks[cy][cx];\n    const { geometry } = mesh;\n    const index = geometry.getIndex();\n    const position = geometry.getAttribute('position');\n    const color = geometry.getAttribute('color');\n    const normal = geometry.getAttribute('normal');\n    index.setArray(new Uint16Array(indices));\n    index.needsUpdate = true;\n    position.setArray(new Float32Array(vertices));\n    position.needsUpdate = true;\n    color.setArray(new Float32Array(colors));\n    color.needsUpdate = true;\n    normal.setArray(new Float32Array(normals));\n    normal.needsUpdate = true;\n    geometry.computeBoundingSphere();\n    mesh.visible = !!position.count;\n  }\n}\n\nFloor.height = 3;\n\nFloor.tiles = {\n  air: 0,\n  tile: 1,\n  wall: 2,\n  window: 3,\n};\n\nFloor.defaultGridSize = {\n  width: 48,\n  height: 48,\n};\n\nFloor.chunkSize = {\n  width: 16,\n  height: 16,\n};\n\nexport default Floor;\n","import {\n  Object3D,\n} from 'three';\nimport Floor from './floor';\n\nclass Building extends Object3D {\n  constructor(meta = {}) {\n    super();\n    this.floors = meta.floors ? (\n      meta.floors.map((grid, number) => new Floor({ grid, number }))\n    ) : [new Floor()];\n    this.floors.forEach(floor => this.add(floor));\n    this.activeFloor = 0;\n    this.computeHeightmap();\n  }\n\n  computeHeightmap() {\n    const { floors } = this;\n    const heightmap = [];\n    floors.forEach(({ grid: { nodes: row } }, floor) => (\n      row.forEach(nodes => (\n        nodes.forEach(({ x, y, type }) => {\n          if (!heightmap[y]) heightmap[y] = [];\n          let height;\n          switch (type) {\n            case Floor.tiles.tile:\n              height = (floor * 3) + 0.1;\n              break;\n            case Floor.tiles.wall:\n            case Floor.tiles.window:\n              height = (floor + 1) * 3;\n              break;\n            default:\n              height = 0;\n              break;\n          }\n          heightmap[y][x] = Math.max(heightmap[y][x] || 0, height);\n        })\n      ))\n    ));\n    this.heightmap = heightmap;\n  }\n\n  getHeight(x, y) {\n    const { heightmap } = this;\n    x = Math.floor(x);\n    y = Math.floor(y);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || y < 0\n      || y > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[y][x];\n  }\n\n  export() {\n    const { floors } = this;\n    return {\n      floors: floors.map(({ grid: { nodes: row } }) => (\n        row.map(nodes => (\n          nodes.map(({ type, color }) => [\n            type & 0xFF,\n            Math.floor(color.r * 0xFF) & 0xFF,\n            Math.floor(color.g * 0xFF) & 0xFF,\n            Math.floor(color.b * 0xFF) & 0xFF,\n          ])\n        ))\n      )),\n    };\n  }\n\n  addFloor() {\n    const { floors, activeFloor } = this;\n    const floor = new Floor({ number: activeFloor + 1 });\n    floors.splice(activeFloor + 1, 0, floor);\n    this.add(floor);\n  }\n\n  removeFloor() {\n    const { floors, activeFloor } = this;\n    const [floor] = floors.splice(activeFloor, 1);\n    this.remove(floor);\n    if (!floors.length) this.addFloor();\n    if (!floors[activeFloor]) {\n      this._activeFloor = this._activeFloor - 1;\n    }\n    floors[this._activeFloor].setNumber(this._activeFloor);\n  }\n\n  get activeFloor() {\n    return this._activeFloor;\n  }\n\n  set activeFloor(floor) {\n    const { floors } = this;\n    if (this._activeFloor !== undefined) {\n      floors[this._activeFloor].isActive = false;\n    }\n    floors[floor].isActive = true;\n    this._activeFloor = floor;\n  }\n}\n\nexport default Building;\n","class UI {\n  constructor(className) {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = className;\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default UI;\n","import UI from '@/core/ui';\n\nclass EditorUI extends UI {\n  constructor({\n    floorCount,\n    onAddFloor,\n    onRemoveFloor,\n    onSave,\n    onSetFloor,\n  }) {\n    super('toolbar');\n    this.onKeyup = this.onKeyup.bind(this);\n    this.onSetFloor = onSetFloor;\n    // Color\n    const color = this.add('label');\n    color.innerText = 'Color';\n    this.colorInput = this.add('input');\n    this.colorInput.type = 'color';\n    this.colorInput.addEventListener('change', ({ target: { value: color } }) => {\n      this.setColor(color);\n    }, false);\n    this.setColor('#aaaaaa');\n    const pick = this.add('button');\n    pick.innerText = 'Pick';\n    pick.addEventListener('click', () => {\n      const { tool, modifier } = this.tool;\n      this.setTool('pick', tool === 'paint' ? modifier : 1);\n    }, false);\n    this.pickButton = pick;\n    // Tiles\n    const tiles = this.add('label');\n    tiles.innerText = 'Tiles';\n    this.tiles = [\n      'Air',\n      'Tile',\n      'Wall',\n      'Window',\n    ].map((label, tile) => {\n      const button = this.add('button');\n      button.innerText = label;\n      button.addEventListener('click', () => {\n        this.setTool('paint', tile);\n      }, false);\n      return button;\n    });\n    this.setTool('paint', 1);\n    // Floors\n    const floors = this.add('label');\n    floors.innerText = 'Floors';\n    this.floorInput = this.add('input');\n    this.floorInput.type = 'number';\n    this.floorInput.addEventListener('change', ({ target: { value: floor } }) => {\n      this.setFloor(parseInt(floor, 10));\n    }, false);\n    this.floorInput.min = 0;\n    this.floorInput.step = 1;\n    this.setFloorCount(floorCount);\n    this.setFloor(0);\n    {\n      const add = this.add('button');\n      add.innerText = '+';\n      add.addEventListener('click', onAddFloor, false);\n      const remove = this.add('button');\n      remove.innerText = '×';\n      remove.addEventListener('click', onRemoveFloor, false);\n      const wrapper = this.add('div');\n      wrapper.appendChild(add);\n      wrapper.appendChild(remove);\n    }\n    // Save\n    const save = this.add('button');\n    save.className = 'save';\n    save.innerText = 'Save';\n    save.addEventListener('click', onSave, false);\n    this.saveButton = save;\n    this.mount();\n  }\n\n  mount() {\n    super.mount();\n    window.addEventListener('keyup', this.onKeyup, false);\n  }\n\n  unmount() {\n    super.unmount();\n    window.removeEventListener('keyup', this.onKeyup);\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    if (repeat) {\n      return;\n    }\n    if (keyCode >= 49 && keyCode <= 57) {\n      this.setTool('paint', keyCode - 49);\n    }\n  }\n\n  setColor(value) {\n    const { colorInput } = this;\n    colorInput.value = value;\n    this.color = value;\n  }\n\n  setFloorCount(count) {\n    const { floorInput } = this;\n    floorInput.max = count - 1;\n    this.floorCount = count;\n  }\n\n  setFloor(value) {\n    const { floorInput } = this;\n    floorInput.value = value;\n    this.floor = value;\n    this.onSetFloor(value);\n  }\n\n  setModified(value) {\n    const { saveButton } = this;\n    saveButton.className = `save${value ? ' modified' : ''}`;\n  }\n\n  setTool(tool, modifier) {\n    const { pickButton, tiles } = this;\n    this.tool = { tool, modifier };\n    tiles.forEach((button) => { button.className = ''; });\n    pickButton.className = '';\n    switch (tool) {\n      case 'paint':\n        tiles[modifier].className = 'active';\n        break;\n      case 'pick':\n        pickButton.className = 'active';\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport default EditorUI;\n","class History {\n  constructor() {\n    this.past = [];\n    this.future = [];\n  }\n\n  empty() {\n    const { past, future } = this;\n    past.length = 0;\n    future.length = 0;\n  }\n\n  undo() {\n    const { past, future } = this;\n    const prev = past.pop();\n    if (!prev) {\n      return;\n    }\n    prev.undo();\n    future.unshift(prev);\n  }\n\n  redo() {\n    const { past, future } = this;\n    const next = future.shift();\n    if (!next) {\n      return;\n    }\n    next.redo();\n    past.push(next);\n  }\n\n  push({ undo, redo }) {\n    const { past, future } = this;\n    past.push({ undo, redo });\n    future.length = 0;\n  }\n}\n\nexport default History;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Object3D,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Object3D {\n  constructor() {\n    super();\n    {\n      const position = new Float32Array(Rain.numDrops * 3);\n      const geometry = new BufferGeometry();\n      geometry.addAttribute('position', (new BufferAttribute(position, 3).setDynamic(true)));\n      const ripples = new Points(\n        geometry,\n        new PointsMaterial({\n          color: 0xAAAADD,\n          fog: true,\n          size: 0.01,\n          sizeAttenuation: true,\n          transparent: true,\n          opacity: 1 / 3,\n        })\n      );\n      ripples.frustumCulled = false;\n      ripples.offsets = position;\n      this.add(ripples);\n      this.ripples = ripples;\n    }\n    {\n      const drop = (new BufferGeometry()).fromGeometry(\n        (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n      ).attributes.position.array;\n      const offsets = new Float32Array(Rain.numDrops * 3);\n      const geometry = new InstancedBufferGeometry();\n      geometry.addAttribute('position', new BufferAttribute(drop, 3));\n      geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n      const drops = new Mesh(\n        geometry,\n        new RainMaterial({\n          color: 0xAAAADD,\n        })\n      );\n      drops.frustumCulled = false;\n      drops.drop = new Vector3();\n      drops.offsets = offsets;\n      this.add(drops);\n      this.drops = drops;\n      for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n        this.resetDrop(i);\n        this.ripples.offsets[i] = 0;\n        this.ripples.offsets[i + 1] = -999;\n        this.ripples.offsets[i + 2] = 0;\n      }\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { drops, position, ripples } = this;\n    const { offsets } = drops;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        offsets[i + 1] = height;\n        this.resetDrop(i);\n      }\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drops, position, ripples } = this;\n    const { drop, offsets } = drops;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    ripples.offsets[i] = offsets[i];\n    ripples.offsets[i + 1] = offsets[i + 1] + 0.01;\n    ripples.offsets[i + 2] = offsets[i + 2];\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { drops, ripples } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xBEBEBE,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Building from '@/meshes/building';\nimport EditorUI from '@/ui/editor';\nimport History from '@/core/history';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn building\n  const stored = localStorage.getItem('SpY::EditorTestLevel');\n  const building = new Building(\n    stored ? JSON.parse(stored) : {}\n  );\n  scene.root.add(building);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.position.z = building.heightmap.length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Setup camera\n  scene.camera.distance = 10;\n  scene.camera.updateOrbit();\n  const { width, height } = building.floors[building.activeFloor].grid;\n  scene.camera.root.position.set(\n    width * 0.5 + 0.5,\n    0,\n    height * 0.5 + 0.5\n  );\n  scene.camera.maxDistance = 32;\n\n  // History\n  const history = new History();\n  window.addEventListener('keydown', (e) => {\n    const {\n      ctrlKey,\n      keyCode,\n      shiftKey,\n      target,\n    } = e;\n    if (\n      !ctrlKey\n      || keyCode !== 90\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    if (shiftKey) history.redo();\n    else history.undo();\n  });\n\n  // UI\n  const ui = new EditorUI({\n    floorCount: building.floors.length,\n    onAddFloor() {\n      building.addFloor();\n      ui.setFloorCount(building.floors.length);\n      ui.setFloor(building.activeFloor + 1);\n    },\n    onRemoveFloor() {\n      // eslint-disable-next-line no-alert\n      if (!window.confirm('Remove the current floor?')) {\n        return;\n      }\n      building.removeFloor();\n      ui.setFloorCount(building.floors.length);\n      ui.setFloor(building.activeFloor);\n      history.empty();\n    },\n    onSave() {\n      const meta = building.export();\n      localStorage.setItem('SpY::EditorTestLevel', JSON.stringify(meta));\n      ui.setModified(false);\n    },\n    onSetFloor(floor) {\n      building.activeFloor = floor;\n      const { height } = building.floors[building.activeFloor].constructor;\n      scene.camera.root.position.y = height * floor;\n      scene.camera.minHeight = floor > 0 ? -Infinity : 0.1;\n    },\n  });\n\n  const lastTile = { x: -1, y: -1 };\n  scene.onAnimationTick = ({ delta }) => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    camera.processKeyboard({ ...input.keyboard, delta });\n    if (!pointer.primary) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    const floor = building.floors[building.activeFloor];\n    const hit = raycaster.intersectObjects([floor.intersect, floor.tiles])[0];\n    if (!hit) {\n      return;\n    }\n    hit.point.addScaledVector(hit.face.normal, -0.5);\n    const { color, tool: { tool, modifier } } = ui;\n    const x = Math.floor(hit.point.x);\n    const y = Math.floor(hit.point.z);\n    if (\n      pointer.primaryDown || x !== lastTile.x || y !== lastTile.y\n    ) {\n      lastTile.x = x;\n      lastTile.y = y;\n      const current = floor.grid.getNodeAt(x, y);\n      const currentType = current.type;\n      const currentColor = `#${current.color.getHexString()}`;\n      switch (tool) {\n        case 'paint': {\n          const action = {\n            undo() {\n              floor.setTile({\n                type: currentType,\n                color: currentColor,\n                x,\n                y,\n              });\n              building.computeHeightmap();\n              ui.setModified(true);\n            },\n            redo() {\n              floor.setTile({\n                type: modifier,\n                color,\n                x,\n                y,\n              });\n              building.computeHeightmap();\n              ui.setModified(true);\n            },\n          };\n          action.redo();\n          history.push(action);\n          break;\n        }\n        case 'pick':\n          ui.setColor(currentColor);\n          ui.setTool('paint', modifier);\n          break;\n        default:\n          break;\n      }\n    }\n  };\n};\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass ThiccBoi extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: ThiccBoi.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: ThiccBoi.geometry(palette),\n      material: ThiccBoi.material,\n    });\n  }\n}\n\nThiccBoi.bones = {\n  hip: new Vector3(0, 0.4, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.325, 0.45, 0),\n  rightArm: new Vector3(0.325, 0.45, 0),\n  leftLeg: new Vector3(-0.08, 0.1, 0),\n  rightLeg: new Vector3(0.08, 0.1, 0),\n};\n\nThiccBoi.geometry = (palette) => {\n  // const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  const torso = new SphereGeometry(0.26, 8, 8);\n  torso.translate(0, 0.25, 0);\n  torso.scale(1.5, 1, 1.5);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new CylinderGeometry(0.175, 0.15, 0.4, 6);\n  // const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.03, 0.075, 0.3, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.15, 0);\n  rightArm.translate(0, -0.15, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.1, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nThiccBoi.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default ThiccBoi;\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/meshes/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += (animation.delta * 0.5) / Math.abs(route.travel);\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshLambertMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Road extends Mesh {\n  constructor() {\n    const geometry = new Geometry();\n    const track = new PlaneGeometry(512, 4);\n    track.rotateX(Math.PI * -0.5);\n    track.faces.forEach((face) => {\n      face.color.set(0x222233);\n      face.materialIndex = 0;\n    });\n    const markings = new PlaneGeometry(1, 0.2);\n    markings.rotateX(Math.PI * -0.5);\n    markings.faces.forEach((face) => {\n      face.color.set(0xBEBEBE);\n      face.materialIndex = 0;\n    });\n    for (let x = -128; x < 128; x += 5) {\n      geometry.merge(\n        markings.clone().translate(x, 0.001, 0)\n      );\n    }\n    geometry.merge(track);\n    geometry.translate(0, 0, 4);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshLambertMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Road;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.floor(Math.min(Math.max(point.x, 0), grid.width - 1));\n    point.z = Math.floor(Math.min(Math.max(point.z, 0), grid.height - 1));\n    return point;\n  }\n}\n\nexport default Walkable;\n","import {\n  Vector3,\n} from 'three';\n\nclass AI {\n  constructor(building) {\n    this.building = building;\n    this.actors = [];\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    const { actors } = this;\n    actors.push({\n      actor,\n      floor,\n      position,\n      lastThought: 0,\n      state: AI.states.IDLE,\n    });\n  }\n\n  onAnimationTick({ time }) {\n    const { actors, building } = this;\n    actors.forEach((actor) => {\n      const {\n        floor,\n        position,\n        lastThought,\n        state,\n      } = actor;\n      if (state === AI.states.IDLE) {\n        if (time - lastThought > 3) {\n          actor.lastThought = time;\n          if (Math.random() > 0.75) {\n            actor.state = AI.states.WALKING;\n          }\n        }\n        switch (actor.state) {\n          case AI.states.WALKING: {\n            const { walkable } = building.floors[floor];\n            const { finder, grid } = walkable;\n            let destination;\n            let path;\n            grid.setWalkableAt(position.x, position.z, true);\n            do {\n              destination = {\n                x: Math.floor(Math.random() * grid.width),\n                z: Math.floor(Math.random() * grid.height),\n              };\n              path = finder.findPath(\n                position.x, position.z,\n                destination.x, destination.z,\n                grid.clone()\n              )\n                .map(([x, z]) => (\n                  walkable.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n                ));\n            } while (\n              path.length < 2\n            );\n            grid.setWalkableAt(destination.x, destination.z, false);\n            actor.actor.walk(path.slice(1), () => {\n              position.x = destination.x;\n              position.z = destination.z;\n              actor.lastThought = time;\n              actor.state = AI.states.IDLE;\n            });\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n\nAI.states = {\n  IDLE: 0,\n  WALKING: 1,\n};\n\nexport default AI;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Road from './road';\nimport Wall from './wall';\nimport Walkable from './walkable';\nimport AI from './ai';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.ai = new AI(this);\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n    this.road = new Road();\n    this.add(this.road);\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    this.addToGrid({ floor, mesh: actor, position });\n    this.ai.addActor({ actor, floor, position });\n  }\n\n  addToGrid({\n    floor,\n    mesh,\n    position,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(position.x, position.z, false);\n    mesh.position.set(position.x + 0.5, 0, position.z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { ai, children } = this;\n    ai.onAnimationTick(animation);\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","import UI from '@/core/ui';\n\nclass ElevatorUI extends UI {\n  constructor() {\n    super('dialog');\n  }\n\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport Building from '@/meshes/legacy_building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/meshes/marker';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 4,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 4,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.minHeight = 0.1;\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const actors = [Dude, ThiccBoi, ThiccBoi];\n  const dudes = [...Array(building.floors.length * actors.length)].map(() => {\n    const Actor = actors[Math.floor(Math.random() * actors.length)];\n    const dude = new Actor({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * building.floors.length);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * (grid.height - 1)),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addActor({\n      floor,\n      actor: dude,\n      position: spawn,\n    });\n    dude.position.y += 0.001;\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const from = player.position.clone();\n        const to = dude.position.clone();\n        to.z += 1;\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    elevator.removePassenger(player);\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const from = player.position.clone();\n          const to = point.clone();\n          const path = walkable.getPath(from, to);\n          if (path.length) {\n            walkable.grid.setWalkableAt(from.x, from.z, true);\n            if (path.length > 1) {\n              player.walk(path.slice(1), onDestination);\n            } else {\n              onDestination();\n            }\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const from = player.position.clone();\n        const to = point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const from = player.position.clone();\n        const to = hit.point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n          });\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as editor } from './editor';\nexport { default as game } from './game';\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxDistance = 16;\n    this.minHeight = -Infinity;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.forward = new Vector3();\n    this.right = new Vector3();\n    this.worldUp = new Vector3(0, 1, 0);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processPointer({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      const { maxDistance } = this;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), maxDistance);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  processKeyboard({\n    backwards,\n    delta,\n    forwards,\n    leftwards,\n    rightwards,\n  }) {\n    const {\n      forward,\n      right,\n      tilt,\n      pitch,\n      root: { position },\n      worldUp,\n    } = this;\n    const step = delta * 4;\n    forward.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      0,\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize().negate();\n    right.crossVectors(forward, worldUp);\n    if (forwards) {\n      position.addScaledVector(forward, step);\n    }\n    if (backwards) {\n      position.addScaledVector(forward, -step);\n    }\n    if (leftwards) {\n      position.addScaledVector(right, -step);\n    }\n    if (rightwards) {\n      position.addScaledVector(right, step);\n    }\n  }\n\n  updateOrbit() {\n    const {\n      minHeight,\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, minHeight), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.001);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from '@/meshes/grid';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x666666));\n    const light = new DirectionalLight(0xffffff, 0.3);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.2);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.lambert.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n        'varying float vOrientation;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n        'vOrientation = normal.y != 0.0 ? 1.0 : (normal.x != 0.0 ? 2.0 : 0.0);',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.lambert.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'varying float vOrientation;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = (vOrientation > 1.5 ? vPosition.zy : (vOrientation > 0.5 ? vPosition.xz : vPosition.xy)) * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.lambert.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/core/input';\nimport Music from '@/core/music';\nimport Scene from '@/core/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst splash = document.getElementById('splash');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    splash.style.display = 'none';\n    input.isEnabled = true;\n    if (__PRODUCTION__) music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n\nif (window.process && window.process.type) {\n  // We're running inside electron.\n  // Allow the user to exit with the ESC key.\n  window.addEventListener('keydown', ({ keyCode, repeat }) => {\n    if (keyCode === 27 && !repeat) {\n      if (splash.style.display !== 'none') {\n        window.close();\n      } else {\n        splash.style.display = '';\n        input.isEnabled = false;\n        input.touches.once('end', () => {\n          splash.style.display = 'none';\n          input.isEnabled = true;\n        });\n      }\n    }\n  }, false);\n}\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}