{"version":3,"sources":["webpack:///./src/core/music.js","webpack:///./src/core/input.js","webpack:///./src/meshes/bubble.js","webpack:///./src/core/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/meshes/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/meshes/building/floor.js","webpack:///./src/meshes/building/index.js","webpack:///./src/core/ui.js","webpack:///./src/ui/editor.js","webpack:///./src/core/history.js","webpack:///./src/meshes/moon.js","webpack:///./src/meshes/starfield.js","webpack:///./src/scenes/editor.js","webpack:///./src/actors/thiccboi.js","webpack:///./src/meshes/legacy_building/elevator/cabin.js","webpack:///./src/meshes/button.js","webpack:///./src/meshes/legacy_building/elevator/doors.js","webpack:///./src/meshes/legacy_building/elevator/shaft.js","webpack:///./src/meshes/legacy_building/elevator/index.js","webpack:///./src/meshes/legacy_building/wall.js","webpack:///./src/meshes/legacy_building/hallway.js","webpack:///./src/meshes/legacy_building/road.js","webpack:///./src/meshes/legacy_building/walkable.js","webpack:///./src/meshes/legacy_building/ai.js","webpack:///./src/meshes/legacy_building/index.js","webpack:///./src/ui/elevator.js","webpack:///./src/materials/rain.js","webpack:///./src/meshes/rain.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/core/camera.js","webpack:///./src/meshes/grid.js","webpack:///./src/core/vignette.js","webpack:///./src/core/scene.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/materials/sprite.js"],"names":["Music","_ref","_this","this","toggle","_classCallCheck","script","document","createElement","async","defer","src","body","appendChild","check","window","SC","api","initialize","client_id","tracks","shuffle","track","addEventListener","wantsToPlay","play","setTimeout","index","length","random","Math","floor","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","_ref$mount","mount","keyboard","backwards","forwards","leftwards","rightwards","pointer","current","Vector2","movement","x","y","normalized","last","wheel","touches","Touches","preventSimulated","target","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","onBlur","e","preventDefault","onKeydown","onKeyup","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","keyCode","_ref2","repeat","indexOf","tagName","_ref3","isEnabled","secondary","primary","_ref4","_ref6","_slicedToArray","_ref5","rect","top","left","i","_touches$i","clientX","clientY","width","height","copy","_ref7","deltaY","_ref8","getBoundingClientRect","Bubble","_possibleConstructorReturn","_getPrototypeOf","call","SpriteMaterial","depthTest","scale","set","visible","Sprite","lines","delay","arguments","undefined","_this$material","material","renderer","ctx","clearRect","fillStyle","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","map","needsUpdate","clearTimeout","timer","display","Actor","bonesOrigin","collisionGeometry","geometry","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","add","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","Object","keys","forEach","bone","skeleton","bones","Bones","position","mixer","AnimationMixer","actor_assertThisInitialized","actions","animations","reduce","action","_defineProperty","clipAction","animation","idle","timeScale","rotationAux","movementAux","Vector3","collisionMesh","Mesh","MeshBasicMaterial","opacity","transparent","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","merge","vertices","a","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","computeVertexNormals","computeBoundingSphere","delta","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","min","max","abs","waypoint","path","distance","distanceTo","step","sub","normalize","multiplyScalar","faceTo","setAnimation","fadeOut","reset","fadeIn","point","angle","z","PI","bubble","boundingSphere","radius","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","QuaternionKeyframeTrack","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","dude_possibleConstructorReturn","dude_getPrototypeOf","CylinderBufferGeometry","translate","CylinderGeometry","color","SphereGeometry","hat","leftEye","eyes","rightEye","clone","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","rotateX","marker_possibleConstructorReturn","marker_getPrototypeOf","time","inc","sin","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","root","onAnimationTick","camera","grid","getPointerFrame","processPointer","hit","getRaycaster","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","pitch","updateOrbit","Floor","number","floor_classCallCheck","floor_possibleConstructorReturn","floor_getPrototypeOf","_Floor$defaultGridSiz","defaultGridSize","Grid","setTile","type","tile","nodes","walkable","tiles","air","Color","plane","PlaneBufferGeometry","intersect","setIndex","BufferAttribute","Uint16Array","addAttribute","GridMaterial","updateTiles","isActive","Object3D","avg","r","g","offsetHSL","indices","colors","normals","pushFace","n","offset","apply","floor_toConsumableArray","pushBox","testNeighbor","topAO","testType","getNodeAt","isTile","isWall","wall","wallAO","getIndex","getAttribute","normal","setArray","_isActive","active","array","Building","meta","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","floors","activeFloor","splice","_activeFloor","UI","ui_classCallCheck","wrapper","content","removeChild","tag","node","firstChild","EditorUI","floorCount","onAddFloor","onRemoveFloor","onSetFloor","editor_classCallCheck","editor_getPrototypeOf","editor_assertThisInitialized","innerText","colorInput","value","setColor","label","floorInput","setFloor","setFloorCount","remove","_get","prototype","removeEventListener","count","History","history_classCallCheck","past","future","prev","pop","undo","unshift","redo","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","fog","Starfield","starfield_classCallCheck","size","aux","o","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","scenes_editor","starfield","building","tilt","_building$floors$buil","history","ctrlKey","shiftKey","stopPropagation","ui","addFloor","constructor","lastTile","processKeyboard","editor_objectSpread","raycaster","intersectObjects","addScaledVector","currentType","currentColor","getHexString","ThiccBoi","thiccboi_classCallCheck","thiccboi_possibleConstructorReturn","thiccboi_getPrototypeOf","Cabin","cabin_classCallCheck","BoxGeometry","setHSL","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","origin","ret","tapping","ThreeMath","smoothstep","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","MOVING","OPEN","close","open","children","animationStep","Shaft","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","findIndex","p","travel","to","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","ceil","wall_toConsumableArray","j","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","Road","road_classCallCheck","markings","road_possibleConstructorReturn","road_getPrototypeOf","MeshLambertMaterial","Walkable","walkable_classCallCheck","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","AI","ai_classCallCheck","actors","actor","lastThought","IDLE","WALKING","destination","setWalkableAt","ai_slicedToArray","slice","elevators","legacy_building_classCallCheck","legacy_building_getPrototypeOf","ai","legacy_building_assertThisInitialized","layout","split","heightmap","legacy_building_toConsumableArray","buttons","meshes","rooms","room","mesh","elevatorIndex","road","addToGrid","addActor","child","ElevatorUI","ui_elevator_classCallCheck","ui_elevator_possibleConstructorReturn","ui_elevator_getPrototypeOf","onFloor","onExit","empty","unmount","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","replace","join","rain_possibleConstructorReturn","rain_getPrototypeOf","rain_objectSpread","name","uniforms","UniformsUtils","fragmentShader","diffuse","ShaderMaterial","Rain","meshes_rain_classCallCheck","meshes_rain_possibleConstructorReturn","meshes_rain_getPrototypeOf","numDrops","setDynamic","ripples","frustumCulled","offsets","drop","attributes","InstancedBufferGeometry","InstancedBufferAttribute","drops","resetDrop","testHeight","func","game","rain","reverse","maxHeight","testMeshes","game_toConsumableArray","setHeightTest","getHeight","spawn","isWalkableAt","elevatorUI","_building$floors$floo","object","parent","onDestination","say","getPath","elevatorFloor","show","addPassenger","removePassenger","tap","__webpack_require__","d","__webpack_exports__","Camera","Infinity","speed","Raycaster","_assertThisInitialized","forward","right","worldUp","PerspectiveCamera","setFromCamera","far","hasUpdated","cos","negate","crossVectors","ray","direction","lookAt","_ref$background","background","_ref$size","_ref$subdivisions","subdivisions","grid_classCallCheck","grid_possibleConstructorReturn","grid_getPrototypeOf","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","OrthographicCamera","sprite","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Scene","grd","createRadialGradient","addColorStop","beginPath","fill","clearDepth","render","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","vignette","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","getDelta","oldTime","clear","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","lambert","primaryGrid","secondaryGrid","extensions","derivatives","lights","setImmediate","fonts","loaded","_core_input__WEBPACK_IMPORTED_MODULE_0__","_core_music__WEBPACK_IMPORTED_MODULE_1__","_core_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","splash","music","location","hash","Scenes","reload","test","fontTester","style","fontFamily","initialWidth","once","process","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.1da25fce00f16638819a.js","sourcesContent":["class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.keyboard = {\n      backwards: false,\n      forwards: false,\n      leftwards: false,\n      rightwards: false,\n    };\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('blur', this.onBlur.bind(this), false);\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('keydown', this.onKeydown.bind(this), false);\n    window.addEventListener('keyup', this.onKeyup.bind(this), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onBlur() {\n    const { keyboard } = this;\n    keyboard.forwards = false;\n    keyboard.backwards = false;\n    keyboard.leftwards = false;\n    keyboard.rightwards = false;\n  }\n\n  onKeydown({ keyCode, repeat, target }) {\n    const { keyboard } = this;\n    if (\n      repeat\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = true;\n        break;\n      case 83:\n        keyboard.backwards = true;\n        break;\n      case 65:\n        keyboard.leftwards = true;\n        break;\n      case 68:\n        keyboard.rightwards = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    const { keyboard } = this;\n    if (repeat) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = false;\n        break;\n      case 83:\n        keyboard.backwards = false;\n        break;\n      case 65:\n        keyboard.leftwards = false;\n        break;\n      case 68:\n        keyboard.rightwards = false;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled || e.target.tagName !== 'CANVAS') return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/meshes/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    bonesOrigin,\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    Object.keys(bonesOrigin).forEach((bone) => {\n      this.skeleton.bones[Actor.Bones[bone]].position.copy(bonesOrigin[bone]);\n    });\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: Dude.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 24);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/meshes/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processPointer(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import { Grid } from 'pathfinding';\nimport {\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneBufferGeometry,\n  VertexColors,\n  Object3D,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Floor extends Object3D {\n  constructor({ grid, number } = { number: 0 }) {\n    super();\n    this.number = number;\n    this.position.set(0, Floor.height * number, 0);\n    const { width, height } = Floor.defaultGridSize;\n    this.grid = new Grid(width, height);\n    this.grid.setTile = function setTile({\n      color,\n      type,\n      x,\n      y,\n    }) {\n      const tile = this.nodes[y][x];\n      tile.color = color;\n      tile.type = type;\n      tile.walkable = type !== Floor.tiles.tile;\n    };\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        if (grid) {\n          // TODO !!!\n          console.error('Slow down! Grid loading is not yet implemented!!');\n        } else {\n          this.grid.setTile({\n            x,\n            y,\n            type: Floor.tiles.air,\n            color: new Color(),\n          });\n        }\n      }\n    }\n    const plane = new PlaneBufferGeometry(width, height, 2, 2);\n    plane.rotateX(Math.PI * -0.5);\n    plane.translate(width * 0.5, 0, height * 0.5);\n    this.intersect = new Mesh(\n      plane,\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.add(this.intersect);\n    const tile = new BufferGeometry();\n    tile.setIndex(new BufferAttribute(new Uint16Array(), 1));\n    tile.addAttribute('position', new BufferAttribute(new Float32Array(), 3));\n    tile.addAttribute('color', new BufferAttribute(new Float32Array(), 3));\n    tile.addAttribute('normal', new BufferAttribute(new Float32Array(), 3));\n    this.tiles = new Mesh(\n      tile,\n      new GridMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n    this.updateTiles();\n    this.add(this.tiles);\n    this.isActive = false;\n  }\n\n  setTile({\n    color,\n    type,\n    x,\n    y,\n  }) {\n    const { grid } = this;\n    if (\n      x < 0\n      || x > grid.width - 1\n      || y < 0\n      || y > grid.height - 1\n    ) {\n      return;\n    }\n    color = new Color(color);\n    const avg = (color.r + color.g + color.b) / 3 * 0.1;\n    color.offsetHSL(\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg\n    );\n    grid.setTile({\n      color,\n      type,\n      x,\n      y,\n    });\n    this.updateTiles();\n  }\n\n  get isActive() {\n    return this._isActive;\n  }\n\n  set isActive(active) {\n    const { intersect, tiles } = this;\n    intersect.visible = active;\n    tiles.visible = !!tiles.geometry.getAttribute('position').array.length;\n    this._isActive = active;\n  }\n\n  updateTiles() {\n    const { grid, number, tiles } = this;\n    const indices = [];\n    const vertices = [];\n    const colors = [];\n    const normals = [];\n    const pushFace = (v, c, n) => {\n      const offset = vertices.length / 3;\n      vertices.push(...v);\n      colors.push(...c);\n      normals.push(...n);\n      indices.push(\n        offset, offset + 1, offset + 2,\n        offset + 2, offset + 3, offset\n      );\n    };\n    const pushBox = (x, y, { r, g, b }, height, testNeighbor, topAO) => {\n      if (!testNeighbor(x, y + 1)) {\n        pushFace(\n          [\n            x, 0, y + 1,\n            x + 1, 0, y + 1,\n            x + 1, height, y + 1,\n            x, height, y + 1,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n          ]\n        );\n      }\n      if (!testNeighbor(x, y - 1)) {\n        pushFace(\n          [\n            x + 1, 0, y,\n            x, 0, y,\n            x, height, y,\n            x + 1, height, y,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n          ]\n        );\n      }\n      if (!testNeighbor(x - 1, y)) {\n        pushFace(\n          [\n            x, 0, y,\n            x, 0, y + 1,\n            x, height, y + 1,\n            x, height, y,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n          ]\n        );\n      }\n      if (!testNeighbor(x + 1, y)) {\n        pushFace(\n          [\n            x + 1, 0, y + 1,\n            x + 1, 0, y,\n            x + 1, height, y,\n            x + 1, height, y + 1,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n          ]\n        );\n      }\n      if (number > 0) {\n        pushFace(\n          [\n            x, 0.001, y,\n            x + 1, 0.001, y,\n            x + 1, 0.001, y + 1,\n            x, 0.001, y + 1,\n          ],\n          [\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n          ],\n          [\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n          ]\n        );\n      }\n      pushFace(\n        [\n          x, height, y + 1,\n          x + 1, height, y + 1,\n          x + 1, height, y,\n          x, height, y,\n        ],\n        [\n          r * topAO[0], g * topAO[0], b * topAO[0],\n          r * topAO[1], g * topAO[1], b * topAO[1],\n          r * topAO[2], g * topAO[2], b * topAO[2],\n          r * topAO[3], g * topAO[3], b * topAO[3],\n        ],\n        [\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n        ]\n      );\n    };\n    const testType = (x, y, type) => {\n      if (x < 0 || x > grid.width - 1 || y < 0 || y > grid.height - 1) {\n        return false;\n      }\n      return grid.getNodeAt(x, y).type === type;\n    };\n    const isTile = (x, y) => testType(x, y, Floor.tiles.tile);\n    const isWall = (x, y) => testType(x, y, Floor.tiles.wall);\n    const wallAO = (x, y, s = 0.2) => (isWall(x, y) ? s : 0);\n    const pushTile = (x, y, color) => (\n      pushBox(x, y, color, 0.1, isTile, [\n        1 - Math.min(wallAO(x, y + 1) + wallAO(x - 1, y) + wallAO(x - 1, y + 1, 0.1), 0.4),\n        1 - Math.min(wallAO(x, y + 1) + wallAO(x + 1, y) + wallAO(x + 1, y + 1, 0.1), 0.4),\n        1 - Math.min(wallAO(x, y - 1) + wallAO(x + 1, y) + wallAO(x + 1, y - 1, 0.1), 0.4),\n        1 - Math.min(wallAO(x, y - 1) + wallAO(x - 1, y) + wallAO(x - 1, y - 1, 0.1), 0.4),\n      ])\n    );\n    const pushWall = (x, y, color) => (\n      pushBox(x, y, color, Floor.height, isWall, [1, 1, 1, 1])\n    );\n    for (let y = 0; y < grid.height; y += 1) {\n      for (let x = 0; x < grid.width; x += 1) {\n        const tile = grid.getNodeAt(x, y);\n        if (tile.type !== Floor.tiles.air) {\n          switch (tile.type) {\n            case Floor.tiles.wall:\n              pushWall(x, y, tile.color);\n              break;\n            default:\n              pushTile(x, y, tile.color);\n              break;\n          }\n        }\n      }\n    }\n    const { geometry } = tiles;\n    const index = geometry.getIndex();\n    const position = geometry.getAttribute('position');\n    const color = geometry.getAttribute('color');\n    const normal = geometry.getAttribute('normal');\n    index.setArray(new Uint16Array(indices));\n    index.needsUpdate = true;\n    position.setArray(new Float32Array(vertices));\n    position.needsUpdate = true;\n    color.setArray(new Float32Array(colors));\n    color.needsUpdate = true;\n    normal.setArray(new Float32Array(normals));\n    normal.needsUpdate = true;\n    geometry.computeBoundingSphere();\n    tiles.visible = true;\n  }\n}\n\nFloor.height = 3;\n\nFloor.tiles = {\n  air: 0,\n  tile: 1,\n  wall: 2,\n};\n\nFloor.defaultGridSize = {\n  width: 48,\n  height: 48,\n};\n\nexport default Floor;\n","import {\n  Object3D,\n} from 'three';\nimport Floor from './floor';\n\nclass Building extends Object3D {\n  constructor(meta = {}) {\n    super();\n    this.floors = meta.floors ? (\n      meta.floors.map((grid, number) => new Floor({ grid, number }))\n    ) : [new Floor()];\n    this.floors.forEach(floor => this.add(floor));\n    this.activeFloor = 0;\n  }\n\n  addFloor() {\n    const { floors, activeFloor } = this;\n    const floor = new Floor({ number: activeFloor + 1 });\n    floors.splice(activeFloor + 1, 0, floor);\n    this.add(floor);\n  }\n\n  get activeFloor() {\n    return this._activeFloor;\n  }\n\n  set activeFloor(floor) {\n    const { floors } = this;\n    if (this._activeFloor !== undefined) {\n      floors[this._activeFloor].isActive = false;\n    }\n    floors[floor].isActive = true;\n    this._activeFloor = floor;\n  }\n}\n\nexport default Building;\n","class UI {\n  constructor(className) {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = className;\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default UI;\n","import UI from '@/core/ui';\n\nclass EditorUI extends UI {\n  constructor({\n    floorCount,\n    onAddFloor,\n    onRemoveFloor,\n    onSetFloor,\n  }) {\n    super('toolbar');\n    this.onKeyup = this.onKeyup.bind(this);\n    this.onSetFloor = onSetFloor;\n    // Color\n    const color = this.add('label');\n    color.innerText = 'Color';\n    this.colorInput = this.add('input');\n    this.colorInput.type = 'color';\n    this.colorInput.addEventListener('change', ({ target: { value: color } }) => {\n      this.setColor(color);\n    }, false);\n    this.setColor('#aaaaaa');\n    // Tiles\n    const tiles = this.add('label');\n    tiles.innerText = 'Tiles';\n    this.tiles = [\n      'Air',\n      'Tile',\n      'Wall',\n    ].map((label, tile) => {\n      const button = this.add('button');\n      button.innerText = label;\n      button.tile = tile;\n      button.addEventListener('click', () => {\n        this.setTile(tile);\n      }, false);\n      return button;\n    });\n    this.setTile(1);\n    // Floors\n    const floors = this.add('label');\n    floors.innerText = 'Floors';\n    this.floorInput = this.add('input');\n    this.floorInput.type = 'number';\n    this.floorInput.addEventListener('change', ({ target: { value: floor } }) => {\n      this.setFloor(floor);\n    }, false);\n    this.floorInput.min = 0;\n    this.floorInput.step = 1;\n    this.setFloorCount(floorCount);\n    this.setFloor(0);\n    {\n      const add = this.add('button');\n      add.innerText = '+';\n      add.addEventListener('click', onAddFloor, false);\n      const remove = this.add('button');\n      remove.innerText = '-';\n      remove.addEventListener('click', onRemoveFloor, false);\n      const wrapper = this.add('div');\n      wrapper.appendChild(add);\n      wrapper.appendChild(remove);\n    }\n    this.mount();\n  }\n\n  mount() {\n    super.mount();\n    window.addEventListener('keyup', this.onKeyup, false);\n  }\n\n  unmount() {\n    super.unmount();\n    window.removeEventListener('keyup', this.onKeyup);\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    if (repeat) {\n      return;\n    }\n    if (keyCode >= 49 && keyCode <= 57) {\n      this.setTile(keyCode - 49);\n    }\n  }\n\n  setColor(value) {\n    const { colorInput } = this;\n    colorInput.value = value;\n    this.color = value;\n  }\n\n  setFloorCount(count) {\n    const { floorInput } = this;\n    floorInput.max = count - 1;\n    this.floorCount = count;\n  }\n\n  setFloor(value) {\n    const { floorInput } = this;\n    floorInput.value = value;\n    this.floor = value;\n    this.onSetFloor(value);\n  }\n\n  setTile(value) {\n    const { tiles } = this;\n    tiles.forEach((button) => {\n      button.className = button.tile === value ? 'active' : '';\n    });\n    this.tile = value;\n  }\n}\n\nexport default EditorUI;\n","class History {\n  constructor() {\n    this.past = [];\n    this.future = [];\n  }\n\n  undo() {\n    const { past, future } = this;\n    const prev = past.pop();\n    if (!prev) {\n      return;\n    }\n    prev.undo();\n    future.unshift(prev);\n  }\n\n  redo() {\n    const { past, future } = this;\n    const next = future.shift();\n    if (!next) {\n      return;\n    }\n    next.redo();\n    past.push(next);\n  }\n\n  push({ undo, redo }) {\n    const { past, future } = this;\n    past.push({ undo, redo });\n    future.length = 0;\n  }\n}\n\nexport default History;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xBEBEBE,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Building from '@/meshes/building';\nimport EditorUI from '@/ui/editor';\nimport History from '@/core/history';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn building\n  const building = new Building();\n  scene.root.add(building);\n\n  // Setup camera\n  scene.camera.distance = 10;\n  scene.camera.pitch = Math.PI * (1 / 3);\n  scene.camera.tilt = Math.PI * -0.5;\n  scene.camera.updateOrbit();\n  const { width, height } = building.floors[building.activeFloor].grid;\n  scene.camera.root.position.set(\n    width * 0.5 + 0.5,\n    0,\n    height * 0.5 + 0.5\n  );\n  // scene.camera.maxHeight = 2.9;\n\n  // History\n  const history = new History();\n  window.addEventListener('keydown', (e) => {\n    const {\n      ctrlKey,\n      keyCode,\n      shiftKey,\n      target,\n    } = e;\n    if (\n      !ctrlKey\n      || keyCode !== 90\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    if (shiftKey) history.redo();\n    else history.undo();\n  });\n\n  // UI\n  const ui = new EditorUI({\n    floorCount: building.floors.length,\n    onAddFloor() {\n      building.addFloor();\n      ui.setFloorCount(building.floors.length);\n      ui.setFloor(building.activeFloor + 1);\n    },\n    onRemoveFloor() {\n      console.log('This will remove the current floor but it\\'s not yet implemented.');\n    },\n    onSetFloor(floor) {\n      building.activeFloor = floor;\n      const { height } = building.floors[building.activeFloor].constructor;\n      scene.camera.root.position.y = height * floor;\n    },\n  });\n\n  const lastTile = { x: -1, y: -1 };\n  scene.onAnimationTick = ({ delta }) => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    camera.processKeyboard({ ...input.keyboard, delta });\n    if (!pointer.primary) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    const floor = building.floors[building.activeFloor];\n    const hit = raycaster.intersectObjects([floor.intersect, floor.tiles])[0];\n    if (!hit) {\n      return;\n    }\n    hit.point.addScaledVector(hit.face.normal, -0.5);\n    const { color, tile } = ui;\n    const x = Math.floor(hit.point.x);\n    const y = Math.floor(hit.point.z);\n    if (\n      pointer.primaryDown || x !== lastTile.x || y !== lastTile.y\n    ) {\n      lastTile.x = x;\n      lastTile.y = y;\n      const current = floor.grid.getNodeAt(x, y);\n      const currentType = current.type;\n      const currentColor = `#${current.color.getHexString()}`;\n      const action = {\n        undo() {\n          floor.setTile({\n            type: currentType,\n            color: currentColor,\n            x,\n            y,\n          });\n        },\n        redo() {\n          floor.setTile({\n            type: tile,\n            color,\n            x,\n            y,\n          });\n        },\n      };\n      action.redo();\n      history.push(action);\n    }\n  };\n};\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass ThiccBoi extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: ThiccBoi.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: ThiccBoi.geometry(palette),\n      material: ThiccBoi.material,\n    });\n  }\n}\n\nThiccBoi.bones = {\n  hip: new Vector3(0, 0.4, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.325, 0.45, 0),\n  rightArm: new Vector3(0.325, 0.45, 0),\n  leftLeg: new Vector3(-0.08, 0.1, 0),\n  rightLeg: new Vector3(0.08, 0.1, 0),\n};\n\nThiccBoi.geometry = (palette) => {\n  // const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  const torso = new SphereGeometry(0.26, 8, 8);\n  torso.translate(0, 0.25, 0);\n  torso.scale(1.5, 1, 1.5);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new CylinderGeometry(0.175, 0.15, 0.4, 6);\n  // const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.03, 0.075, 0.3, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.15, 0);\n  rightArm.translate(0, -0.15, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.1, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nThiccBoi.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default ThiccBoi;\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/meshes/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += (animation.delta * 0.5) / Math.abs(route.travel);\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshLambertMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Road extends Mesh {\n  constructor() {\n    const geometry = new Geometry();\n    const track = new PlaneGeometry(512, 4);\n    track.rotateX(Math.PI * -0.5);\n    track.faces.forEach((face) => {\n      face.color.set(0x222233);\n      face.materialIndex = 0;\n    });\n    const markings = new PlaneGeometry(1, 0.2);\n    markings.rotateX(Math.PI * -0.5);\n    markings.faces.forEach((face) => {\n      face.color.set(0xBEBEBE);\n      face.materialIndex = 0;\n    });\n    for (let x = -128; x < 128; x += 5) {\n      geometry.merge(\n        markings.clone().translate(x, 0.001, 0)\n      );\n    }\n    geometry.merge(track);\n    geometry.translate(0, 0, 4);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshLambertMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Road;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.floor(Math.min(Math.max(point.x, 0), grid.width - 1));\n    point.z = Math.floor(Math.min(Math.max(point.z, 0), grid.height - 1));\n    return point;\n  }\n}\n\nexport default Walkable;\n","import {\n  Vector3,\n} from 'three';\n\nclass AI {\n  constructor(building) {\n    this.building = building;\n    this.actors = [];\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    const { actors } = this;\n    actors.push({\n      actor,\n      floor,\n      position,\n      lastThought: 0,\n      state: AI.states.IDLE,\n    });\n  }\n\n  onAnimationTick({ time }) {\n    const { actors, building } = this;\n    actors.forEach((actor) => {\n      const {\n        floor,\n        position,\n        lastThought,\n        state,\n      } = actor;\n      if (state === AI.states.IDLE) {\n        if (time - lastThought > 3) {\n          actor.lastThought = time;\n          if (Math.random() > 0.75) {\n            actor.state = AI.states.WALKING;\n          }\n        }\n        switch (actor.state) {\n          case AI.states.WALKING: {\n            const { walkable } = building.floors[floor];\n            const { finder, grid } = walkable;\n            let destination;\n            let path;\n            grid.setWalkableAt(position.x, position.z, true);\n            do {\n              destination = {\n                x: Math.floor(Math.random() * grid.width),\n                z: Math.floor(Math.random() * grid.height),\n              };\n              path = finder.findPath(\n                position.x, position.z,\n                destination.x, destination.z,\n                grid.clone()\n              )\n                .map(([x, z]) => (\n                  walkable.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n                ));\n            } while (\n              path.length < 2\n            );\n            grid.setWalkableAt(destination.x, destination.z, false);\n            actor.actor.walk(path.slice(1), () => {\n              position.x = destination.x;\n              position.z = destination.z;\n              actor.lastThought = time;\n              actor.state = AI.states.IDLE;\n            });\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n\nAI.states = {\n  IDLE: 0,\n  WALKING: 1,\n};\n\nexport default AI;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Road from './road';\nimport Wall from './wall';\nimport Walkable from './walkable';\nimport AI from './ai';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.ai = new AI(this);\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n    this.road = new Road();\n    this.add(this.road);\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    this.addToGrid({ floor, mesh: actor, position });\n    this.ai.addActor({ actor, floor, position });\n  }\n\n  addToGrid({\n    floor,\n    mesh,\n    position,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(position.x, position.z, false);\n    mesh.position.set(position.x + 0.5, 0, position.z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { ai, children } = this;\n    ai.onAnimationTick(animation);\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","import UI from '@/core/ui';\n\nclass ElevatorUI extends UI {\n  constructor() {\n    super('dialog');\n  }\n\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Object3D,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Object3D {\n  constructor() {\n    super();\n    {\n      const position = new Float32Array(Rain.numDrops * 3);\n      const geometry = new BufferGeometry();\n      geometry.addAttribute('position', (new BufferAttribute(position, 3).setDynamic(true)));\n      const ripples = new Points(\n        geometry,\n        new PointsMaterial({\n          color: 0xAAAADD,\n          fog: true,\n          size: 0.01,\n          sizeAttenuation: true,\n          transparent: true,\n          opacity: 1 / 3,\n        })\n      );\n      ripples.frustumCulled = false;\n      ripples.offsets = position;\n      this.add(ripples);\n      this.ripples = ripples;\n    }\n    {\n      const drop = (new BufferGeometry()).fromGeometry(\n        (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n      ).attributes.position.array;\n      const offsets = new Float32Array(Rain.numDrops * 3);\n      const geometry = new InstancedBufferGeometry();\n      geometry.addAttribute('position', new BufferAttribute(drop, 3));\n      geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n      const drops = new Mesh(\n        geometry,\n        new RainMaterial({\n          color: 0xAAAADD,\n        })\n      );\n      drops.frustumCulled = false;\n      drops.drop = new Vector3();\n      drops.offsets = offsets;\n      this.add(drops);\n      this.drops = drops;\n      for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n        this.resetDrop(i);\n        this.ripples.offsets[i] = 0;\n        this.ripples.offsets[i + 1] = -999;\n        this.ripples.offsets[i + 2] = 0;\n      }\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { drops, position, ripples } = this;\n    const { offsets } = drops;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        offsets[i + 1] = height;\n        this.resetDrop(i);\n      }\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drops, position, ripples } = this;\n    const { drop, offsets } = drops;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    ripples.offsets[i] = offsets[i];\n    ripples.offsets[i + 1] = offsets[i + 1] + 0.01;\n    ripples.offsets[i + 2] = offsets[i + 2];\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { drops, ripples } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport Building from '@/meshes/legacy_building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/meshes/marker';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 4,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 4,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const actors = [Dude, ThiccBoi, ThiccBoi];\n  const dudes = [...Array(building.floors.length * actors.length)].map(() => {\n    const Actor = actors[Math.floor(Math.random() * actors.length)];\n    const dude = new Actor({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * building.floors.length);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * (grid.height - 1)),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addActor({\n      floor,\n      actor: dude,\n      position: spawn,\n    });\n    dude.position.y += 0.001;\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const from = player.position.clone();\n        const to = dude.position.clone();\n        to.z += 1;\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    elevator.removePassenger(player);\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const from = player.position.clone();\n          const to = point.clone();\n          const path = walkable.getPath(from, to);\n          if (path.length) {\n            walkable.grid.setWalkableAt(from.x, from.z, true);\n            if (path.length > 1) {\n              player.walk(path.slice(1), onDestination);\n            } else {\n              onDestination();\n            }\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const from = player.position.clone();\n        const to = point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const from = player.position.clone();\n        const to = hit.point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n          });\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as editor } from './editor';\nexport { default as game } from './game';\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.forward = new Vector3();\n    this.right = new Vector3();\n    this.worldUp = new Vector3(0, 1, 0);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processPointer({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 16);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  processKeyboard({\n    backwards,\n    delta,\n    forwards,\n    leftwards,\n    rightwards,\n  }) {\n    const {\n      forward,\n      right,\n      tilt,\n      pitch,\n      root: { position },\n      worldUp,\n    } = this;\n    const step = delta * 4;\n    forward.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      0,\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize().negate();\n    right.crossVectors(forward, worldUp);\n    if (forwards) {\n      position.addScaledVector(forward, step);\n    }\n    if (backwards) {\n      position.addScaledVector(forward, -step);\n    }\n    if (leftwards) {\n      position.addScaledVector(right, -step);\n    }\n    if (rightwards) {\n      position.addScaledVector(right, step);\n    }\n  }\n\n  updateOrbit() {\n    const {\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, 0.1), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.001);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from '@/meshes/grid';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x666666));\n    const light = new DirectionalLight(0xffffff, 0.3);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.2);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.lambert.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n        'varying float vOrientation;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n        'vOrientation = normal.y != 0.0 ? 1.0 : (normal.x != 0.0 ? 2.0 : 0.0);',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.lambert.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'varying float vOrientation;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = (vOrientation > 1.5 ? vPosition.zy : (vOrientation > 0.5 ? vPosition.xz : vPosition.xy)) * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.lambert.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/core/input';\nimport Music from '@/core/music';\nimport Scene from '@/core/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst splash = document.getElementById('splash');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    splash.style.display = 'none';\n    input.isEnabled = true;\n    if (__PRODUCTION__) music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n\nif (window.process && window.process.type) {\n  // We're running inside electron.\n  // Allow the user to exit with the ESC key.\n  window.addEventListener('keydown', ({ keyCode, repeat }) => {\n    if (keyCode === 27 && !repeat) {\n      if (splash.style.display !== 'none') {\n        window.close();\n      } else {\n        splash.style.display = '';\n        input.isEnabled = false;\n        input.touches.once('end', () => {\n          splash.style.display = 'none';\n          input.isEnabled = true;\n        });\n      }\n    }\n  }, false);\n}\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}