{"version":3,"sources":["webpack:///./src/core/music.js","webpack:///./src/core/input.js","webpack:///./src/meshes/bubble.js","webpack:///./src/core/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/meshes/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/actors/thiccboi.js","webpack:///./src/meshes/building/floor.js","webpack:///./src/meshes/building/index.js","webpack:///./src/core/ui.js","webpack:///./src/ui/editor.js","webpack:///./src/core/history.js","webpack:///./src/materials/rain.js","webpack:///./src/meshes/rain.js","webpack:///./src/meshes/moon.js","webpack:///./src/meshes/starfield.js","webpack:///./src/scenes/editor.js","webpack:///./src/meshes/legacy_building/elevator/cabin.js","webpack:///./src/meshes/button.js","webpack:///./src/meshes/legacy_building/elevator/doors.js","webpack:///./src/meshes/legacy_building/elevator/shaft.js","webpack:///./src/meshes/legacy_building/elevator/index.js","webpack:///./src/meshes/legacy_building/wall.js","webpack:///./src/meshes/legacy_building/hallway.js","webpack:///./src/meshes/legacy_building/road.js","webpack:///./src/meshes/legacy_building/walkable.js","webpack:///./src/meshes/legacy_building/ai.js","webpack:///./src/meshes/legacy_building/index.js","webpack:///./src/ui/elevator.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/core/camera.js","webpack:///./src/meshes/grid.js","webpack:///./src/core/vignette.js","webpack:///./src/core/scene.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/materials/sprite.js"],"names":["Music","_ref","_this","this","toggle","_classCallCheck","script","document","createElement","async","defer","src","body","appendChild","check","window","SC","api","initialize","client_id","tracks","shuffle","track","addEventListener","wantsToPlay","play","setTimeout","index","length","random","Math","floor","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","_ref$mount","mount","keyboard","backwards","forwards","leftwards","rightwards","pointer","current","Vector2","movement","x","y","normalized","last","wheel","touches","Touches","preventSimulated","target","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","onBlur","e","preventDefault","onKeydown","onKeyup","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","keyCode","_ref2","repeat","indexOf","tagName","_ref3","isEnabled","secondary","primary","_ref4","_ref6","_slicedToArray","_ref5","rect","top","left","i","_touches$i","clientX","clientY","width","height","copy","_ref7","deltaY","_ref8","getBoundingClientRect","Bubble","_possibleConstructorReturn","_getPrototypeOf","call","SpriteMaterial","depthTest","scale","set","visible","Sprite","lines","delay","arguments","undefined","_this$material","material","renderer","ctx","clearRect","fillStyle","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","map","needsUpdate","clearTimeout","timer","display","Actor","bonesOrigin","collisionGeometry","geometry","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","add","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","Object","keys","forEach","bone","skeleton","bones","Bones","position","mixer","AnimationMixer","actor_assertThisInitialized","actions","animations","reduce","action","_defineProperty","clipAction","animation","idle","timeScale","rotationAux","movementAux","Vector3","collisionMesh","Mesh","MeshBasicMaterial","opacity","transparent","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","merge","vertices","a","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","computeVertexNormals","computeBoundingSphere","delta","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","min","max","abs","waypoint","path","distance","distanceTo","step","sub","normalize","multiplyScalar","faceTo","setAnimation","fadeOut","reset","fadeIn","point","angle","z","PI","bubble","boundingSphere","radius","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","QuaternionKeyframeTrack","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","dude_possibleConstructorReturn","dude_getPrototypeOf","CylinderBufferGeometry","translate","CylinderGeometry","color","SphereGeometry","hat","leftEye","eyes","rightEye","clone","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","rotateX","marker_possibleConstructorReturn","marker_getPrototypeOf","time","inc","sin","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","root","onAnimationTick","camera","grid","getPointerFrame","processPointer","hit","getRaycaster","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","minHeight","pitch","updateOrbit","ThiccBoi","thiccboi_classCallCheck","thiccboi_possibleConstructorReturn","thiccboi_getPrototypeOf","Actors","Floor","number","floor_classCallCheck","floor_getPrototypeOf","setNumber","entities","Object3D","_Floor$defaultGridSiz","defaultGridSize","Grid","setTile","type","_assertThisInitialize","floor_assertThisInitialized","tile","nodes","tiles","actor","already","children","findIndex","spawn","remove","walkable","_grid$y$x","floor_slicedToArray","r","g","Color","setRGB","air","plane","PlaneBufferGeometry","intersect","side","DoubleSide","GridMaterial","chunks","floor_toConsumableArray","ceil","chunkSize","setIndex","BufferAttribute","Uint16Array","addAttribute","chunk","updateChunk","avg","offsetHSL","cy","cx","indices","colors","normals","pushFace","n","offset","apply","pushBox","testNeighbor","topAO","o","hw","hl","testType","types","getNodeAt","testTileNeighbor","door","wall","testWallNeighbor","testWindowNeighbor","tileAO","windowAO","pushTile","pushDoor","yAxis","mesh","getIndex","getAttribute","normal","setArray","count","Building","meta","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","floors","activeFloor","computeHeightmap","heightmap","splice","building_slicedToArray","addFloor","UI","ui_classCallCheck","wrapper","content","removeChild","tag","node","firstChild","EditorUI","floorCount","onAddFloor","onRemoveFloor","onSave","onSetFloor","editor_classCallCheck","editor_getPrototypeOf","editor_assertThisInitialized","innerText","value","setFloor","parseInt","floorInput","buttons","label","setTool","setColor","colorInput","_this$tool","tool","modifier","pickButton","save","saveButton","setFloorCount","_get","prototype","removeEventListener","History","history_classCallCheck","past","future","prev","pop","undo","unshift","redo","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","replace","join","rain_possibleConstructorReturn","rain_getPrototypeOf","rain_objectSpread","name","uniforms","UniformsUtils","fragmentShader","fog","diffuse","ShaderMaterial","Rain","meshes_rain_classCallCheck","meshes_rain_possibleConstructorReturn","meshes_rain_getPrototypeOf","numDrops","setDynamic","ripples","Points","PointsMaterial","size","sizeAttenuation","frustumCulled","offsets","drop","BoxGeometry","attributes","array","InstancedBufferGeometry","InstancedBufferAttribute","drops","resetDrop","testHeight","func","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","Starfield","starfield_classCallCheck","aux","starfield_possibleConstructorReturn","starfield_getPrototypeOf","moon","scenes_editor","rain","starfield","stored","localStorage","getItem","building","JSON","parse","setHeightTest","getHeight","_building$floors$buil","maxDistance","history","ctrlKey","shiftKey","stopPropagation","ui","confirm","removeFloor","empty","export","setItem","stringify","setModified","constructor","lastTile","processKeyboard","editor_objectSpread","raycaster","intersectObjects","addScaledVector","_ui$tool","currentType","currentColor","getHexString","Cabin","cabin_classCallCheck","setHSL","cabin_possibleConstructorReturn","cabin_getPrototypeOf","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","origin","ret","tapping","ThreeMath","smoothstep","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","PlaneGeometry","animationScale","state","states","CLOSED","targetState","callButton","MOVING","OPEN","close","open","animationStep","Shaft","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","p","travel","to","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","wall_toConsumableArray","j","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","Road","road_classCallCheck","markings","road_possibleConstructorReturn","road_getPrototypeOf","MeshLambertMaterial","Walkable","walkable_classCallCheck","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","AI","ai_classCallCheck","actors","lastThought","IDLE","WALKING","destination","setWalkableAt","ai_slicedToArray","slice","elevators","legacy_building_classCallCheck","legacy_building_getPrototypeOf","ai","legacy_building_assertThisInitialized","layout","split","legacy_building_toConsumableArray","meshes","rooms","room","elevatorIndex","road","addToGrid","addActor","child","ElevatorUI","ui_elevator_classCallCheck","ui_elevator_possibleConstructorReturn","ui_elevator_getPrototypeOf","onFloor","onExit","unmount","game","reverse","maxHeight","testMeshes","game_toConsumableArray","isWalkableAt","elevatorUI","_building$floors$floo","object","parent","onDestination","say","getPath","elevatorFloor","show","addPassenger","removePassenger","tap","__webpack_require__","d","__webpack_exports__","Camera","Infinity","tilt","speed","Raycaster","_assertThisInitialized","forward","right","worldUp","PerspectiveCamera","setFromCamera","far","hasUpdated","cos","negate","crossVectors","ray","direction","lookAt","_ref$background","background","_ref$size","_ref$subdivisions","subdivisions","grid_classCallCheck","grid_possibleConstructorReturn","grid_getPrototypeOf","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","OrthographicCamera","sprite","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Scene","grd","createRadialGradient","addColorStop","beginPath","fill","clearDepth","render","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","vignette","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","getDelta","oldTime","clear","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","lambert","primaryGrid","secondaryGrid","extensions","derivatives","lights","setImmediate","fonts","loaded","_core_input__WEBPACK_IMPORTED_MODULE_0__","_core_music__WEBPACK_IMPORTED_MODULE_1__","_core_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","splash","music","location","hash","Scenes","reload","test","fontTester","style","fontFamily","initialWidth","once","process","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.7cf7046fecb29fcd0ed0.js","sourcesContent":["class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.keyboard = {\n      backwards: false,\n      forwards: false,\n      leftwards: false,\n      rightwards: false,\n    };\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('blur', this.onBlur.bind(this), false);\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('keydown', this.onKeydown.bind(this), false);\n    window.addEventListener('keyup', this.onKeyup.bind(this), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onBlur() {\n    const { keyboard } = this;\n    keyboard.forwards = false;\n    keyboard.backwards = false;\n    keyboard.leftwards = false;\n    keyboard.rightwards = false;\n  }\n\n  onKeydown({ keyCode, repeat, target }) {\n    const { keyboard } = this;\n    if (\n      repeat\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = true;\n        break;\n      case 83:\n        keyboard.backwards = true;\n        break;\n      case 65:\n        keyboard.leftwards = true;\n        break;\n      case 68:\n        keyboard.rightwards = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    const { keyboard } = this;\n    if (repeat) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = false;\n        break;\n      case 83:\n        keyboard.backwards = false;\n        break;\n      case 65:\n        keyboard.leftwards = false;\n        break;\n      case 68:\n        keyboard.rightwards = false;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled || e.target.tagName !== 'CANVAS') return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/meshes/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    bonesOrigin,\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    Object.keys(bonesOrigin).forEach((bone) => {\n      this.skeleton.bones[Actor.Bones[bone]].position.copy(bonesOrigin[bone]);\n    });\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: Dude.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 24);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/meshes/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processPointer(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.minHeight = 0.1;\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass ThiccBoi extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: ThiccBoi.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: ThiccBoi.geometry(palette),\n      material: ThiccBoi.material,\n    });\n  }\n}\n\nThiccBoi.bones = {\n  hip: new Vector3(0, 0.4, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.325, 0.45, 0),\n  rightArm: new Vector3(0.325, 0.45, 0),\n  leftLeg: new Vector3(-0.08, 0.1, 0),\n  rightLeg: new Vector3(0.08, 0.1, 0),\n};\n\nThiccBoi.geometry = (palette) => {\n  // const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  const torso = new SphereGeometry(0.26, 8, 8);\n  torso.translate(0, 0.25, 0);\n  torso.scale(1.5, 1, 1.5);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new CylinderGeometry(0.175, 0.15, 0.4, 6);\n  // const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.03, 0.075, 0.3, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.15, 0);\n  rightArm.translate(0, -0.15, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.1, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nThiccBoi.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default ThiccBoi;\n","import { Grid } from 'pathfinding';\nimport {\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneBufferGeometry,\n  VertexColors,\n  Object3D,\n} from 'three';\nimport Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport GridMaterial from '@/materials/grid';\n\nconst Actors = [Dude, ThiccBoi];\n\nclass Floor extends Object3D {\n  constructor({ grid, number } = { number: 0 }) {\n    super();\n    this.setNumber(number);\n    this.entities = new Object3D();\n    this.add(this.entities);\n    const { width, height } = Floor.defaultGridSize;\n    this.grid = new Grid(width, height);\n    this.grid.setTile = ({\n      color,\n      type,\n      x,\n      y,\n    }) => {\n      const { entities, grid } = this;\n      const tile = grid.nodes[y][x];\n      if (~[tile.type, type].indexOf(Floor.tiles.actor)) {\n        const already = entities.children.findIndex(({ spawn }) => (\n          x === spawn.x && y === spawn.y\n        ));\n        if (~already) {\n          entities.remove(entities.children[already]);\n        }\n      }\n      tile.color = color;\n      tile.type = type;\n      tile.walkable = type !== Floor.tiles.tile;\n      if (type === Floor.tiles.actor) {\n        const Actor = Actors[Math.floor(Math.random() * Actors.length)];\n        const actor = new Actor({\n          arms: 0x222222,\n          eyes: 0x999999 * Math.random(),\n          hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n          head: 0x999999 * Math.random(),\n          legs: 0x222222,\n          torso: 0x999999 * Math.random(),\n        });\n        actor.spawn = { x, y };\n        actor.position.set(x + 0.5, 0.1, y + 0.5);\n        entities.add(actor);\n      }\n    };\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        if (grid) {\n          const [type, r, g, b] = grid[y][x];\n          this.grid.setTile({\n            x,\n            y,\n            type,\n            color: (new Color())\n              .setRGB(r / 0xFF, g / 0xFF, b / 0xFF),\n          });\n        } else {\n          this.grid.setTile({\n            x,\n            y,\n            type: Floor.tiles.air,\n            color: new Color(0),\n          });\n        }\n      }\n    }\n    const plane = new PlaneBufferGeometry(width, height, 2, 2);\n    plane.rotateX(Math.PI * -0.5);\n    plane.translate(width * 0.5, 0, height * 0.5);\n    const intersect = new Mesh(\n      plane,\n      new MeshBasicMaterial({\n        side: DoubleSide,\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.add(intersect);\n    this.intersect = [intersect];\n    const material = new GridMaterial({\n      vertexColors: VertexColors,\n    });\n    this.chunks = [...Array(Math.ceil(this.grid.height / Floor.chunkSize.height))].map(() => (\n      [...Array(Math.ceil(this.grid.width / Floor.chunkSize.width))].map(() => {\n        const geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(new Uint16Array(), 1));\n        geometry.addAttribute('position', new BufferAttribute(new Float32Array(), 3));\n        geometry.addAttribute('color', new BufferAttribute(new Float32Array(), 3));\n        geometry.addAttribute('normal', new BufferAttribute(new Float32Array(), 3));\n        const chunk = new Mesh(\n          geometry,\n          material\n        );\n        chunk.visible = false;\n        this.add(chunk);\n        this.intersect.push(chunk);\n        return chunk;\n      })\n    ));\n    for (let y = 0; y < this.chunks.length; y += 1) {\n      for (let x = 0; x < this.chunks[0].length; x += 1) {\n        this.updateChunk(x, y);\n      }\n    }\n  }\n\n  setNumber(number) {\n    this.number = number;\n    this.position.set(0, Floor.height * number, 0);\n  }\n\n  setTile({\n    color,\n    type,\n    x,\n    y,\n  }) {\n    const { chunks, grid } = this;\n    if (\n      x < 0\n      || x > grid.width - 1\n      || y < 0\n      || y > grid.height - 1\n    ) {\n      return;\n    }\n    color = new Color(color || 0);\n    const avg = (color.r + color.g + color.b) / 3 * 0.1;\n    color.offsetHSL(\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg\n    );\n    grid.setTile({\n      color,\n      type,\n      x,\n      y,\n    });\n    const chunk = {\n      x: Math.floor(x / Floor.chunkSize.width),\n      y: Math.floor(y / Floor.chunkSize.height),\n    };\n    for (\n      let cy = Math.max(chunk.y - 1, 0);\n      cy <= Math.min(y + 1, chunks.length - 1);\n      cy += 1\n    ) {\n      for (\n        let cx = Math.max(chunk.x - 1, 0);\n        cx <= Math.min(x + 1, chunks[0].length - 1);\n        cx += 1\n      ) {\n        this.updateChunk(cx, cy);\n      }\n    }\n  }\n\n  updateChunk(cx, cy) {\n    const {\n      chunks,\n      grid,\n      number,\n    } = this;\n    const indices = [];\n    const vertices = [];\n    const colors = [];\n    const normals = [];\n    const pushFace = (v, c, n) => {\n      const offset = vertices.length / 3;\n      vertices.push(...v);\n      colors.push(...c);\n      normals.push(...n);\n      indices.push(\n        offset, offset + 1, offset + 2,\n        offset + 2, offset + 3, offset\n      );\n    };\n    const pushBox = (x, y, width, length, height, { r, g, b }, testNeighbor, topAO, z = 0) => {\n      const o = {\n        x: x + 0.5,\n        y: y + 0.5,\n      };\n      const hw = width * 0.5;\n      const hl = length * 0.5;\n      if (!testNeighbor(x, y + 1)) {\n        pushFace(\n          [\n            o.x - hw, z, o.y + hl,\n            o.x + hw, z, o.y + hl,\n            o.x + hw, z + height, o.y + hl,\n            o.x - hw, z + height, o.y + hl,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n          ]\n        );\n      }\n      if (!testNeighbor(x, y - 1)) {\n        pushFace(\n          [\n            o.x + hw, z, o.y - hl,\n            o.x - hw, z, o.y - hl,\n            o.x - hw, z + height, o.y - hl,\n            o.x + hw, z + height, o.y - hl,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n          ]\n        );\n      }\n      if (!testNeighbor(x - 1, y)) {\n        pushFace(\n          [\n            o.x - hw, z, o.y - hl,\n            o.x - hw, z, o.y + hl,\n            o.x - hw, z + height, o.y + hl,\n            o.x - hw, z + height, o.y - hl,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n          ]\n        );\n      }\n      if (!testNeighbor(x + 1, y)) {\n        pushFace(\n          [\n            o.x + hw, z, o.y + hl,\n            o.x + hw, z, o.y - hl,\n            o.x + hw, z + height, o.y - hl,\n            o.x + hw, z + height, o.y + hl,\n          ],\n          [\n            r * 0.8, g * 0.8, b * 0.8,\n            r * 0.8, g * 0.8, b * 0.8,\n            r, g, b,\n            r, g, b,\n          ],\n          [\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n          ]\n        );\n      }\n      if (number > 0 || z !== 0) {\n        pushFace(\n          [\n            o.x - hw, z + 0.001, o.y - hl,\n            o.x + hw, z + 0.001, o.y - hl,\n            o.x + hw, z + 0.001, o.y + hl,\n            o.x - hw, z + 0.001, o.y + hl,\n          ],\n          [\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n          ],\n          [\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n          ]\n        );\n      }\n      pushFace(\n        [\n          o.x - hw, z + height, o.y + hl,\n          o.x + hw, z + height, o.y + hl,\n          o.x + hw, z + height, o.y - hl,\n          o.x - hw, z + height, o.y - hl,\n        ],\n        [\n          r * topAO[0], g * topAO[0], b * topAO[0],\n          r * topAO[1], g * topAO[1], b * topAO[1],\n          r * topAO[2], g * topAO[2], b * topAO[2],\n          r * topAO[3], g * topAO[3], b * topAO[3],\n        ],\n        [\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n        ]\n      );\n    };\n    const testType = (x, y, types) => {\n      if (x < 0 || x > grid.width - 1 || y < 0 || y > grid.height - 1) {\n        return false;\n      }\n      return types.indexOf(grid.getNodeAt(x, y).type) !== -1;\n    };\n    const testTileNeighbor = (x, y) => testType(\n      x,\n      y,\n      [Floor.tiles.door, Floor.tiles.tile, Floor.tiles.wall, Floor.tiles.window]\n    );\n    const testWallNeighbor = (x, y) => testType(x, y, [Floor.tiles.wall]);\n    const testWindowNeighbor = (x, y) => testType(x, y, [Floor.tiles.wall, Floor.tiles.window]);\n    const tileAO = (x, y, s = 0.2) => (\n      testType(x, y, [Floor.tiles.wall, Floor.tiles.window]) ? s : 0\n    );\n    const windowAO = (x, y, s = 0.2) => (\n      testType(x, y, [Floor.tiles.wall]) ? s : 0\n    );\n    const pushTile = (x, y, color) => (\n      pushBox(x, y, 1, 1, 0.1, color, testTileNeighbor, [\n        1 - Math.min(tileAO(x, y + 1) + tileAO(x - 1, y) + tileAO(x - 1, y + 1, 0.1), 0.4),\n        1 - Math.min(tileAO(x, y + 1) + tileAO(x + 1, y) + tileAO(x + 1, y + 1, 0.1), 0.4),\n        1 - Math.min(tileAO(x, y - 1) + tileAO(x + 1, y) + tileAO(x + 1, y - 1, 0.1), 0.4),\n        1 - Math.min(tileAO(x, y - 1) + tileAO(x - 1, y) + tileAO(x - 1, y - 1, 0.1), 0.4),\n      ])\n    );\n    const pushDoor = (x, y, color) => {\n      pushTile(x, y, color);\n      const size = 0.2;\n      const yAxis = (\n        testType(x, y + 1, [Floor.tiles.wall, Floor.tiles.door])\n        && testType(x, y - 1, [Floor.tiles.wall, Floor.tiles.door])\n      );\n      pushBox(\n        x,\n        y,\n        yAxis ? size : 1,\n        yAxis ? 1 : size,\n        Floor.height,\n        color,\n        testWallNeighbor,\n        [1, 1, 1, 1]\n      );\n    };\n    const pushWall = (x, y, color) => (\n      pushBox(x, y, 1, 1, Floor.height, color, testWallNeighbor, [1, 1, 1, 1])\n    );\n    const pushWindow = (x, y, color) => {\n      pushBox(x, y, 1, 1, Floor.height * (1 / 3), color, testWindowNeighbor, [\n        1 - Math.min(windowAO(x, y + 1) + windowAO(x - 1, y) + windowAO(x - 1, y + 1, 0.1), 0.4),\n        1 - Math.min(windowAO(x, y + 1) + windowAO(x + 1, y) + windowAO(x + 1, y + 1, 0.1), 0.4),\n        1 - Math.min(windowAO(x, y - 1) + windowAO(x + 1, y) + windowAO(x + 1, y - 1, 0.1), 0.4),\n        1 - Math.min(windowAO(x, y - 1) + windowAO(x - 1, y) + windowAO(x - 1, y - 1, 0.1), 0.4),\n      ]);\n      pushBox(\n        x,\n        y,\n        1,\n        1,\n        Floor.height * (1 / 3),\n        color,\n        testWindowNeighbor,\n        [1, 1, 1, 1],\n        Floor.height * (1 / 3) * 2\n      );\n    };\n    for (\n      let y = cy * Floor.chunkSize.height;\n      y < Math.min((cy + 1) * Floor.chunkSize.height, grid.height);\n      y += 1\n    ) {\n      for (\n        let x = cx * Floor.chunkSize.width;\n        x < Math.min((cx + 1) * Floor.chunkSize.width, grid.width);\n        x += 1\n      ) {\n        const tile = grid.getNodeAt(x, y);\n        switch (tile.type) {\n          case Floor.tiles.air:\n            break;\n          case Floor.tiles.door:\n            pushDoor(x, y, tile.color);\n            break;\n          case Floor.tiles.wall:\n            pushWall(x, y, tile.color);\n            break;\n          case Floor.tiles.window:\n            pushWindow(x, y, tile.color);\n            break;\n          case Floor.tiles.dude:\n          default:\n            pushTile(x, y, tile.color);\n            break;\n        }\n      }\n    }\n    const mesh = chunks[cy][cx];\n    const { geometry } = mesh;\n    const index = geometry.getIndex();\n    const position = geometry.getAttribute('position');\n    const color = geometry.getAttribute('color');\n    const normal = geometry.getAttribute('normal');\n    index.setArray(new Uint16Array(indices));\n    index.needsUpdate = true;\n    position.setArray(new Float32Array(vertices));\n    position.needsUpdate = true;\n    color.setArray(new Float32Array(colors));\n    color.needsUpdate = true;\n    normal.setArray(new Float32Array(normals));\n    normal.needsUpdate = true;\n    geometry.computeBoundingSphere();\n    mesh.visible = !!position.count;\n  }\n}\n\nFloor.height = 3;\n\nFloor.tiles = {\n  air: 0,\n  tile: 1,\n  wall: 2,\n  window: 3,\n  door: 4,\n  actor: 5,\n};\n\nFloor.defaultGridSize = {\n  width: 48,\n  height: 48,\n};\n\nFloor.chunkSize = {\n  width: 16,\n  height: 16,\n};\n\nexport default Floor;\n","import {\n  Object3D,\n} from 'three';\nimport Floor from './floor';\n\nclass Building extends Object3D {\n  constructor(meta = {}) {\n    super();\n    this.floors = meta.floors ? (\n      meta.floors.map((grid, number) => new Floor({ grid, number }))\n    ) : [new Floor()];\n    this.floors.forEach(floor => this.add(floor));\n    this.activeFloor = 0;\n    this.computeHeightmap();\n  }\n\n  onAnimationTick(animation) {\n    const { floors } = this;\n    floors.forEach(floor => (\n      floor.entities.children.forEach(actor => actor.onAnimationTick(animation))\n    ));\n  }\n\n  computeHeightmap() {\n    const { floors } = this;\n    const heightmap = [];\n    floors.forEach(({ grid: { nodes: row } }, floor) => (\n      row.forEach(nodes => (\n        nodes.forEach(({ x, y, type }) => {\n          if (!heightmap[y]) heightmap[y] = [];\n          let height;\n          switch (type) {\n            case Floor.tiles.tile:\n              height = (floor * 3) + 0.1;\n              break;\n            case Floor.tiles.wall:\n            case Floor.tiles.window:\n              height = (floor + 1) * 3;\n              break;\n            default:\n              height = 0;\n              break;\n          }\n          heightmap[y][x] = Math.max(heightmap[y][x] || 0, height);\n        })\n      ))\n    ));\n    this.heightmap = heightmap;\n  }\n\n  getHeight(x, y) {\n    const { heightmap } = this;\n    x = Math.floor(x);\n    y = Math.floor(y);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || y < 0\n      || y > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[y][x];\n  }\n\n  export() {\n    const { floors } = this;\n    return {\n      floors: floors.map(({ grid: { nodes: row } }) => (\n        row.map(nodes => (\n          nodes.map(({ type, color }) => [\n            type & 0xFF,\n            Math.floor(color.r * 0xFF) & 0xFF,\n            Math.floor(color.g * 0xFF) & 0xFF,\n            Math.floor(color.b * 0xFF) & 0xFF,\n          ])\n        ))\n      )),\n    };\n  }\n\n  addFloor() {\n    const { floors, activeFloor } = this;\n    const floor = new Floor({ number: activeFloor + 1 });\n    floors.splice(activeFloor + 1, 0, floor);\n    this.add(floor);\n    for (let i = activeFloor + 1; i < floors.length; i += 1) {\n      floors[i].setNumber(i);\n    }\n    this.activeFloor += 1;\n  }\n\n  removeFloor() {\n    const { floors, activeFloor } = this;\n    const [floor] = floors.splice(activeFloor, 1);\n    this.remove(floor);\n    if (!floors.length) this.addFloor();\n    if (!floors[activeFloor]) {\n      this.activeFloor -= 1;\n    }\n    for (let i = activeFloor; i < floors.length; i += 1) {\n      floors[i].setNumber(i);\n    }\n  }\n}\n\nexport default Building;\n","class UI {\n  constructor(className) {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = className;\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default UI;\n","import UI from '@/core/ui';\n\nclass EditorUI extends UI {\n  constructor({\n    floorCount,\n    onAddFloor,\n    onRemoveFloor,\n    onSave,\n    onSetFloor,\n  }) {\n    super('toolbar');\n    this.onKeyup = this.onKeyup.bind(this);\n    this.onSetFloor = onSetFloor;\n    // Floor\n    {\n      const label = this.add('label');\n      label.innerText = 'Floor';\n      const input = this.add('input');\n      input.type = 'number';\n      input.addEventListener('change', ({ target: { value: floor } }) => {\n        this.setFloor(parseInt(floor, 10));\n      }, false);\n      input.min = 0;\n      input.step = 1;\n      this.floorInput = input;\n      const buttons = this.add('div');\n      {\n        const add = this.add('button');\n        add.innerText = '+';\n        add.addEventListener('click', onAddFloor, false);\n        const remove = this.add('button');\n        remove.innerText = '×';\n        remove.addEventListener('click', onRemoveFloor, false);\n        buttons.appendChild(add);\n        buttons.appendChild(remove);\n      }\n      const wrapper = this.add('div');\n      wrapper.appendChild(input);\n      wrapper.appendChild(buttons);\n    }\n    // Tiles\n    {\n      const label = this.add('label');\n      label.innerText = 'Tiles';\n      const tiles = [\n        'Air',\n        'Tile',\n        'Wall',\n        'Window',\n        'Door',\n        'Dude',\n      ].map((label, tile) => {\n        const button = this.add('button');\n        button.innerText = label;\n        button.addEventListener('click', () => {\n          this.setTool('paint', tile);\n        }, false);\n        return button;\n      });\n      const wrapper = this.add('div');\n      tiles.forEach(button => wrapper.appendChild(button));\n      this.tiles = tiles;\n    }\n    // Color\n    {\n      const label = this.add('label');\n      label.innerText = 'Color';\n      const input = this.add('input');\n      input.type = 'color';\n      input.addEventListener('change', ({ target: { value: color } }) => {\n        this.setColor(color);\n      }, false);\n      this.colorInput = input;\n      const button = this.add('button');\n      button.innerText = 'Pick';\n      button.addEventListener('click', () => {\n        const { tool, modifier } = this.tool;\n        this.setTool('pick', tool === 'paint' ? modifier : 1);\n      }, false);\n      this.pickButton = button;\n      const wrapper = this.add('div');\n      wrapper.appendChild(input);\n      wrapper.appendChild(button);\n    }\n    // Save\n    const save = this.add('button');\n    save.className = 'save';\n    save.innerText = 'Save';\n    save.addEventListener('click', onSave, false);\n    this.saveButton = save;\n    // Initial state\n    this.setFloorCount(floorCount);\n    this.setFloor(0);\n    this.setTool('paint', 1);\n    this.setColor('#aaaaaa');\n    // Mount UI\n    this.mount();\n  }\n\n  mount() {\n    super.mount();\n    window.addEventListener('keyup', this.onKeyup, false);\n  }\n\n  unmount() {\n    super.unmount();\n    window.removeEventListener('keyup', this.onKeyup);\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    if (repeat) {\n      return;\n    }\n    if (keyCode >= 49 && keyCode <= 57) {\n      this.setTool('paint', keyCode - 49);\n    }\n  }\n\n  setColor(value) {\n    const { colorInput } = this;\n    colorInput.value = value;\n    this.color = value;\n  }\n\n  setFloorCount(count) {\n    const { floorInput } = this;\n    floorInput.max = count - 1;\n    this.floorCount = count;\n  }\n\n  setFloor(value) {\n    const { floorInput } = this;\n    floorInput.value = value;\n    this.floor = value;\n    this.onSetFloor(value);\n  }\n\n  setModified(value) {\n    const { saveButton } = this;\n    saveButton.className = `save${value ? ' modified' : ''}`;\n  }\n\n  setTool(tool, modifier) {\n    const { pickButton, tiles } = this;\n    this.tool = { tool, modifier };\n    tiles.forEach((button) => { button.className = ''; });\n    pickButton.className = '';\n    switch (tool) {\n      case 'paint':\n        tiles[modifier].className = 'active';\n        break;\n      case 'pick':\n        pickButton.className = 'active';\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport default EditorUI;\n","class History {\n  constructor() {\n    this.past = [];\n    this.future = [];\n  }\n\n  empty() {\n    const { past, future } = this;\n    past.length = 0;\n    future.length = 0;\n  }\n\n  undo() {\n    const { past, future } = this;\n    const prev = past.pop();\n    if (!prev) {\n      return;\n    }\n    prev.undo();\n    future.unshift(prev);\n  }\n\n  redo() {\n    const { past, future } = this;\n    const next = future.shift();\n    if (!next) {\n      return;\n    }\n    next.redo();\n    past.push(next);\n  }\n\n  push({ undo, redo }) {\n    const { past, future } = this;\n    past.push({ undo, redo });\n    future.length = 0;\n  }\n}\n\nexport default History;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Object3D,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Object3D {\n  constructor() {\n    super();\n    {\n      const position = new Float32Array(Rain.numDrops * 3);\n      const geometry = new BufferGeometry();\n      geometry.addAttribute('position', (new BufferAttribute(position, 3).setDynamic(true)));\n      const ripples = new Points(\n        geometry,\n        new PointsMaterial({\n          color: 0xAAAADD,\n          fog: true,\n          size: 0.01,\n          sizeAttenuation: true,\n          transparent: true,\n          opacity: 1 / 3,\n        })\n      );\n      ripples.frustumCulled = false;\n      ripples.offsets = position;\n      this.add(ripples);\n      this.ripples = ripples;\n    }\n    {\n      const drop = (new BufferGeometry()).fromGeometry(\n        (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n      ).attributes.position.array;\n      const offsets = new Float32Array(Rain.numDrops * 3);\n      const geometry = new InstancedBufferGeometry();\n      geometry.addAttribute('position', new BufferAttribute(drop, 3));\n      geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n      const drops = new Mesh(\n        geometry,\n        new RainMaterial({\n          color: 0xAAAADD,\n        })\n      );\n      drops.frustumCulled = false;\n      drops.drop = new Vector3();\n      drops.offsets = offsets;\n      this.add(drops);\n      this.drops = drops;\n      for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n        this.resetDrop(i);\n        this.ripples.offsets[i] = 0;\n        this.ripples.offsets[i + 1] = -999;\n        this.ripples.offsets[i + 2] = 0;\n      }\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { drops, position, ripples } = this;\n    const { offsets } = drops;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        offsets[i + 1] = height;\n        this.resetDrop(i);\n      }\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drops, position, ripples } = this;\n    const { drop, offsets } = drops;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    ripples.offsets[i] = offsets[i];\n    ripples.offsets[i + 1] = offsets[i + 1] + 0.01;\n    ripples.offsets[i + 2] = offsets[i + 2];\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { drops, ripples } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xBEBEBE,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Building from '@/meshes/building';\nimport EditorUI from '@/ui/editor';\nimport History from '@/core/history';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn building\n  const stored = localStorage.getItem('SpY::EditorTestLevel');\n  const building = new Building(\n    stored ? JSON.parse(stored) : {}\n  );\n  scene.root.add(building);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.position.z = building.heightmap.length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Setup camera\n  scene.camera.distance = 10;\n  scene.camera.minHeight = 0.2;\n  scene.camera.updateOrbit();\n  const { width, height } = building.floors[building.activeFloor].grid;\n  scene.camera.root.position.set(\n    width * 0.5 + 0.5,\n    0,\n    height * 0.5 + 0.5\n  );\n  scene.camera.maxDistance = 32;\n\n  // History\n  const history = new History();\n  window.addEventListener('keydown', (e) => {\n    const {\n      ctrlKey,\n      keyCode,\n      shiftKey,\n      target,\n    } = e;\n    if (\n      !ctrlKey\n      || keyCode !== 90\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    if (shiftKey) history.redo();\n    else history.undo();\n  });\n\n  // UI\n  const ui = new EditorUI({\n    floorCount: building.floors.length,\n    onAddFloor() {\n      building.addFloor();\n      ui.setFloorCount(building.floors.length);\n      ui.setFloor(building.activeFloor);\n    },\n    onRemoveFloor() {\n      // eslint-disable-next-line no-alert\n      if (!window.confirm('Remove the current floor?')) {\n        return;\n      }\n      building.removeFloor();\n      ui.setFloorCount(building.floors.length);\n      ui.setFloor(building.activeFloor);\n      history.empty();\n    },\n    onSave() {\n      const meta = building.export();\n      localStorage.setItem('SpY::EditorTestLevel', JSON.stringify(meta));\n      ui.setModified(false);\n    },\n    onSetFloor(floor) {\n      building.activeFloor = floor;\n      const { height } = building.floors[building.activeFloor].constructor;\n      scene.camera.root.position.y = height * floor;\n    },\n  });\n\n  const lastTile = { x: -1, y: -1 };\n  scene.onAnimationTick = ({ delta }) => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    camera.processKeyboard({ ...input.keyboard, delta });\n    if (!pointer.primary) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    const floor = building.floors[building.activeFloor];\n    const hit = raycaster.intersectObjects(floor.intersect)[0];\n    if (!hit) {\n      return;\n    }\n    hit.point.addScaledVector(hit.face.normal, -0.5);\n    const { color, tool: { tool, modifier } } = ui;\n    const x = Math.floor(hit.point.x);\n    const y = Math.floor(hit.point.z);\n    if (\n      pointer.primaryDown || x !== lastTile.x || y !== lastTile.y\n    ) {\n      lastTile.x = x;\n      lastTile.y = y;\n      const current = floor.grid.getNodeAt(x, y);\n      const currentType = current.type;\n      const currentColor = `#${current.color.getHexString()}`;\n      switch (tool) {\n        case 'paint': {\n          const action = {\n            undo() {\n              floor.setTile({\n                type: currentType,\n                color: currentColor,\n                x,\n                y,\n              });\n              building.computeHeightmap();\n              ui.setModified(true);\n            },\n            redo() {\n              floor.setTile({\n                type: modifier,\n                color,\n                x,\n                y,\n              });\n              building.computeHeightmap();\n              ui.setModified(true);\n            },\n          };\n          action.redo();\n          history.push(action);\n          break;\n        }\n        case 'pick':\n          ui.setColor(currentColor);\n          ui.setTool('paint', modifier);\n          break;\n        default:\n          break;\n      }\n    }\n  };\n};\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/meshes/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += (animation.delta * 0.5) / Math.abs(route.travel);\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshLambertMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Road extends Mesh {\n  constructor() {\n    const geometry = new Geometry();\n    const track = new PlaneGeometry(512, 4);\n    track.rotateX(Math.PI * -0.5);\n    track.faces.forEach((face) => {\n      face.color.set(0x222233);\n      face.materialIndex = 0;\n    });\n    const markings = new PlaneGeometry(1, 0.2);\n    markings.rotateX(Math.PI * -0.5);\n    markings.faces.forEach((face) => {\n      face.color.set(0xBEBEBE);\n      face.materialIndex = 0;\n    });\n    for (let x = -128; x < 128; x += 5) {\n      geometry.merge(\n        markings.clone().translate(x, 0.001, 0)\n      );\n    }\n    geometry.merge(track);\n    geometry.translate(0, 0, 4);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshLambertMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Road;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.floor(Math.min(Math.max(point.x, 0), grid.width - 1));\n    point.z = Math.floor(Math.min(Math.max(point.z, 0), grid.height - 1));\n    return point;\n  }\n}\n\nexport default Walkable;\n","import {\n  Vector3,\n} from 'three';\n\nclass AI {\n  constructor(building) {\n    this.building = building;\n    this.actors = [];\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    const { actors } = this;\n    actors.push({\n      actor,\n      floor,\n      position,\n      lastThought: 0,\n      state: AI.states.IDLE,\n    });\n  }\n\n  onAnimationTick({ time }) {\n    const { actors, building } = this;\n    actors.forEach((actor) => {\n      const {\n        floor,\n        position,\n        lastThought,\n        state,\n      } = actor;\n      if (state === AI.states.IDLE) {\n        if (time - lastThought > 3) {\n          actor.lastThought = time;\n          if (Math.random() > 0.75) {\n            actor.state = AI.states.WALKING;\n          }\n        }\n        switch (actor.state) {\n          case AI.states.WALKING: {\n            const { walkable } = building.floors[floor];\n            const { finder, grid } = walkable;\n            let destination;\n            let path;\n            grid.setWalkableAt(position.x, position.z, true);\n            do {\n              destination = {\n                x: Math.floor(Math.random() * grid.width),\n                z: Math.floor(Math.random() * grid.height),\n              };\n              path = finder.findPath(\n                position.x, position.z,\n                destination.x, destination.z,\n                grid.clone()\n              )\n                .map(([x, z]) => (\n                  walkable.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n                ));\n            } while (\n              path.length < 2\n            );\n            grid.setWalkableAt(destination.x, destination.z, false);\n            actor.actor.walk(path.slice(1), () => {\n              position.x = destination.x;\n              position.z = destination.z;\n              actor.lastThought = time;\n              actor.state = AI.states.IDLE;\n            });\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n\nAI.states = {\n  IDLE: 0,\n  WALKING: 1,\n};\n\nexport default AI;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Road from './road';\nimport Wall from './wall';\nimport Walkable from './walkable';\nimport AI from './ai';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.ai = new AI(this);\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n    this.road = new Road();\n    this.add(this.road);\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    this.addToGrid({ floor, mesh: actor, position });\n    this.ai.addActor({ actor, floor, position });\n  }\n\n  addToGrid({\n    floor,\n    mesh,\n    position,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(position.x, position.z, false);\n    mesh.position.set(position.x + 0.5, 0, position.z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { ai, children } = this;\n    ai.onAnimationTick(animation);\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","import UI from '@/core/ui';\n\nclass ElevatorUI extends UI {\n  constructor() {\n    super('dialog');\n  }\n\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport Building from '@/meshes/legacy_building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/meshes/marker';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 4,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 4,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.minHeight = 0.1;\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const actors = [Dude, ThiccBoi, ThiccBoi];\n  const dudes = [...Array(building.floors.length * actors.length)].map(() => {\n    const Actor = actors[Math.floor(Math.random() * actors.length)];\n    const dude = new Actor({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * building.floors.length);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * (grid.height - 1)),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addActor({\n      floor,\n      actor: dude,\n      position: spawn,\n    });\n    dude.position.y += 0.001;\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const from = player.position.clone();\n        const to = dude.position.clone();\n        to.z += 1;\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    elevator.removePassenger(player);\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const from = player.position.clone();\n          const to = point.clone();\n          const path = walkable.getPath(from, to);\n          if (path.length) {\n            walkable.grid.setWalkableAt(from.x, from.z, true);\n            if (path.length > 1) {\n              player.walk(path.slice(1), onDestination);\n            } else {\n              onDestination();\n            }\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const from = player.position.clone();\n        const to = point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const from = player.position.clone();\n        const to = hit.point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n          });\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as editor } from './editor';\nexport { default as game } from './game';\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxDistance = 16;\n    this.minHeight = -Infinity;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.forward = new Vector3();\n    this.right = new Vector3();\n    this.worldUp = new Vector3(0, 1, 0);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processPointer({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      const { maxDistance } = this;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), maxDistance);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  processKeyboard({\n    backwards,\n    delta,\n    forwards,\n    leftwards,\n    rightwards,\n  }) {\n    const {\n      forward,\n      right,\n      tilt,\n      pitch,\n      root: { position },\n      worldUp,\n    } = this;\n    const step = delta * 4;\n    forward.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      0,\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize().negate();\n    right.crossVectors(forward, worldUp);\n    if (forwards) {\n      position.addScaledVector(forward, step);\n    }\n    if (backwards) {\n      position.addScaledVector(forward, -step);\n    }\n    if (leftwards) {\n      position.addScaledVector(right, -step);\n    }\n    if (rightwards) {\n      position.addScaledVector(right, step);\n    }\n  }\n\n  updateOrbit() {\n    const {\n      minHeight,\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, minHeight), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.001);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from '@/meshes/grid';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x666666));\n    const light = new DirectionalLight(0xffffff, 0.3);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.2);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.lambert.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n        'varying float vOrientation;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n        'vOrientation = normal.y != 0.0 ? 1.0 : (normal.x != 0.0 ? 2.0 : 0.0);',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.lambert.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'varying float vOrientation;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = (vOrientation > 1.5 ? vPosition.zy : (vOrientation > 0.5 ? vPosition.xz : vPosition.xy)) * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.lambert.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/core/input';\nimport Music from '@/core/music';\nimport Scene from '@/core/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst splash = document.getElementById('splash');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    splash.style.display = 'none';\n    input.isEnabled = true;\n    if (__PRODUCTION__) music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n\nif (window.process && window.process.type) {\n  // We're running inside electron.\n  // Allow the user to exit with the ESC key.\n  window.addEventListener('keydown', ({ keyCode, repeat }) => {\n    if (keyCode === 27 && !repeat) {\n      if (splash.style.display !== 'none') {\n        window.close();\n      } else {\n        splash.style.display = '';\n        input.isEnabled = false;\n        input.touches.once('end', () => {\n          splash.style.display = 'none';\n          input.isEnabled = true;\n        });\n      }\n    }\n  }, false);\n}\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}