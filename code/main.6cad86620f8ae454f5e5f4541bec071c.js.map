{"version":3,"sources":["webpack:///./src/engine/input.js","webpack:///./src/engine/camera.js","webpack:///./src/materials/grid.js","webpack:///./src/engine/grid.js","webpack:///./src/engine/moon.js","webpack:///./src/engine/starfield.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/building/hallway.js","webpack:///./src/building/shaft.js","webpack:///./src/building/index.js","webpack:///./src/scenes/game.js","webpack:///./src/index.js"],"names":["Input","_ref","_ref$mount","mount","document","body","_classCallCheck","this","pointer","current","Vector2","movement","x","y","normalized","last","raycaster","Raycaster","wheel","touches","Touches","window","filtered","preventSimulated","target","on","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","addEventListener","e","preventDefault","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","button","_ref2","isEnabled","primary","secondary","_ref4","_slicedToArray","_ref3","_this$size","size","width","height","copy","_ref5","deltaY","_ref6","getBoundingClientRect","Camera","_this","camera_classCallCheck","_getPrototypeOf","call","distance","offset","Vector3","tilt","Math","PI","pitch","speed","step","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","delta","position","distanceTo","sub","normalize","multiplyScalar","hasUpdated","min","max","set","cos","sin","lookAt","GridMaterial","arguments","length","undefined","_ref$color","color","_ref$size","_ref$subdivisions","subdivisions","rest","_objectWithoutProperties","grid_classCallCheck","vertexShader","ShaderLib","phong","replace","join","primaryGrid","secondaryGrid","fragmentShader","concat","grid_possibleConstructorReturn","grid_getPrototypeOf","grid_objectSpread","name","uniforms","UniformsUtils","clone","extensions","derivatives","fog","lights","diffuse","value","ShaderMaterial","Grid","_ref$background","background","Color","engine_grid_classCallCheck","geometry","PlaneBufferGeometry","translate","rotateX","engine_grid_possibleConstructorReturn","engine_grid_getPrototypeOf","material","Mesh","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","MeshBasicMaterial","Starfield","starfield_classCallCheck","radius","BufferGeometry","Float32Array","count","aux","i","floor","random","o","z","addAttribute","BufferAttribute","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","Scene","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","starfield","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","render","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Actor","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actor_assertThisInitialized","actions","Object","keys","animations","reduce","action","actor_objectSpread","actor_defineProperty","clipAction","idle","timeScale","play","rotationAux","movementAux","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","fromGeometry","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destination","destinationMarker","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","abs","setAnimation","visible","onDestinationCallback","fadeOut","reset","fadeIn","point","faceTo","angle","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","boundingSphere","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","marker_possibleConstructorReturn","marker_getPrototypeOf","transparent","scale","inc","s","opacity","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","map","v","dude","walkTo","mainDudeX","mainDudeZ","mainDude","debug_slicedToArray","getPointerFrame","processInput","setFromCamera","hit","intersectObject","Hallway","_ref2$hasElevator","hasElevator","_ref2$isEdge","isEdge","hallway_classCallCheck","generateWall","orientation","wall","rotateY","hallway_possibleConstructorReturn","hallway_getPrototypeOf","side","DoubleSide","_ref$width","_ref$height","PlaneGeometry","ceil","setHSL","Shaft","floors","origin","shaft_classCallCheck","back","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Building","elevators","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","pallete","mesh","shaft","rooms","room","type","findIndex","game","positionAux","getWorldPosition","building","game_toConsumableArray","intersectObjects","object","getElementById","once","style","display","route","location","hash","split","slice","Scenes"],"mappings":"42BAsGeA,aAjGb,SAAAA,EAAAC,GAEG,IAAAC,EAAAD,EADDE,aACC,IAAAD,EADOE,SAASC,KAChBH,+FAAAI,CAAAC,KAAAP,GACDO,KAAKJ,MAAQA,EACbI,KAAKC,QAAU,CACbC,QAAS,IAAIC,IAAQ,EAAG,GACxBC,SAAU,CAAEC,EAAG,EAAGC,EAAG,GACrBC,WAAY,IAAIJ,IAAQ,EAAG,GAC3BK,KAAM,IAAIL,IAAQ,EAAG,GACrBM,UAAW,IAAIC,IACfC,MAAO,GAETX,KAAKY,QAAUC,IAAQC,OAAQ,CAC7BC,UAAU,EACVC,kBAAkB,EAClBC,OAAQrB,IAEPsB,GAAG,QAASlB,KAAKmB,cAAcC,KAAKpB,OACpCkB,GAAG,OAAQlB,KAAKqB,cAAcD,KAAKpB,OACnCkB,GAAG,MAAOlB,KAAKsB,YAAYF,KAAKpB,OACnCuB,2BAAiBT,OAAQd,KAAKwB,eAAeJ,KAAKpB,OAClDc,OAAOW,iBAAiB,cAAe,SAAAC,GAAC,OAAIA,EAAEC,mBAAkB,GAChEb,OAAOW,iBAAiB,SAAUzB,KAAK4B,SAASR,KAAKpB,OAAO,GAC5DA,KAAK4B,4EAGW,IACR3B,EAAYD,KAAZC,QACF4B,4aAAKC,CAAA,GAAQ7B,GAOnB,OANAA,EAAQ8B,aAAc,EACtB9B,EAAQ+B,WAAY,EACpB/B,EAAQgC,eAAgB,EACxBhC,EAAQiC,aAAc,EACtBjC,EAAQG,SAAW,CAAEC,EAAG,EAAGC,EAAG,GAC9BL,EAAQU,MAAQ,EACTkB,2CAGiB,IAAVM,EAAUC,EAAVD,OACNE,EAAuBrC,KAAvBqC,UAAWpC,EAAYD,KAAZC,QACnB,GAAKoC,EACL,OAAQF,GACN,KAAK,EACHlC,EAAQqC,SAAU,EAClBrC,EAAQ8B,aAAc,EACtB,MACF,KAAK,EACH9B,EAAQsC,WAAY,EACpBtC,EAAQgC,eAAgB,yCAMhBP,KAAW,IAAAc,EAAAC,EAAAC,EAAA,GAAPrC,EAAOmC,EAAA,GAAJlC,EAAIkC,EAAA,GACfH,EAAgDrC,KAAhDqC,UAAWpC,EAAqCD,KAArCC,QADI0C,EACiC3C,KAA5B4C,KAAQC,EADbF,EACaE,MAAOC,EADpBH,EACoBG,OACtCT,IACLpC,EAAQC,QAAQG,EAAIA,EACpBJ,EAAQC,QAAQI,EAAIA,EACpBL,EAAQM,WAAWF,EAAMA,EAAIwC,EAAS,EAAK,EAC3C5C,EAAQM,WAAWD,EAAI,EAAMA,EAAIwC,EAAU,EAC3C7C,EAAQG,SAAW,CACjBC,EAAGJ,EAAQC,QAAQG,EAAIJ,EAAQO,KAAKH,EACpCC,EAAGL,EAAQC,QAAQI,EAAIL,EAAQO,KAAKF,GAEtCL,EAAQO,KAAKuC,KAAK9C,EAAQC,iDAGJ,IAAViC,EAAUa,EAAVb,OACJE,EAAuBrC,KAAvBqC,UAAWpC,EAAYD,KAAZC,QACnB,GAAKoC,EACL,OAAQF,GACN,KAAK,EACHlC,EAAQqC,SAAU,EAClBrC,EAAQ+B,WAAY,EACpB,MACF,KAAK,EACH/B,EAAQsC,WAAY,EACpBtC,EAAQiC,aAAc,6CAMD,IAAVe,EAAUC,EAAVD,OACPZ,EAAuBrC,KAAvBqC,UAAWpC,EAAYD,KAAZC,QACdoC,IACLpC,EAAQU,MAAQsC,sCAGP,IACDrD,EAAUI,KAAVJ,MACRI,KAAK4C,KAAOhD,EAAMuD,8yBClBPC,cAxEb,SAAAA,IAAc,IAAAC,MAAA,mGAAAC,CAAAtD,KAAAoD,KACZpD,MAAAqD,MAAAE,EAAAH,GAAAI,KAAAxD,KAAM,GAAI,EAAG,IAAM,sDACdyD,SAAW,EAChBJ,EAAKK,OAAS,IAAIC,IAAQ,EAAG,IAAK,GAClCN,EAAKO,MAAkB,IAAXC,KAAKC,GACjBT,EAAKU,MAAkB,GAAVF,KAAKC,GAClBT,EAAKW,MAAQ,KACbX,EAAKY,KAAO,IAAIN,IAChBN,EAAKa,KAAO,IAAIC,IAChBd,EAAKa,KAAKE,IAAVC,IAAAhB,KACAA,EAAKiB,cAVOjB,wPADKkB,yDAcQ,IAATC,EAAS9E,EAAT8E,MAENC,EAINzE,KAJFkE,KAAQO,SACRT,EAGEhE,KAHFgE,MACAC,EAEEjE,KAFFiE,KACAhD,EACEjB,KADFiB,QAEGA,GAAUwD,EAASC,WAAWzD,IAAW,KAC9CgD,EACGlB,KAAK9B,GACL0D,IAAIF,GACJG,YACAC,eAAeL,EAAQR,GAC1BS,EAASL,IAAIH,4CAOZ,IAHD7D,EAGCgC,EAHDhC,SACAmC,EAECH,EAFDG,UACA5B,EACCyB,EADDzB,MAEImE,GAAa,EACjB,GAAIvC,EAAW,CAEbvC,KAAK4D,MADe,KACPxD,EAASC,EACtBL,KAAK+D,OAFe,KAEN3D,EAASE,EACvBN,KAAK+D,MAAQF,KAAKkB,IAAIlB,KAAKmB,IAAIhF,KAAK+D,MAAO,GAAc,GAAVF,KAAKC,IACpDgB,GAAa,EAEf,GAAInE,EAAO,CAETX,KAAKyD,SAAWI,KAAKkB,IAAIlB,KAAKmB,IAAIhF,KAAKyD,SADnB,KAC+B9C,EAAsB,GAAI,GAC7EmE,GAAa,EAGf,OADIA,GAAY9E,KAAKsE,cACdQ,wCAGK,IAEVrB,EAMEzD,KANFyD,SACAC,EAKE1D,KALF0D,OACAK,EAIE/D,KAJF+D,MACAU,EAGEzE,KAHFyE,SACAP,EAEElE,KAFFkE,KACAN,EACE5D,KADF4D,KAEFa,EAASQ,IACPpB,KAAKqB,IAAItB,GAAQC,KAAKqB,IAAInB,GAC1BF,KAAKsB,IAAIpB,GACTF,KAAKsB,KAAKvB,GAAQC,KAAKqB,IAAInB,IAE1Ba,YACAC,eAAepB,GAClBzD,KAAKoF,OAAOlB,EAAKO,UACjBA,EAASL,IAAIV,iiCCZF2B,cAxDb,SAAAA,IAKQ,IAAAhC,EAAA3D,EAAA,EAAA4F,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAIG,EAAA/F,EAJNgG,aAIM,IAAAD,EAJE,SAIFA,EAAAE,EAAAjG,EAHNkD,YAGM,IAAA+C,EAHC,EAGDA,EAAAC,EAAAlG,EAFNmG,oBAEM,IAAAD,EAFS,GAETA,EADHE,EACGC,EAAArG,EAAA,8HAAAsG,CAAAhG,KAAAqF,GACN,IAAMY,EAAeC,IAAUC,MAAMF,aAAaG,QAChD,yCACA,CACE,yCACA,2BACAC,KAAK,OACPD,QACA,wBACA,CACE,wBACA,6DACAC,KAAK,OAEHC,EAAc,EAAI1D,EAClB2D,EAAgBD,EAAcT,EAC9BW,EAAiBN,IAAUC,MAAMK,eAAeJ,QACpD,2CACA,CACE,2CACA,0BACA,+BACA,sCACA,8DACA,+CACA,KACAC,KAAK,OACPD,QACA,gDACA,gCAAAK,OACiCH,GADjCG,OAC+CH,EAAc,GAAM,EAAI,KAAO,GAD9E,uCAAAG,OAEmCF,GAFnCE,OAEmDF,EAAgB,GAAM,EAAI,KAAO,GAFpF,MAGE,6FACA,4CACAF,KAAK,OAlCH,OAoCNhD,EAAAqD,EAAA1G,KAAA2G,EAAAtB,GAAA7B,KAAAxD,+aAAA4G,CAAA,CACEC,KAAI,iBAAAJ,OAAmB7D,EAAnB,KAAA6D,OAA2BZ,GAC/BiB,SAAUC,IAAcC,MAAMd,IAAUC,MAAMW,UAC9CN,iBACAP,eACAgB,WAAY,CAAEC,aAAa,GAC3BC,KAAK,EACLC,QAAQ,GACLtB,MAEAJ,MAAQrC,EAAKyD,SAASO,QAAQC,MACnCjE,EAAKqC,MAAMT,IAAIS,GA/CTrC,8OANiBkE,kpBCqBZC,cAnBb,SAAAA,IAIQ,IAAAnE,EAAA3D,EAAA,EAAA4F,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAImC,EAAA/H,EAHNgI,kBAGM,IAAAD,EAHO,IAAIE,IAAM,UAGjBF,EAAA9B,EAAAjG,EAFNkD,YAEM,IAAA+C,EAFC,EAEDA,EAAAC,EAAAlG,EADNmG,oBACM,IAAAD,EADS,GACTA,+FAAAgC,CAAA5H,KAAAwH,GACN,IAAMK,EAAW,IAAIC,IAAoB,KAAM,KAAM,EAAG,GADlD,OAEND,EAASE,UAAU,EAAG,GAAI,KAC1BF,EAASG,SAAmB,GAAXnE,KAAKC,KACtBT,EAAA4E,EAAAjI,KAAAkI,EAAAV,GAAAhE,KAAAxD,KACE6H,EACA,IAAIxC,EAAa,CACfzC,OACAiD,oBAGCsC,SAASzC,MAAMT,IAAIyC,GAXlBrE,8OALS+E,kpBCWJC,cAXb,SAAAA,IAAc,mGAAAC,CAAAtI,KAAAqI,GAAAE,EAAAvI,KAAAwI,EAAAH,GAAA7E,KAAAxD,KAEV,IAAIyI,IAAqB,IAAK,GAAI,IAClC,IAAIC,IAAkB,CACpBhD,MAAO,SACPyB,KAAK,kPANMiB,kpBCuCJO,cAnCb,SAAAA,IAAc,IAAAtF,+FAAAuF,CAAA5I,KAAA2I,GAOZ,IANA,IACME,EAAS,KACThB,EAAW,IAAIiB,IACfrE,EAAW,IAAIsE,aAAaC,KAC5BpG,EAAO,IAAImG,aAJH,KAKRE,EAAM,IAAItF,IACPuF,EAAI,EAAGA,EANF,IAMaA,GAAK,EAAG,CACjCD,EAAIhE,IACFpB,KAAKsF,MAAM,KAAAtF,KAAKuF,UAAiCP,EACjDhF,KAAKsF,MAAM,KAAAtF,KAAKuF,UAChBvF,KAAKsF,MAAM,KAAAtF,KAAKuF,UAAiCP,GACjDjE,YAAYC,eAAegE,GAC7B,IAAMQ,EAAQ,EAAJH,EACVzE,EAAS4E,GAAKJ,EAAI5I,EAClBoE,EAAS4E,EAAI,GAAKJ,EAAI3I,EACtBmE,EAAS4E,EAAI,GAAKJ,EAAIK,EACtB1G,EAAKsG,GAAK,GAAKrF,KAAKsF,MAAsB,IAAhBtF,KAAKuF,UAjBrB,OAmBZvB,EAAS0B,aAAa,WAAY,IAAIC,IAAgB/E,EAAU,IAChEoD,EAAS0B,aAAa,OAAQ,IAAIC,IAAgB5G,EAAM,KACxDS,EAAAoG,EAAAzJ,KAAA0J,EAAAf,GAAAnF,KAAAxD,KACE6H,EACA,IAAI8B,IAAe,CACjBjE,MAAO,SACPyB,KAAK,EACLyC,iBAAiB,OAGhBC,KAAO,IAAIxB,EAChBhF,EAAKwG,KAAKpF,SAASQ,IAAI4D,EAAQA,IAAcA,GAC7CxF,EAAKe,IAAIf,EAAKwG,MA/BFxG,8OADQyG,uLCSlBC,aACJ,SAAAA,IAEQ,IAAApK,GAAA,EAAA2F,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,IADF1F,aACM,IAAAD,EADEE,SAASC,KACXH,+FAAAqK,CAAAhK,KAAA+J,GACN/J,KAAKiK,OAAS,IAAI7G,EAClBpD,KAAKkK,MAAQ,IAAIC,IACjBnK,KAAKJ,MAAQA,EACbI,KAAKoK,SAAW,IAAIC,IAAc,CAChCC,OAAO,EACPC,WAAW,IAEbvK,KAAKoK,SAASI,iBAAiBxK,KAAKyK,UAAUrJ,KAAKpB,OACnDA,KAAKoK,SAASM,cAAc5J,OAAO6J,kBAAoB,GACvD,IAAMC,EAAM,IAAIjD,IAAM,SACtB3H,KAAKoK,SAASS,cAAcD,GAC5BhL,EAAMkL,YAAY9K,KAAKoK,SAASW,YAChC/K,KAAKkE,KAAO,IAAI8G,IAChBhL,KAAKkE,KAAKiD,IAAM,IAAI8D,IAAQL,EAAK,MACjC5K,KAAKkE,KAAKE,IAAI,IAAI8G,IAAa,UAC/B,IAAMC,EAAQ,IAAIC,IAAiB,SAAU,IAC7CD,EAAM1G,SAASQ,IAAI,EAAG,GAAK,GAC3BjF,KAAKkE,KAAKE,IAAI+G,GACd,IAAME,EAAiB,IAAID,IAAiB,SAAU,IACtDC,EAAe5G,SAASQ,KAAK,GAAI,GAAK,GACtCjF,KAAKkE,KAAKE,IAAIiH,GACdrL,KAAKkE,KAAKE,IAAIpE,KAAKiK,OAAO/F,MAC1BlE,KAAKsL,KAAO,IAAI9D,EAAK,CAAEE,WAAY,IAAIC,IAAM,WAC7C3H,KAAKkE,KAAKE,IAAIpE,KAAKsL,MACnBtL,KAAKuL,UAAY,IAAI5C,EACrB3I,KAAKkE,KAAKE,IAAIpE,KAAKuL,WACnBzK,OAAOW,iBAAiB,SAAUzB,KAAK4B,SAASR,KAAKpB,OAAO,GAC5DA,KAAK4B,yEAuDL4J,IAAYC,gBAAkBD,IAAYC,gBAAgBrF,QACxD,0BACA,0BAEFoF,IAAYE,WAAaF,IAAYE,WAAWtF,QAC9C,4BACA,0BAEFoF,IAAYG,kBAAoBH,IAAYG,kBAAkBvF,QAC5D,0BACA,0BAEFoF,IAAYI,aAAeJ,IAAYI,aAAaxF,QAClD,uGACA,CACE,oCACA,sGACAC,KAAK,OACPD,QACA,6DACA,+GA9DQ,IAER8D,EAOElK,KAPFkK,MACAD,EAMEjK,KANFiK,OACAqB,EAKEtL,KALFsL,KACAlB,EAIEpK,KAJFoK,SACAlG,EAGElE,KAHFkE,KACAqH,EAEEvL,KAFFuL,UACAM,EACE7L,KADF6L,MAEEA,GAAOA,EAAMC,QACjB,IAAMC,EAAY,CAAEvH,MAAOX,KAAKkB,IAAImF,EAAM8B,WAAY,GAAIC,KAAM/B,EAAMgC,QAAU,KAC5ElM,KAAKmM,iBACPnM,KAAKmM,gBAAgBJ,GAEvB7H,EAAKkI,SAASC,QAAQ,SAACC,GACjBA,EAAMH,iBACRG,EAAMH,gBAAgBJ,KAGtB9B,EAAOkC,iBACTlC,EAAOkC,gBAAgBJ,GAEzBT,EAAK7G,SAASQ,IAAIgF,EAAO/F,KAAKO,SAASpE,EAAG,EAAG4J,EAAO/F,KAAKO,SAAS6E,GAClEiC,EAAU9G,SAAS1B,KAAKuI,EAAK7G,UAC7B2F,EAASmC,OAAOrI,EAAM+F,GAClB4B,GAAOA,EAAMW,yCAGR,IAEPvC,EAGEjK,KAHFiK,OACArK,EAEEI,KAFFJ,MACAwK,EACEpK,KADFoK,SAJOqC,EAMiB7M,EAAMuD,wBAAxBN,EANC4J,EAMD5J,MAAOC,EANN2J,EAMM3J,OACfsH,EAASsC,QAAQ7J,EAAOC,GACxBmH,EAAO0C,OAAS9J,EAAQC,EACxBmH,EAAO2C,8DA6BX7C,EAAM8C,gBACNC,IAAwBC,qBAAuBC,IAC/CC,IAAoBF,qBAAuBC,IAE5BjD,qvCCrHTmD,cAyBJ,SAAAA,EAAAxN,GAGG,IAAA2D,MAFDwE,EAECnI,EAFDmI,SACAM,EACCzI,EADDyI,sGACCgF,CAAAnN,KAAAkN,KACDlN,OAAAoN,EAAAF,GAAA1J,KAAAxD,KACE6H,EACAM,GAFF9E,mDAIA,IAAMgK,EAAM,IAAIC,IAChBjK,EAAKe,IAAIiJ,GACT,IAAME,EAAQ,IAAID,IAClBD,EAAIjJ,IAAImJ,GACR,IAAMC,EAAO,IAAIF,IACjBC,EAAMnJ,IAAIoJ,GACV,IAAMC,EAAU,IAAIH,IACpBC,EAAMnJ,IAAIqJ,GACV,IAAMC,EAAW,IAAIJ,IACrBC,EAAMnJ,IAAIsJ,GACV,IAAMC,EAAU,IAAIL,IACpBD,EAAIjJ,IAAIuJ,GACR,IAAMC,EAAW,IAAIN,IAjBpB,OAkBDD,EAAIjJ,IAAIwJ,GACRvK,EAAKjC,KAAK,IAAIyM,IAAS,CACrBR,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,KAEFvK,EAAKyK,MAAQ,IAAIC,IAAJC,IAAA3K,KACbA,EAAK4K,QAAUC,OAAOC,KAAKjB,EAAMkB,YAAYC,OAAO,SAACJ,EAASK,GAAV,yUAAAC,CAAA,GAC/CN,EAD+CO,EAAA,GAEjDF,EAASjL,EAAKyK,MAAMW,WAAWvB,EAAMkB,WAAWE,OAC/C,IACJjL,EAAK0I,UAAY,OACjB1I,EAAK4K,QAAQS,KAAKC,UAAY,GAC9BtL,EAAK4K,QAAQS,KAAKE,OAClBvL,EAAKwL,YAAc,IAAI1O,IACvBkD,EAAKyL,YAAc,IAAInL,IArCtBN,8OA5Be0L,0DACOC,GACvB,IAAMC,EAAS,IAAIC,IACnBhB,OAAOC,KAAKa,GAAO3C,QAAQ,SAAC8C,GAC1BH,EAAMG,GAAMC,MAAM/C,QAAQ,SAACgD,GACzBA,EAAKC,cAAgBpC,EAAMqC,MAAMJ,KAEnCF,EAAOO,MAAMR,EAAMG,MAErBF,EAAOG,MAAM/C,QAAQ,SAACgD,GACpBJ,EAAOQ,SAASJ,EAAKK,GAAGC,KAAON,EAAKC,cACpCL,EAAOQ,SAASJ,EAAKO,GAAGD,KAAON,EAAKC,cACpCL,EAAOQ,SAASJ,EAAKQ,GAAGF,KAAON,EAAKC,cACpCD,EAAKC,cAAgB,IAEvBL,EAAOQ,SAASpD,QAAQ,SAACyD,GACvBb,EAAOc,YAAYC,KAAK,IAAIC,IAAQH,EAAOH,KAAM,EAAG,EAAG,IACvDV,EAAOiB,YAAYF,KAAK,IAAIC,IAAQ,EAAG,EAAG,EAAG,MAE/C,IAAMpI,GAAY,IAAIiB,KAAkBqH,aAAalB,GAGrD,OAFApH,EAASuI,uBACTvI,EAASwI,wBACFxI,oDA8CkB,IAATrD,EAASpC,EAAToC,MAEgB8L,EAQ5BtQ,KARFiO,QAAWsC,KAAQ5B,UACnB6B,EAOExQ,KAPFwQ,YACAC,EAMEzQ,KANFyQ,kBACA3C,EAKE9N,KALF8N,MACAgB,EAIE9O,KAJF8O,YACArK,EAGEzE,KAHFyE,SACAiM,EAEE1Q,KAFF0Q,cACAC,EACE3Q,KADF2Q,eAGF,GADA7C,EAAM8C,OAAOpM,GACTmM,EAAgB,CAClB,IAAME,EAAerM,EAAQkM,EACvBI,EAAgBH,EAAiB3Q,KAAK+Q,SAASzQ,EACrDN,KAAK+Q,SAASzQ,GAAKuD,KAAKkB,IACtBlB,KAAKmB,IACH8L,GACCD,GAEHA,GAEEhN,KAAKmN,IAAIF,IAAkBD,IAC7B7Q,KAAK2Q,gBAAiB,GAG1B,GAAKH,EAAL,CACA,IAAM/M,EAAWgB,EAASC,WAAW8L,GAC/BvM,EAAe,IAARO,EAAc8L,EAC3B7L,EAASL,IACP0K,EACG/L,KAAKyN,GACL7L,IAAIF,GACJG,YACAC,eAAehB,KAAKkB,IAAItB,EAAUQ,KAEnCR,GAAYQ,IACdjE,KAAKiR,aAAa,QAClBjR,KAAKwQ,aAAc,EACfC,IACFA,EAAkBS,SAAU,GAE1BlR,KAAKmR,uBACPnR,KAAKmR,+DAKEpF,GAAW,IACdkC,EAAYjO,KAAZiO,QACJjO,KAAK+L,YAAcA,IACvBkC,EAAQjO,KAAK+L,WAAWqF,QAAQ,IAChCpR,KAAK+L,UAAYA,EACjBkC,EAAQjO,KAAK+L,WACVsF,QACAC,OAAO,IACP1C,uCAGE2C,GAAO,IACJd,EAAsBzQ,KAAtByQ,kBACRzQ,KAAKiR,aAAa,QAClBjR,KAAKwQ,YAAce,EAAMvK,QACrByJ,IACFA,EAAkBhM,SAAS1B,KAAK/C,KAAKwQ,aACrCC,EAAkBS,SAAU,GAE9BlR,KAAKwR,OAAOD,kCAGPA,GAGL,IAHY,IACJ9M,EAA0BzE,KAA1ByE,SACFgN,EAD4BzR,KAAhB6O,YACQ5J,IAAIsM,EAAMlR,EAAIoE,EAASpE,EAAGkR,EAAMjI,EAAI7E,EAAS6E,GAAGmI,QACnEzR,KAAK+Q,SAASzQ,GAAKuD,KAAKC,IAAI9D,KAAK+Q,SAASzQ,GAAe,EAAVuD,KAAKC,GAC3D,KAAO9D,KAAK+Q,SAASzQ,EAAIuD,KAAKC,IAAI9D,KAAK+Q,SAASzQ,GAAe,EAAVuD,KAAKC,GAE1D,IADA9D,KAAK2Q,eAA4B,GAAV9M,KAAKC,GAAY2N,EACjCzR,KAAK2Q,gBAAkB9M,KAAKC,IAAI9D,KAAK2Q,gBAA4B,EAAV9M,KAAKC,GACnE,KAAO9D,KAAK2Q,eAAiB9M,KAAKC,IAAI9D,KAAK2Q,gBAA4B,EAAV9M,KAAKC,GAC7D9D,KAAK2Q,eAAiB3Q,KAAK+Q,SAASzQ,EAAKuD,KAAKC,GACjD9D,KAAK2Q,gBAA4B,EAAV9M,KAAKC,GAClB9D,KAAK2Q,eAAiB3Q,KAAK+Q,SAASzQ,GAAMuD,KAAKC,KACzD9D,KAAK2Q,gBAA4B,EAAV9M,KAAKC,IAE9B9D,KAAK0Q,cAAkE,IAAlD7M,KAAKmN,IAAIhR,KAAK2Q,eAAiB3Q,KAAK+Q,SAASzQ,YAItE4M,EAAMqC,MAAQ,CACZlC,IAAK,EACLE,MAAO,EACPC,KAAM,EACNC,QAAS,EACTC,SAAU,EACVC,QAAS,EACTC,SAAU,GAGZ,IAAM8D,EAAc,SAACrR,EAAGC,EAAGgJ,GAAP,OAAc,IAAIqI,KAAcC,aAAa,IAAIC,IAAMxR,EAAGC,EAAGgJ,IAAIwI,WAErF5E,EAAMkB,WAAa,CACjBM,KACE,IAAIqD,IAAc,OAAQ,EAAG,CAC3B,IAAIjF,IAAJ,UAAArG,OACYyG,EAAMqC,MAAMhC,MADxB,gBAEE,IAAIxE,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJiJ,EACKN,EAAY,GAAc,IAAX7N,KAAKC,GAAY,IADrC2C,OAAAuL,EAEKN,EAAY,EAAa,IAAV7N,KAAKC,GAAW,IAFpCkO,EAGKN,EAAY,GAAc,IAAX7N,KAAKC,GAAY,OAGvC,IAAIgJ,IAAJ,UAAArG,OACYyG,EAAMqC,MAAM/B,KADxB,gBAEE,IAAIzE,aAAa,CACf,EACA,IACA,IAEF,IAAIA,aAAJiJ,EACKN,GAAuB,KAAX7N,KAAKC,GAAa,GAAc,KAAXD,KAAKC,KAD3C2C,OAAAuL,EAEKN,GAAuB,KAAX7N,KAAKC,GAAa,EAAa,KAAVD,KAAKC,KAF3CkO,EAGKN,GAAuB,KAAX7N,KAAKC,GAAa,GAAc,KAAXD,KAAKC,QAG7C,IAAIgJ,IAAJ,UAAArG,OACYyG,EAAMqC,MAAM9B,QADxB,gBAEE,IAAI1E,aAAa,CACf,EACA,IACA,IAEF,IAAIA,aAAJiJ,EACKN,EAAY,EAAG,GAAc,IAAX7N,KAAKC,KAD5B2C,OAAAuL,EAEKN,EAAY,EAAG,GAAc,GAAX7N,KAAKC,KAF5BkO,EAGKN,EAAY,EAAG,GAAc,IAAX7N,KAAKC,QAG9B,IAAIgJ,IAAJ,UAAArG,OACYyG,EAAMqC,MAAM7B,SADxB,gBAEE,IAAI3E,aAAa,CACf,EACA,IACA,IAEF,IAAIA,aAAJiJ,EACKN,EAAY,EAAG,EAAa,IAAV7N,KAAKC,KAD5B2C,OAAAuL,EAEKN,EAAY,EAAG,EAAa,GAAV7N,KAAKC,KAF5BkO,EAGKN,EAAY,EAAG,EAAa,IAAV7N,KAAKC,UAKlCyM,KACE,IAAIwB,IAAc,OAAQ,EAAG,CAC3B,IAAIjF,IAAJ,UAAArG,OACYyG,EAAMqC,MAAMhC,MADxB,gBAEE,IAAIxE,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJiJ,EACKN,GAAuB,IAAX7N,KAAKC,GAAY,EAAa,IAAVD,KAAKC,KAD1C2C,OAAAuL,EAEKN,EAAsB,IAAV7N,KAAKC,GAAW,GAAc,IAAXD,KAAKC,KAFzCkO,EAGKN,GAAuB,IAAX7N,KAAKC,GAAY,EAAa,IAAVD,KAAKC,QAG5C,IAAIgJ,IAAJ,UAAArG,OACYyG,EAAMqC,MAAM/B,KADxB,gBAEE,IAAIzE,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJiJ,EACKN,EAAY,EAAG,GAAc,KAAX7N,KAAKC,KAD5B2C,OAAAuL,EAEKN,EAAY,EAAG,EAAa,KAAV7N,KAAKC,KAF5BkO,EAGKN,EAAY,EAAG,GAAc,KAAX7N,KAAKC,QAG9B,IAAIgJ,IAAJ,UAAArG,OACYyG,EAAMqC,MAAM9B,QADxB,gBAEE,IAAI1E,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJiJ,EACKN,EAAsB,GAAV7N,KAAKC,GAAU,EAAG,IADnC2C,OAAAuL,EAEKN,GAAuB,GAAX7N,KAAKC,GAAW,GAAc,GAAXD,KAAKC,KAFzCkO,EAGKN,EAAsB,GAAV7N,KAAKC,GAAU,EAAG,OAGrC,IAAIgJ,IAAJ,UAAArG,OACYyG,EAAMqC,MAAM7B,SADxB,gBAEE,IAAI3E,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJiJ,EACKN,GAAuB,GAAX7N,KAAKC,GAAW,EAAa,GAAVD,KAAKC,KADzC2C,OAAAuL,EAEKN,EAAsB,GAAV7N,KAAKC,GAAU,EAAG,IAFnCkO,EAGKN,GAAuB,GAAX7N,KAAKC,GAAW,EAAa,GAAVD,KAAKC,QAG3C,IAAIgJ,IAAJ,UAAArG,OACYyG,EAAMqC,MAAM5B,QADxB,gBAEE,IAAI5E,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJiJ,EACKN,GAAuB,IAAX7N,KAAKC,GAAY,EAAa,IAAVD,KAAKC,KAD1C2C,OAAAuL,EAEKN,EAAsB,IAAV7N,KAAKC,GAAW,GAAc,IAAXD,KAAKC,KAFzCkO,EAGKN,GAAuB,IAAX7N,KAAKC,GAAY,EAAa,IAAVD,KAAKC,QAG5C,IAAIgJ,IAAJ,UAAArG,OACYyG,EAAMqC,MAAM3B,SADxB,gBAEE,IAAI7E,aAAa,CACf,EACA,GACA,IAEF,IAAIA,aAAJiJ,EACKN,EAAsB,IAAV7N,KAAKC,GAAW,GAAc,IAAXD,KAAKC,KADzC2C,OAAAuL,EAEKN,GAAuB,IAAX7N,KAAKC,GAAY,EAAa,IAAVD,KAAKC,KAF1CkO,EAGKN,EAAsB,IAAV7N,KAAKC,GAAW,GAAc,IAAXD,KAAKC,WAOlCoJ,4kBC3TT+E,eACJ,SAAAA,EAAYC,GAAS,IAAA7O,mGAAA8O,CAAAnS,KAAAiS,KACnBjS,KADmB,IAKCoS,EALDC,MACnBhP,MAAAiP,EAAAL,GAAAzO,KAAAxD,KAAM,CACJ6H,SAAUoK,EAAKpK,SAASqK,GACxB/J,SAAU8J,EAAK9J,6DAEToK,SAAYH,MALD,OAMnBlE,OAAOC,KAAK8D,EAAKG,OAAO/F,QAAQ,SAACsD,GAC/ByC,EAAMlF,EAAMqC,MAAMI,IAAOlL,SAAS1B,KAAKkP,EAAKG,MAAMzC,MAPjCtM,+OADJ6J,QAanB+E,GAAKG,MAAQ,CACX/E,IAAK,IAAI1J,IAAQ,EAAG,GAAK,GACzB4J,MAAO,IAAI5J,IAAQ,EAAG,EAAG,GACzB6J,KAAM,IAAI7J,IAAQ,EAAG,GAAK,GAC1B8J,QAAS,IAAI9J,KAAS,IAAM,KAAO,GACnC+J,SAAU,IAAI/J,IAAQ,IAAM,KAAO,GACnCgK,QAAS,IAAIhK,KAAS,KAAO,EAAG,GAChCiK,SAAU,IAAIjK,IAAQ,KAAO,EAAG,IAGlCsO,GAAKpK,SAAW,SAACqK,GACf,IAAM3E,EAAQ,IAAIiF,IAAiB,KAAO,IAAM,GAAK,GACrDjF,EAAMxF,UAAU,EAAG,IAAM,GACzBwF,EAAM6B,MAAM/C,QAAQ,SAACgD,GACnBA,EAAK3J,MAAMT,IAAIiN,EAAQ3E,OAAS,YAElC,IAAMC,EAAO,IAAIiF,IAAe,GAAK,EAAG,GACxCjF,EAAKzF,UAAU,EAAG,GAAK,GACvByF,EAAK4B,MAAM/C,QAAQ,SAACgD,GAClBA,EAAK3J,MAAMT,IAAIiN,EAAQ1E,QAEzB,IAAMkF,EAAU,IAAID,IAAe,KACnCC,EAAQtD,MAAM/C,QAAQ,SAACgD,GACrBA,EAAK3J,MAAMT,IAAIiN,EAAQS,QAEzB,IAAMC,EAAWF,EAAQ1L,QACzB0L,EAAQ3K,WAAW,GAAK,GAAK,KAC7B6K,EAAS7K,UAAU,GAAK,GAAK,KAC7ByF,EAAKgC,MAAMkD,GACXlF,EAAKgC,MAAMoD,GACX,IAAMnF,EAAU,IAAI+E,IAAiB,IAAM,IAAM,GAAK,GACtD/E,EAAQ2B,MAAM/C,QAAQ,SAACgD,GACrBA,EAAK3J,MAAMT,IAAIiN,EAAQW,QAEzB,IAAMnF,EAAWD,EAAQzG,QACzByG,EAAQ1F,UAAU,GAAI,GAAK,GAC3B2F,EAAS3F,UAAU,GAAI,GAAK,GAC5B,IAAM4F,EAAU,IAAI6E,IAAiB,IAAM,IAAM,GAAK,GACtD7E,EAAQyB,MAAM/C,QAAQ,SAACgD,GACrBA,EAAK3J,MAAMT,IAAIiN,EAAQY,QAEzB,IAAMlF,EAAWD,EAAQ3G,QACzB2G,EAAQ5F,UAAU,GAAI,IAAM,GAC5B6F,EAAS7F,UAAU,GAAI,IAAM,GAC7B,IAAMF,EAAWqF,EAAM6F,kBAAkB,CACvCxF,QACAC,OACAC,UACAC,WACAC,UACAC,aAIF,OAFA/F,EAASmL,eAAeC,OAAOhO,IAAI,EAAG,GAAK,GAC3C4C,EAASmL,eAAenK,OAAS,GAC1BhB,GAGToK,GAAK9J,SAAW,IAAI+K,IAAkB,CACpCC,UAAU,EACVC,aAAcC,MAGDpB,8zBCrDAqB,eAxBb,SAAAA,IAAc,IAAAjQ,+FAAAkQ,CAAAvT,KAAAsT,GACZ,IAAMzL,EAAW,IAAI2L,IAAqB,IAAM,IADpC,OAEZ3L,EAASG,SAAmB,GAAXnE,KAAKC,IACtB+D,EAASE,UAAU,EAAG,KAAO,IAC7B1E,EAAAoQ,GAAAzT,KAAA0T,GAAAJ,GAAA9P,KAAAxD,KACE6H,EACA,IAAIqL,IAAkB,CACpBxN,MAAO,QACPiO,aAAa,OAGZzC,SAAU,EAXH7N,yPADK+E,yDAeO,IAAR6D,EAAQvM,EAARuM,KACR9D,EAA6BnI,KAA7BmI,SAAUyL,EAAmB5T,KAAnB4T,MAClB,GADqC5T,KAAZkR,QACzB,CACA,IAAM2C,EAAkC,MAA1B,EAAIhQ,KAAKsB,IAAW,EAAP8G,IACrB6H,EAAI,IAAOD,EACjBD,EAAM3O,IAAI6O,EAAG,EAAGA,GAChB3L,EAAS4L,QAAU,IAAOF,mxBCxBf,IAAAG,GAAA,SAAAtU,GAAsB,IAAnBuU,EAAmBvU,EAAnBuU,MAAOC,EAAYxU,EAAZwU,MACjBC,EAAO,CACXC,MAAOC,GAAIC,MAAM,KAAKC,IAAI,SAACC,EAAGtL,GAC5B,IAAMuL,EAAO,IAAIxC,GAAK,CACpBY,KAAM,QACNF,KAAY,IAANzJ,EAAU,SAAY,SAAWrF,KAAKuF,SAC5CoE,KAAY,IAANtE,EAAU,QAAY,SAAWrF,KAAKuF,SAC5C0J,KAAM,QACNvF,MAAa,IAANrE,EAAU,SAAY,SAAWrF,KAAKuF,WAI/C,OAFAqL,EAAKhQ,SAASQ,IAAIpB,KAAKsF,OAAOD,EAAI,GAAK,KAAOA,EAAI,GAAK,GAAM,EAAI,GAAK,GAAI,EAAG,GAC7EgL,EAAMhQ,KAAKE,IAAIqQ,GACRA,IAETC,OAbW,SAaJnD,GAAO,IACDoD,EAA4BpD,EAA/BlR,EAAiBuU,EAAcrD,EAAjBjI,EACtBtJ,KAAKoU,MAAM/H,QAAQ,SAACoI,EAAMvL,GACxBqI,EAAMlR,EAAIsU,EAAY9Q,KAAKsF,OAAOD,EAAI,GAAK,KAAOA,EAAI,GAAK,GAAM,EAAI,GAAK,GAC1EqI,EAAMjI,EAAIsL,GAAuC,EAA3B/Q,KAAKsF,OAAOD,EAAI,GAAK,GACnC,EAAJA,IACFqI,EAAMlR,GAAsB,EAAhBwD,KAAKuF,SAAgB,EACjCmI,EAAMjI,GAAsB,EAAhBzF,KAAKuF,SAAgB,EACjCqL,EAAKxG,QAAQsC,KAAK5B,UAAY,GAAsB,GAAhB9K,KAAKuF,UAE3CqL,EAAKC,OAAOnD,OAKXsD,EA7B4BC,GA6BhBX,EAAKC,MA7BW,MA8BnCS,EAASpE,kBAAoB,IAAI6C,GACjCY,EAAMhQ,KAAKE,IAAIyQ,EAASpE,mBACxByD,EAAMjK,OAAOhJ,OAAS4T,EAASpQ,SAE/ByP,EAAMjK,OAAOxG,SAAW,EACxByQ,EAAMjK,OAAOlG,MAAkB,KAAVF,KAAKC,GAC1BoQ,EAAMjK,OAAO3F,cAEb4P,EAAM/H,gBAAkB,WAAM,IACpBlC,EAAiBiK,EAAjBjK,OAAQqB,EAAS4I,EAAT5I,KACVrL,EAAUgU,EAAMc,kBAEtB,GADA9K,EAAO+K,aAAa/U,GAChBA,EAAQ+B,UAAW,KACbvB,EAAcR,EAAdQ,UACRA,EAAUwU,cAAchV,EAAQM,WAAY0J,GAC5C,IAAMiL,EAAMzU,EAAU0U,gBAAgB7J,GAAM,GAC5C,IAAK4J,EAAK,OACVf,EAAKO,OAAOQ,EAAI3D,8zBCrChB6D,yBA2BJ,SAAAA,IAGQ,IAAA/R,EAAAjB,EAAA,EAAAkD,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAI+P,EAAAjT,EAFNkT,mBAEM,IAAAD,KAAAE,EAAAnT,EADNoT,cACM,IAAAD,kGAAAE,CAAAzV,KAAAoV,GACN,IAAMnG,EAAS,IAAIC,IACb/F,EAAQiM,EAAQM,aAAa,CACjCvN,SAAU,EACVwN,YAAa,eAIf,GAFAxM,EAAMpB,UAAU,GAAI,KAAQ,GAC5BkH,EAAOO,MAAMrG,GACTmM,EAAa,CACf,IAAMM,EAAOR,EAAQM,aAAa,CAChC7S,MAAO,IACPsF,SAAU,IAEZyN,EAAK7N,WAAW,KAAO,IAAM,IAC7BkH,EAAOO,MAAMoG,GACbA,EAAK7N,UAAU,IAAM,EAAG,GACxBkH,EAAOO,MAAMoG,OACR,CACL,IAAMA,EAAOR,EAAQM,aAAa,CAChCvN,SAAU,IAEZyN,EAAK7N,UAAU,EAAG,IAAM,IACxBkH,EAAOO,MAAMoG,GAEf,IAAMA,EAAOR,EAAQM,aAAa,CAChC5S,OAAQ,EAAI,EACZqF,SAAU,IAKZ,GAHAyN,EAAKC,QAAQhS,KAAKC,IAClB8R,EAAK7N,UAAU,EAAG,EAAI,EAAI,EAAG,IAC7BkH,EAAOO,MAAMoG,GACTJ,EAAQ,CACV,IAAMI,EAAOR,EAAQM,aAAa,CAChC5S,OAAQ,EAAI,EACZqF,SAAU,IAEZyN,EAAKC,QAAkB,GAAVhS,KAAKC,IAAuB,SAAX0R,EAAoB,GAAK,IACvDI,EAAK7N,UAAqB,SAAXyN,GAAqB,GAAM,GAAK,EAAI,EAAI,EAAG,GAC1DvG,EAAOO,MAAMoG,GAtCT,OAwCNvS,EAAAyS,GAAA9V,KAAA+V,GAAAX,GAAA5R,KAAAxD,MACG,IAAI8I,KAAkBqH,aAAalB,GACpC,CACE,IAAI5J,EAAa,CACf2Q,KAAMC,IACN7C,aAAcC,MAEhB,IAAIH,IAAkB,CACpB8C,KAAMC,IACN7C,aAAcC,UAIfO,MAAM7Q,KAAKqS,EAAQxB,OArDlBvQ,+OA9BY+E,qDAMjB,IAAA8N,EAAAxW,EAJDmD,aAIC,IAAAqT,EAJO,EAIPA,EAAAC,EAAAzW,EAHDoD,cAGC,IAAAqT,EAHQ,EAGRA,EAFDhO,EAECzI,EAFDyI,SACAwN,EACCjW,EADDiW,YAEMC,EAAO,IAAIQ,IACfvT,EACAC,EACAe,KAAKwS,KAAKxT,EAAQuS,EAAQxB,MAAMvT,GAChCwD,KAAKwS,KAAKvT,GAA0B,eAAhB6S,EAA+BP,EAAQxB,MAAMvT,EAAI+U,EAAQxB,MAAMtT,KAEjE,eAAhBqV,GACFC,EAAK5N,SAAmB,GAAXnE,KAAKC,IAEpB,IAAM4B,EAAQ,IAAIiC,IAQlB,OAPAiO,EAAKxG,MAAM/C,QAAQ,SAACgD,EAAMnG,GACpBA,EAAI,GAAM,GACZxD,EAAM4Q,OAAOzS,KAAKuF,SAAU,MAAQ,IAAwB,KAAhBvF,KAAKuF,UAEnDiG,EAAKC,cAAgBnH,EACrBkH,EAAK3J,MAAM3C,KAAK2C,KAEXkQ,iDA+DXR,GAAQxB,MAAQ,IAAIjQ,IAAQ,EAAG,EAAG,GAEnByR,upBC5FTmB,eACJ,SAAAA,EAAA7W,GAGG,IAAA2D,EAFDmT,EAEC9W,EAFD8W,OACAC,EACC/W,EADD+W,oGACCC,CAAA1W,KAAAuW,GAED,IADA,IAAMtH,EAAS,IAAIC,IACVhG,EAAI,EAAGA,GAAKsN,EAAQtN,GAAK,EAAG,CACnC,GAAU,IAANA,GAAWA,IAAMsN,EAAQ,CAC3B,IAAMrN,EAAQ,IAAIiN,IAAc,EAAG,GAInC,GAHAjN,EAAMnB,SAAmB,GAAXnE,KAAKC,IACnBqF,EAAMpB,UAAU,EAAGmB,EAAG,GACtB+F,EAAOO,MAAMrG,GACTD,IAAMsN,EAAQ,MAEpB,IAAMG,EAAO,IAAIP,IAAc,EAAG,GAClCO,EAAK5O,UAAU,EAAGmB,EAAI,IAAM,IAC5B+F,EAAOO,MAAMmH,GACb,IAAMX,EAAO,IAAII,IAAc,EAAG,GAClCJ,EAAKH,SAAmB,GAAXhS,KAAKC,IAClBkS,EAAKjO,WAAW,GAAKmB,EAAI,GAAK,GAC9B+F,EAAOO,MAAMwG,GACbA,EAAKjO,UAAU,EAAG,EAAG,GACrBkH,EAAOO,MAAMwG,GAlBd,OAoBD/G,EAAOlH,UAAU,EAAG,GAAI,MACxB1E,EAAAuT,GAAA5W,KAAA6W,GAAAN,GAAA/S,KAAAxD,MACG,IAAI8I,KAAkBqH,aAAalB,GACpC,IAAIiE,IAAkB,CACpBxN,MAAO6Q,EAAM7Q,MACbsQ,KAAMC,SAGLxR,SAASpE,EAAe,EAAXoW,EAAOpW,EACzBgD,EAAKoB,SAASnE,EAAe,EAAXmW,EAAOnW,EACzB+C,EAAKuQ,MAAM7Q,KAAKwT,EAAM3C,OA9BrBvQ,+OAJe+E,aAsCpBmO,GAAM7Q,MAAQ,QACd6Q,GAAM3C,MAAQ,IAAIjQ,IAAQ,EAAG,EAAG,GAEjB4S,8zBCiBAO,eA9Db,SAAAA,EAAApX,GAIG,IAAA2D,EAHD+Q,EAGC1U,EAHD0U,MACA2C,EAECrX,EAFDqX,UACAP,EACC9W,EADD8W,OACC,mGAAAQ,CAAAhX,KAAA8W,IACDzT,EAAA4T,GAAAjX,KAAAkX,GAAAJ,GAAAtT,KAAAxD,QACKoU,MAAQA,EAAMG,IAAI,SAAAnS,GAGjB,IAFJ+U,EAEI/U,EAFJ+U,QACA1S,EACIrC,EADJqC,SAEM2S,EAAO,IAAInF,GAAKkF,GAGtB,OAFAC,EAAK3S,SAAS1B,KAAK0B,GACnBpB,EAAKe,IAAIgT,GACFA,IAET/T,EAAK0T,UAAYA,EAAUxC,IAAI,SAAA7R,GAGzB,IAFJ8T,EAEI9T,EAFJ8T,OACAC,EACI/T,EADJ+T,OAEMY,EAAQ,IAAId,GAAM,CAAEC,SAAQC,WAElC,OADApT,EAAKe,IAAIiT,GACF,CACLb,SACAC,SACAY,WAGJhU,EAAKmT,OAASA,EAAOjC,IAAI,SAAC+C,EAAOnO,GAAR,OAAkBmO,EAAM/C,IAAI,SAAA/R,EAAW+U,GAAS/U,EAAjBgV,KAAiB,IACnEhC,GAAS,EACA,IAAT+B,EAAY/B,EAAS,OAChB+B,IAASD,EAAM/R,OAAS,IAAGiQ,EAAS,SAC7C,IAUI4B,EAVE9B,GASC,IARLjS,EAAK0T,UAAUU,UAAU,SAAAzU,GAAA,IACvBwT,EADuBxT,EACvBwT,OACAC,EAFuBzT,EAEvByT,OAFuB,OAIvBA,EAAOpW,IAAMkX,EAAO1T,KAAKsF,MAAMmO,EAAM/R,OAAS,IAC3CkR,EAAOnW,GAAK6I,GACZsN,EAAOnW,EAAIkW,EAASrN,IAc3B,OARIiO,EAAO,IAAIhC,GAAQ,CACjBE,cACAE,YAID/Q,SAASQ,IAAW,EAAPsS,EAA2C,EAA/B1T,KAAKsF,MAAMmO,EAAM/R,OAAS,GAAiB,EAAR4D,EAAW,GAC5E9F,EAAKe,IAAIgT,GACFA,MAhDR/T,yPALkBc,sDAyDL4H,GACI/L,KAAVoU,MACF/H,QAAQ,SAAAoI,GAAI,OAAIA,EAAKtI,gBAAgBJ,kYC3DhC,IAAA2L,GAAA,SAAAhY,GAAsB,IAAnBuU,EAAmBvU,EAAnBuU,MAAOC,EAAYxU,EAAZwU,MAEjBO,EAAO,IAAIxC,GAAK,CACpBY,KAAM,QACNF,KAAM,SACNnF,KAAM,QACNsF,KAAM,QACNvF,MAAO,WAETkH,EAAKhQ,SAASQ,IAAI,EAAG,EAAG,GACxBwP,EAAKhE,kBAAoB,IAAI6C,GAC7B,IAAMqE,EAAc,IAAIhU,IACxB8Q,EAAKtD,sBAAwB,WAC3B+C,EAAMjK,OAAO2N,iBAAiBD,GAC9BlD,EAAKjD,OAAOmG,IAEdzD,EAAMhQ,KAAKE,IAAIqQ,GACfP,EAAMhQ,KAAKE,IAAIqQ,EAAKhE,mBACpByD,EAAMjK,OAAOhJ,OAASwT,EAAKhQ,SAG3B,IAAMoT,EAAW,IAAIf,GAAS,CAC5B1C,MAAO0D,GAAIxD,MAAM,IAAIC,IAAI,iBAAO,CAC9B4C,QAAS,CACPtE,KAAM,QACNF,KAAM,SAAW9O,KAAKuF,SACtBoE,KAAM,SAAW3J,KAAKuF,SACtB0J,KAAM,QACNvF,MAAO,SAAW1J,KAAKuF,UAEzB3E,SAAU,IAAId,IACgB,GAAX,EAAhBE,KAAKuF,SAAe,KACW,EAAhCvF,KAAKsF,MAAsB,EAAhBtF,KAAKuF,UAChB,MAGJ2N,UAAW,CACT,CACEP,OAAQ,EACRC,OAAQ,CAAEpW,GAAI,EAAGC,EAAG,IAEtB,CACEkW,OAAQ,EACRC,OAAQ,CAAEpW,EAAG,EAAGC,EAAG,KAGvBkW,OAAQ,CACNsB,GAAIxD,MAAM,IAAIC,IAAI,iBAAO,CAAEiD,KAAM,aACjCM,GAAIxD,MAAM,IAAIC,IAAI,iBAAO,CAAEiD,KAAM,aACjCM,GAAIxD,MAAM,IAAIC,IAAI,iBAAO,CAAEiD,KAAM,aACjCM,GAAIxD,MAAM,IAAIC,IAAI,iBAAO,CAAEiD,KAAM,gBAGrCtD,EAAMhQ,KAAKE,IAAIyT,GAIf3D,EAAM/H,gBAAkB,WAAM,IACpBlC,EAAWiK,EAAXjK,OACFhK,EAAUgU,EAAMc,kBAItB,GAHI9K,EAAO+K,aAAa/U,KAAawU,EAAKjE,aACxCiE,EAAKtD,wBAEHlR,EAAQ+B,UAAW,KACbvB,EAAcR,EAAdQ,UACRA,EAAUwU,cAAchV,EAAQM,WAAY0J,GAC5C,IAAMiL,EAAMzU,EAAUsX,iBAAVD,GAEPD,EAASrB,OAZJ,KAaP,GACH,IAAKtB,EAAK,OACVA,EAAI3D,MAAMlR,EAAIwD,KAAKkB,IAAIlB,KAAKmB,IAAIkQ,EAAI3D,MAAMlR,GAAI,KAAM,KACpD6U,EAAI3D,MAAMjR,EAAI4U,EAAI8C,OAAOvT,SAASnE,EAClC4U,EAAI3D,MAAMjI,EAAIzF,KAAKkB,IAAIlB,KAAKmB,IAAIkQ,EAAI3D,MAAMjI,GAAI,KAAM,KACpDmL,EAAKC,OAAOQ,EAAI3D,UC3EhB3R,GAAQC,SAASoY,eAAe,SAChChE,GAAQ,IAAIxU,EAAM,CAAEG,WACpBsU,GAAQ,IAAInK,EAAM,CAAEnK,WAE1BqU,GAAMrT,QAAQsX,KAAK,MAAO,WACxBrY,SAASoY,eAAe,WAAWE,MAAMC,QAAU,OACnDnE,GAAM5R,WAAY,IAGpB,IAAIgW,GAAQvX,OAAOwX,SAASC,KAAKC,MAAM,KAAKC,MAAM,GAAG,GAChDC,EAAOL,MACVvX,OAAOwX,SAASC,KAAO,QACvBF,GAAQ,QAEVK,EAAOL,IAAO,CAAEpE,SAAOC","file":"code/main.961af2c1203a7f9f90c4.js","sourcesContent":["import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      filtered: true,\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown({ button }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove(e, [x, y]) {\n    const { isEnabled, pointer, size: { width, height } } = this;\n    if (!isEnabled) return;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.size = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.01, 2048);\n    this.distance = 4;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.65;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, 0), Math.PI * 0.5);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 8);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      offset,\n      pitch,\n      position,\n      root,\n      tilt,\n    } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance);\n    this.lookAt(root.position);\n    position.add(offset);\n  }\n}\n\nexport default Camera;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.phong.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.phong.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.phong.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import {\n  Color,\n  Mesh,\n  PlaneBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new PlaneBufferGeometry(2048, 2048, 2, 2);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0x999999,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\nimport Starfield from './starfield';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.025);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.2);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.starfield = new Starfield();\n    this.root.add(this.starfield);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      starfield,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    starfield.position.copy(grid.position);\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n      if (this.onDestinationCallback) {\n        this.onDestinationCallback();\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point) {\n    const { destinationMarker } = this;\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    this.faceTo(point);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walkTo(point);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = () => {\n    const { camera, grid } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObject(grid)[0];\n      if (!hit) return;\n      pack.walkTo(hit.point);\n    }\n  };\n};\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Hallway extends Mesh {\n  static generateWall({\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Hallway.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Hallway.scale.x : Hallway.scale.y))\n    );\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.0125, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      face.color.copy(color);\n    });\n    return wall;\n  }\n\n  constructor({\n    hasElevator = false,\n    isEdge = false,\n  } = {}) {\n    const merged = new Geometry();\n    const floor = Hallway.generateWall({\n      material: 0,\n      orientation: 'horizontal',\n    });\n    floor.translate(0, -0.0005, 0);\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Hallway.generateWall({\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Hallway.generateWall({\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    const wall = Hallway.generateWall({\n      height: 1 / 3,\n      material: 1,\n    });\n    wall.rotateY(Math.PI);\n    wall.translate(0, 1 / 3 / 2, 0.5);\n    merged.merge(wall);\n    if (isEdge) {\n      const wall = Hallway.generateWall({\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n      wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n      merged.merge(wall);\n    }\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n    this.scale.copy(Hallway.scale);\n  }\n}\n\nHallway.scale = new Vector3(4, 3, 4);\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    floors,\n    origin,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.translate(0, 0, -1.5);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color: Shaft.color,\n        side: DoubleSide,\n      })\n    );\n    this.position.x = origin.x * 4;\n    this.position.y = origin.y * 3;\n    this.scale.copy(Shaft.scale);\n  }\n}\n\nShaft.color = 0x333333;\nShaft.scale = new Vector3(2, 3, 2);\n\nexport default Shaft;\n","import { Object3D } from 'three';\nimport Dude from '@/actors/dude';\nimport Hallway from './hallway';\nimport Shaft from './shaft';\n\nclass Building extends Object3D {\n  constructor({\n    dudes,\n    elevators,\n    floors,\n  }) {\n    super();\n    this.dudes = dudes.map(({\n      pallete,\n      position,\n    }) => {\n      const mesh = new Dude(pallete);\n      mesh.position.copy(position);\n      this.add(mesh);\n      return mesh;\n    });\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const shaft = new Shaft({ floors, origin });\n      this.add(shaft);\n      return {\n        floors,\n        origin,\n        shaft,\n      };\n    });\n    this.floors = floors.map((rooms, floor) => rooms.map(({ type }, room) => {\n      let isEdge = false;\n      if (room === 0) isEdge = 'left';\n      else if (room === rooms.length - 1) isEdge = 'right';\n      const hasElevator = (\n        this.elevators.findIndex(({\n          floors,\n          origin,\n        }) => (\n          origin.x === room - Math.floor(rooms.length / 2)\n          && origin.y <= floor\n          && origin.y + floors > floor\n        ))\n      ) !== -1;\n      let mesh;\n      switch (type) {\n        default:\n          mesh = new Hallway({\n            hasElevator,\n            isEdge,\n          });\n          break;\n      }\n      mesh.position.set(room * 4 - (Math.floor(rooms.length / 2) * 4), floor * 3, 0);\n      this.add(mesh);\n      return mesh;\n    }));\n  }\n\n  onAnimationTick(animation) {\n    const { dudes } = this;\n    dudes.forEach(dude => dude.onAnimationTick(animation));\n  }\n}\n\nexport default Building;\n","import { Vector3 } from 'three';\nimport Dude from '@/actors/dude';\nimport Building from '@/building';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  /* Spawn main dude */\n  const dude = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  dude.position.set(2, 3, 0);\n  dude.destinationMarker = new Marker();\n  const positionAux = new Vector3();\n  dude.onDestinationCallback = () => {\n    scene.camera.getWorldPosition(positionAux);\n    dude.faceTo(positionAux);\n  };\n  scene.root.add(dude);\n  scene.root.add(dude.destinationMarker);\n  scene.camera.target = dude.position;\n\n  /* Spawn test building */\n  const building = new Building({\n    dudes: [...Array(4)].map(() => ({\n      pallete: {\n        arms: 0x222222,\n        eyes: 0x999999 * Math.random(),\n        head: 0x999999 * Math.random(),\n        legs: 0x222222,\n        torso: 0x999999 * Math.random(),\n      },\n      position: new Vector3(\n        (Math.random() * 9 - 4.5) * 2,\n        Math.floor(Math.random() * 3) * 3,\n        0\n      ),\n    })),\n    elevators: [\n      {\n        floors: 2,\n        origin: { x: -1, y: 0 },\n      },\n      {\n        floors: 2,\n        origin: { x: 1, y: 1 },\n      },\n    ],\n    floors: [\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n    ],\n  });\n  scene.root.add(building);\n\n  /* Animation loop */\n  const floor = 1;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    if (camera.processInput(pointer) && !dude.destination) {\n      dude.onDestinationCallback();\n    }\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObjects([\n        // ...building.elevators,\n        ...building.floors[floor],\n      ])[0];\n      if (!hit) return;\n      hit.point.x = Math.min(Math.max(hit.point.x, -9.5), 9.5);\n      hit.point.y = hit.object.position.y;\n      hit.point.z = Math.min(Math.max(hit.point.z, -1.5), 1.5);\n      dude.walkTo(hit.point);\n    }\n  };\n};\n","import Input from '@/engine/input';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst scene = new Scene({ mount });\n\ninput.touches.once('end', () => {\n  document.getElementById('credits').style.display = 'none';\n  input.isEnabled = true;\n});\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nScenes[route]({ input, scene });\n"],"sourceRoot":""}