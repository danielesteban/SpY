{"version":3,"sources":["webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/engine/input.js","webpack:///./src/items/marker.js","webpack:///./src/engine/camera.js","webpack:///./src/engine/grid.js","webpack:///./src/engine/scene.js","webpack:///./src/index.js"],"names":["Actor","_ref","_this","geometry","material","_classCallCheck","this","_getPrototypeOf","call","hip","Bone","add","torso","head","leftArm","rightArm","leftLeg","rightLeg","bind","Skeleton","mixer","AnimationMixer","_assertThisInitialized","actions","Object","keys","animations","reduce","action","_objectSpread","_defineProperty","clipAction","animation","idle","timeScale","play","rotationAux","Vector2","movementAux","Vector3","SkinnedMesh","limbs","Geometry","forEach","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","delta","_ref2","walkingSpeed","walk","destination","destinationMarker","position","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","y","Math","min","max","abs","distance","distanceTo","step","copy","sub","normalize","multiplyScalar","setAnimation","visible","fadeOut","reset","fadeIn","point","clone","angle","set","x","z","PI","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","QuaternionKeyframeTrack","concat","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","translate","color","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","computeVertexNormals","MeshPhongMaterial","skinning","vertexColors","VertexColors","Input","_ref$mount","mount","document","body","input_classCallCheck","pointer","current","movement","normalized","last","raycaster","Raycaster","wheel","touches","Touches","window","filtered","preventSimulated","target","on","onPointerDown","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","addEventListener","e","preventDefault","onResize","frame","input_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","button","primary","secondary","_ref4","_slicedToArray","_ref3","_this$size","size","width","height","_ref5","deltaY","_ref6","getBoundingClientRect","Marker","marker_classCallCheck","CircleBufferGeometry","rotateX","marker_possibleConstructorReturn","marker_getPrototypeOf","opacity","transparent","Mesh","time","scale","s","sin","Camera","camera_classCallCheck","camera_getPrototypeOf","offset","tilt","pitch","speed","root","Object3D","camera_assertThisInitialized","updateOrbit","PerspectiveCamera","cos","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","_ref$subdivisions","subdivisions","grid_classCallCheck","PlaneBufferGeometry","vertexShader","ShaderLib","basic","replace","join","primaryGrid","secondaryGrid","fragmentShader","ShaderMaterial","name","uniforms","UniformsUtils","extensions","derivatives","fog","diffuse","value","grid_possibleConstructorReturn","grid_getPrototypeOf","Scene","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","getDelta","oldTime","onAnimationTick","children","child","floor","render","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","input","scene","pack","dudes","Array","map","v","i","dude","random","walkTo","mainDudeX","mainDudeZ","mainDude","getPointerFrame","setFromCamera","hit","intersectObject"],"mappings":"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","file":"code/main.d3d579fb007fc25299de.js","sourcesContent":["import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const geometry = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      geometry.merge(limbs[limb]);\n    });\n    geometry.faces.forEach((face) => {\n      geometry.vertices[face.a].bone = face.materialIndex;\n      geometry.vertices[face.b].bone = face.materialIndex;\n      geometry.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    geometry.vertices.forEach((vertex) => {\n      geometry.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      geometry.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    return (new BufferGeometry()).fromGeometry(geometry);\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point) {\n    const { destinationMarker, position, rotationAux } = this;\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.computeVertexNormals();\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      filtered: true,\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown({ button }) {\n    const { pointer } = this;\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove(e, [x, y]) {\n    const { pointer, size: { width, height } } = this;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button }) {\n    const { pointer } = this;\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { pointer } = this;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.size = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.002, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0xFF0000,\n        opacity: 0.25,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { scale, visible } = this;\n    if (!visible) return;\n    const s = 0.75 + ((1 + Math.sin(time * 4)) * 0.125);\n    scale.set(s, 1, s);\n  }\n}\n\nexport default Marker;\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.01, 2048);\n    this.distance = 9;\n    this.offset = new Vector3(0, 1.5, 0);\n    this.tilt = Math.PI * -0.5;\n    this.pitch = Math.PI * 0.125;\n    this.speed = 1.5;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      offset,\n      pitch,\n      root,\n      tilt,\n    } = this;\n    this.position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance)\n      .add(offset);\n    this.lookAt(root.position);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  PlaneBufferGeometry,\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new PlaneBufferGeometry(2048, 2048, 2, 2);\n    geometry.translate(0, 0, -0.001);\n    geometry.rotateX(Math.PI * -0.5);\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.basic.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    const material = new ShaderMaterial({\n      name: 'grid-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n    });\n    material.color = material.uniforms.diffuse.value;\n    material.color.set(background);\n    super(\n      geometry,\n      material\n    );\n  }\n}\n\nexport default Grid;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\n\nclass Scene {\n  constructor({\n    background = new Color(0x223322),\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    this.renderer.setClearColor(background);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(background, 0.03);\n    this.root.add(new AmbientLight(0x454545));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 1, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.2);\n    secondaryLight.position.set(-1, -1, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: background.clone().multiplyScalar(0.75) });\n    this.root.add(this.grid);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(Math.floor(camera.position.x), 0, Math.floor(camera.position.z));\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","// import { Vector3 } from 'three';\nimport Dude from '@/actors/dude';\nimport Input from '@/engine/input';\nimport Marker from '@/items/marker';\nimport Scene from '@/engine/scene';\n\nconst input = new Input({ mount: document.body });\nconst scene = new Scene({ mount: document.body });\n\nconst pack = {\n  dudes: [...Array(13)].map((v, i) => {\n    const dude = new Dude({\n      arms: 0x222222,\n      eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n      legs: 0x222222,\n      torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n    });\n    dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n    scene.root.add(dude);\n    return dude;\n  }),\n  walkTo(point) {\n    const { x: mainDudeX, z: mainDudeZ } = point;\n    this.dudes.forEach((dude, i) => {\n      point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n      point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n      if (i > 0) {\n        point.x += (Math.random() * 2) - 1;\n        point.z += (Math.random() * 2) - 1;\n        dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n      }\n      dude.walkTo(point);\n    });\n  },\n};\n\nconst [mainDude] = pack.dudes;\nmainDude.destinationMarker = new Marker();\nscene.root.add(mainDude.destinationMarker);\nscene.camera.target = mainDude.position;\n\nscene.onAnimationTick = () => {\n  const { camera, grid } = scene;\n  const pointer = input.getPointerFrame();\n  if (pointer.primaryUp) {\n    const { raycaster } = pointer;\n    raycaster.setFromCamera(pointer.normalized, camera);\n    const hit = raycaster.intersectObject(grid)[0];\n    if (!hit) return;\n    pack.walkTo(hit.point);\n  }\n  if (pointer.secondary) {\n    const { movement } = pointer;\n    const sensitivity = 0.003;\n    camera.tilt -= movement.x * sensitivity;\n    camera.pitch += movement.y * sensitivity;\n    camera.pitch = Math.min(Math.max(camera.pitch, 0), Math.PI * 0.5);\n    camera.updateOrbit();\n  }\n  if (pointer.wheel) {\n    const sensitivity = 0.006;\n    camera.distance = Math.min(Math.max(camera.distance + (pointer.wheel * sensitivity), 1), 16);\n    camera.updateOrbit();\n  }\n};\n\n// Stayin' alive demo hack\n// let z = 0;\n// setInterval(() => {\n//   z += 8;\n//   pack.walkTo(new Vector3(z * 0.5, 0, z));\n// }, 3000);\n"],"sourceRoot":""}