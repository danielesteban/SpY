{"version":3,"sources":["webpack:///./src/engine/camera.js","webpack:///./src/engine/grid.js","webpack:///./src/materials/rain.js","webpack:///./src/engine/rain.js","webpack:///./src/engine/moon.js","webpack:///./src/engine/starfield.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/music.js","webpack:///./src/engine/input.js","webpack:///./src/materials/sprite.js","webpack:///./src/items/bubble.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/building/elevator/cabin.js","webpack:///./src/items/button.js","webpack:///./src/building/elevator/doors.js","webpack:///./src/building/elevator/shaft.js","webpack:///./src/building/elevator/index.js","webpack:///./src/building/hallway.js","webpack:///./src/building/index.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js"],"names":["Camera","_this","_classCallCheck","this","_getPrototypeOf","call","distance","maxHeight","Infinity","offset","tilt","Math","PI","pitch","speed","step","Vector3","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","delta","_ref","position","target","distanceTo","copy","sub","normalize","multiplyScalar","movement","_ref2","secondary","wheel","hasUpdated","x","min","max","y","set","cos","sin","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","size","_ref$subdivisions","subdivisions","grid_classCallCheck","geometry","CircleBufferGeometry","translate","rotateX","grid_possibleConstructorReturn","grid_getPrototypeOf","GridMaterial","material","color","Mesh","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","replace","join","rain_possibleConstructorReturn","rain_getPrototypeOf","_objectSpread","name","uniforms","UniformsUtils","clone","fragmentShader","fog","diffuse","value","ShaderMaterial","Rain","engine_rain_classCallCheck","drop","BufferGeometry","fromGeometry","BoxGeometry","attributes","array","offsets","Float32Array","numDrops","InstancedBufferGeometry","addAttribute","BufferAttribute","InstancedBufferAttribute","setDynamic","engine_rain_possibleConstructorReturn","engine_rain_getPrototypeOf","frustumCulled","i","resetDrop","needsUpdate","floor","random","radius","z","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","MeshBasicMaterial","Starfield","starfield_classCallCheck","count","aux","o","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","Scene","_ref$mount","mount","document","body","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","bind","setPixelRatio","window","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","starfield","addEventListener","onResize","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","render","end","_mount$getBoundingCli","getBoundingClientRect","width","height","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Music","toggle","script","createElement","async","defer","src","check","SC","api","initialize","client_id","tracks","shuffle","track","wantsToPlay","play","setTimeout","index","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","pointer","current","Vector2","normalized","last","raycaster","Raycaster","touches","Touches","preventSimulated","onPointerDown","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","e","preventDefault","frame","primaryDown","primaryUp","secondaryDown","secondaryUp","isEnabled","primary","_ref4","_slicedToArray","_ref3","rect","top","left","_touches$i","clientX","clientY","_ref5","deltaY","_ref6","SpriteMaterial","texture","CanvasTexture","_possibleConstructorReturn","map","ctx","getContext","ThreeSprite","Bubble","bubble_classCallCheck","bubble_possibleConstructorReturn","bubble_getPrototypeOf","depthTest","scale","visible","Sprite","lines","delay","_this$material","clearRect","fillStyle","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","clearTimeout","timer","display","Actor","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actor_assertThisInitialized","actions","Object","keys","animations","reduce","action","actor_objectSpread","actor_defineProperty","clipAction","idle","timeScale","rotationAux","movementAux","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destination","destinationMarker","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","abs","setAnimation","onDestinationCallback","fadeOut","reset","fadeIn","point","callback","faceTo","angle","bubble","boundingSphere","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","marker_possibleConstructorReturn","marker_getPrototypeOf","transparent","inc","s","opacity","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","getPointerFrame","processInput","setFromCamera","hit","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","Cabin","cabin_classCallCheck","setHSL","splice","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","origin","ret","tapping","ThreeMath","smoothstep","addScaledVector","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","plane","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","OPEN","animationStep","Shaft","floors","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_possibleConstructorReturn","elevator_getPrototypeOf","buttons","animationStart","shaft","doors","elevator_toConsumableArray","cabin","close","open","Hallway","_ref2$hasElevator","hasElevator","_ref2$isEdge","isEdge","_ref2$isLobby","isLobby","hallway_classCallCheck","generateWall","aoBottom","orientation","wall","aoTop","hallway_possibleConstructorReturn","hallway_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","ceil","hallway_toConsumableArray","j","offsetHSL","Building","elevators","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","pallete","mesh","elevator","building_toConsumableArray","rooms","room","type","findIndex","game","building","game_toConsumableArray","constraintToFloor","intersectObjects","object","tap","say","getWorldPosition","__webpack_require__","d","__webpack_exports__","phong","primaryGrid","secondaryGrid","extensions","derivatives","lights","r","setImmediate","fonts","loaded","_engine_input__WEBPACK_IMPORTED_MODULE_0__","_engine_music__WEBPACK_IMPORTED_MODULE_1__","_engine_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","music","route","location","hash","split","slice","Scenes","reload","test","fontTester","innerText","style","fontFamily","initialWidth","removeChild","once"],"mappings":"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","file":"code/main.e73de4f19c29c728befb.js","sourcesContent":["import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxHeight = Infinity;\n    this.offset = 1.2;\n    this.tilt = Math.PI * -0.333;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.tilt = Math.min(Math.max(this.tilt, Math.PI * -1.25), Math.PI * 0.25);\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 8);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      root,\n      tilt,\n    } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance);\n    position.y = Math.min(Math.max(position.y, 0.1 - offset), maxHeight - offset);\n    this.lookAt(root.position);\n    position.y += offset;\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Mesh {\n  constructor() {\n    const drop = (new BufferGeometry()).fromGeometry(\n      new BoxGeometry(0.01, 0.5, 0.01)\n    ).attributes.position.array;\n    const offsets = new Float32Array(Rain.numDrops * 3);\n    const geometry = new InstancedBufferGeometry();\n    geometry.addAttribute('position', new BufferAttribute(drop, 3));\n    geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n    super(\n      geometry,\n      new RainMaterial({\n        color: 0xBBBBEE,\n      })\n    );\n    this.position.x = 8;\n    this.frustumCulled = false;\n    this.drop = new Vector3();\n    this.offsets = offsets;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { geometry, offsets } = this;\n    const step = delta * 10;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      if (offsets[i + 1] <= 0) {\n        this.resetDrop(i);\n      }\n    }\n    geometry.attributes.offset.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drop, offsets } = this;\n    drop.set(\n      Math.floor(Math.random() * 1025) - 512,\n      0,\n      Math.floor(Math.random() * 1025) - 512\n    )\n      .normalize()\n      .multiplyScalar(10 + (Math.random() * Rain.radius));\n    offsets[i] = drop.x;\n    offsets[i + 1] = (Rain.radius * 0.25) + (Math.random() * Rain.radius * 0.25);\n    offsets[i + 2] = drop.z;\n  }\n}\n\nRain.numDrops = 5000;\nRain.radius = 50;\n\nexport default Rain;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0x999999,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\nimport Rain from './rain';\nimport Starfield from './starfield';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.root.add(new Rain());\n    this.starfield = new Starfield();\n    this.root.add(this.starfield);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      starfield,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    starfield.position.copy(grid.position);\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([15107449,14281750,135099881,14449372,201545618,130450594,43516158,20969172,29561041,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(2, 0.25, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/items/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n      if (this.onDestinationCallback) {\n        this.onDestinationCallback();\n        delete this.onDestinationCallback;\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(point);\n    delete this.onDestinationCallback;\n    if (distance < 0.25) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(point);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processInput(pointer);\n      if (pointer.primaryUp) {\n        const { raycaster } = pointer;\n        raycaster.setFromCamera(pointer.normalized, camera);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walkTo(point);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.1, 0.1);\n    geometry.translate(0, 0, 0.049);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.05);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/items/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.7 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n  }\n\n  open() {\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    if (state === targetState) return;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.buttons = [];\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.position.y = floor * Elevator.scale.y;\n      this.buttons.push(doors.callButton);\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n  }\n\n  onAnimationTick(animation) {\n    // const { time } = animation;\n    // const { animationStart, floors, cabin: { position: cabin } } = this;\n    // const mid = (floors - 1) * Elevator.scale.y * 0.5;\n    // cabin.y = mid + (Math.sin((animationStart + time) * 0.5) * mid);\n    this.doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor) {\n    const { doors } = this;\n    // Debug: Door toggle testing\n    if (doors[floor].state === Doors.states.OPEN) {\n      doors[floor].close();\n      return false;\n    }\n    doors[floor].open();\n    return true;\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Hallway extends Mesh {\n  static generateWall({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Hallway.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Hallway.scale.x : Hallway.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    hasElevator = false,\n    isEdge = false,\n    isLobby = false,\n  } = {}) {\n    const merged = new Geometry();\n    const floor = Hallway.generateWall({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Hallway.generateWall({\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Hallway.generateWall({\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Hallway.generateWall({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Hallway.generateWall({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n    this.scale.copy(Hallway.scale);\n  }\n}\n\nHallway.scale = new Vector3(4, 3, 4);\n\nexport default Hallway;\n","import { Object3D } from 'three';\nimport Dude from '@/actors/dude';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\n\nclass Building extends Object3D {\n  constructor({\n    dudes,\n    elevators,\n    floors,\n  }) {\n    super();\n    this.buttons = [];\n    this.dudes = dudes.map(({\n      pallete,\n      position,\n    }) => {\n      const mesh = new Dude(pallete);\n      mesh.position.copy(position);\n      this.add(mesh);\n      return mesh;\n    });\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.buttons = [\n        ...this.buttons,\n        ...elevator.buttons,\n      ];\n      this.add(elevator);\n      return elevator;\n    });\n    this.floors = floors.map((rooms, floor) => rooms.map(({ type }, room) => {\n      let isEdge = false;\n      if (room === 0) isEdge = 'left';\n      else if (room === rooms.length - 1) isEdge = 'right';\n      const hasElevator = (\n        this.elevators.findIndex(({\n          floors,\n          origin,\n        }) => (\n          origin.x === room\n          && origin.y <= floor\n          && origin.y + floors > floor\n        ))\n      ) !== -1;\n      let mesh;\n      switch (type) {\n        default:\n          mesh = new Hallway({\n            hasElevator,\n            isEdge,\n            isLobby: floor === 0,\n          });\n          break;\n      }\n      mesh.position.set(room * 4, floor * 3, 0);\n      this.add(mesh);\n      return mesh;\n    }));\n  }\n\n  onAnimationTick(animation) {\n    const { buttons, dudes, elevators } = this;\n    buttons.forEach(button => button.onAnimationTick(animation));\n    dudes.forEach(dude => dude.onAnimationTick(animation));\n    elevators.forEach(elevator => elevator.onAnimationTick(animation));\n  }\n}\n\nexport default Building;\n","import { Vector3 } from 'three';\nimport Dude from '@/actors/dude';\nimport Building from '@/building';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  /* Spawn main dude */\n  const dude = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  dude.position.set(6, 3, 0);\n  dude.destinationMarker = new Marker();\n  scene.root.add(dude);\n  scene.root.add(dude.destinationMarker);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.target = dude.position;\n\n  /* Spawn test building */\n  const building = new Building({\n    dudes: [...Array(4)].map(() => ({\n      pallete: {\n        arms: 0x222222,\n        eyes: 0x999999 * Math.random(),\n        head: 0x999999 * Math.random(),\n        legs: 0x222222,\n        torso: 0x999999 * Math.random(),\n      },\n      position: new Vector3(\n        (Math.random() * 20) - 1.5,\n        Math.floor(Math.random() * 3) * 3,\n        0\n      ),\n    })),\n    elevators: [\n      {\n        floors: 2,\n        origin: { x: 1, y: 0 },\n      },\n      {\n        floors: 2,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n    ],\n  });\n  scene.root.add(building);\n\n  /* Animation loop */\n  const floor = 1;\n  const constraintToFloor = (point) => {\n    point.x = Math.min(Math.max(point.x, -1.5), 17.5);\n    point.y = floor * 3;\n    point.z = Math.min(Math.max(point.z, -1.5), 1.5);\n    return point;\n  };\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      {\n        const hit = raycaster.intersectObjects(building.buttons)[0];\n        if (hit) {\n          const { point, object: button } = hit;\n          dude.walkTo(constraintToFloor(point.clone()), () => {\n            dude.faceTo(point);\n            if (button.tap()) {\n              setTimeout(() => {\n                setTimeout(() => (\n                  dude.say([\n                    'Crap!',\n                    \"It's Broken!\",\n                    'What a night...',\n                  ])\n                ), 500);\n                const aux = camera.position.clone();\n                camera.getWorldPosition(aux);\n                dude.faceTo(aux);\n              }, 1000);\n            }\n          });\n          return;\n        }\n      }\n      {\n        const hit = raycaster.intersectObjects(building.floors[floor])[0];\n        if (hit) {\n          constraintToFloor(hit.point);\n          dude.walkTo(hit.point);\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as game } from './game';\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.phong.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.phong.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.phong.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/engine/input';\nimport Music from '@/engine/music';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    document.getElementById('splash').style.display = 'none';\n    input.isEnabled = true;\n    music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n"],"sourceRoot":""}