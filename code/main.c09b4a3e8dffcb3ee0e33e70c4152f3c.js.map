{"version":3,"sources":["webpack:///./src/engine/camera.js","webpack:///./src/meshes/grid.js","webpack:///./src/engine/vignette.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/music.js","webpack:///./src/engine/input.js","webpack:///./src/meshes/bubble.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/meshes/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/scenes/editor.js","webpack:///./src/actors/thiccboi.js","webpack:///./src/meshes/building/elevator/cabin.js","webpack:///./src/meshes/button.js","webpack:///./src/meshes/building/elevator/doors.js","webpack:///./src/meshes/building/elevator/shaft.js","webpack:///./src/meshes/building/elevator/index.js","webpack:///./src/meshes/building/wall.js","webpack:///./src/meshes/building/hallway.js","webpack:///./src/meshes/building/road.js","webpack:///./src/meshes/building/walkable.js","webpack:///./src/meshes/building/ai.js","webpack:///./src/meshes/building/index.js","webpack:///./src/ui/dialog.js","webpack:///./src/ui/elevator.js","webpack:///./src/materials/rain.js","webpack:///./src/meshes/rain.js","webpack:///./src/meshes/moon.js","webpack:///./src/meshes/starfield.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/materials/sprite.js"],"names":["Camera","_this","_classCallCheck","this","_getPrototypeOf","call","distance","maxHeight","Infinity","offset","Vector3","tilt","Math","PI","pitch","speed","step","raycaster","Raycaster","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","pointer","setFromCamera","far","delta","_ref","position","target","distanceTo","copy","sub","normalize","multiplyScalar","movement","_ref2","secondary","wheel","hasUpdated","x","y","min","max","testMeshes","set","cos","sin","ray","origin","direction","hit","intersectObjects","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","size","_ref$subdivisions","subdivisions","grid_classCallCheck","geometry","CircleBufferGeometry","translate","rotateX","grid_possibleConstructorReturn","grid_getPrototypeOf","GridMaterial","material","color","Mesh","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","camera","OrthographicCamera","sprite","SpriteMaterial","width","height","map","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Sprite","Scene","renderer","ctx","grd","createRadialGradient","addColorStop","fillStyle","beginPath","rect","fill","needsUpdate","clearDepth","render","_ref$mount","mount","document","body","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","bind","setPixelRatio","window","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","fog","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","vignette","addEventListener","onResize","ShaderChunk","fog_pars_vertex","replace","fog_vertex","fog_pars_fragment","fog_fragment","join","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","z","clear","end","_mount$getBoundingCli","getBoundingClientRect","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Music","toggle","script","createElement","async","defer","src","check","SC","api","initialize","client_id","tracks","shuffle","track","wantsToPlay","play","setTimeout","index","random","floor","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","current","Vector2","normalized","last","touches","Touches","preventSimulated","onPointerDown","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","e","preventDefault","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","isEnabled","primary","_ref4","_slicedToArray","_ref3","top","left","i","_touches$i","clientX","clientY","_ref5","deltaY","_ref6","Bubble","_possibleConstructorReturn","depthTest","scale","visible","lines","delay","_this$material","clearRect","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","clearTimeout","timer","display","Actor","bonesOrigin","collisionGeometry","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","Object","keys","bone","skeleton","bones","Bones","mixer","AnimationMixer","actor_assertThisInitialized","actions","animations","reduce","action","_defineProperty","clipAction","idle","timeScale","rotationAux","movementAux","collisionMesh","MeshBasicMaterial","opacity","transparent","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","merge","vertices","a","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","abs","waypoint","path","faceTo","setAnimation","fadeOut","reset","fadeIn","point","angle","bubble","boundingSphere","radius","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","dude_possibleConstructorReturn","dude_getPrototypeOf","CylinderBufferGeometry","CylinderGeometry","SphereGeometry","hat","leftEye","eyes","rightEye","clone","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","marker_possibleConstructorReturn","marker_getPrototypeOf","inc","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","getPointerFrame","processInput","getRaycaster","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","editor","ThiccBoi","thiccboi_classCallCheck","thiccboi_possibleConstructorReturn","thiccboi_getPrototypeOf","Cabin","cabin_classCallCheck","BoxGeometry","aux","setHSL","splice","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","ret","tapping","ThreeMath","smoothstep","addScaledVector","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","plane","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","PlaneBufferGeometry","MOVING","OPEN","close","open","animationStep","Shaft","floors","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","findIndex","p","travel","to","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","wall","ceil","wall_toConsumableArray","j","offsetHSL","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","Road","road_classCallCheck","markings","road_possibleConstructorReturn","road_getPrototypeOf","MeshLambertMaterial","Walkable","walkable_classCallCheck","intersect","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","AI","building","ai_classCallCheck","actors","actor","lastThought","IDLE","WALKING","destination","walkable","setWalkableAt","ai_slicedToArray","slice","Building","elevators","building_classCallCheck","building_getPrototypeOf","ai","building_assertThisInitialized","layout","split","heightmap","building_toConsumableArray","buttons","meshes","rooms","type","room","mesh","indexOf","elevatorIndex","road","addToGrid","addActor","Dialog","dialog_classCallCheck","wrapper","content","removeChild","tag","node","firstChild","ElevatorUI","onFloor","onExit","empty","unmount","innerText","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","rain_possibleConstructorReturn","rain_getPrototypeOf","rain_objectSpread","name","uniforms","UniformsUtils","fragmentShader","diffuse","value","ShaderMaterial","Rain","meshes_rain_classCallCheck","meshes_rain_possibleConstructorReturn","meshes_rain_getPrototypeOf","numDrops","addAttribute","BufferAttribute","setDynamic","ripples","Points","PointsMaterial","sizeAttenuation","frustumCulled","offsets","drop","attributes","array","InstancedBufferGeometry","InstancedBufferAttribute","drops","resetDrop","testHeight","func","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","Starfield","starfield_classCallCheck","count","o","starfield_possibleConstructorReturn","starfield_getPrototypeOf","moon","game","rain","starfield","reverse","game_toConsumableArray","setHeightTest","getHeight","spawn","isWalkableAt","elevatorUI","_building$floors$floo","object","parent","onDestination","say","getPath","elevatorFloor","show","addPassenger","removePassenger","tap","__webpack_require__","d","__webpack_exports__","lambert","primaryGrid","secondaryGrid","extensions","derivatives","lights","r","setImmediate","fonts","loaded","_engine_input__WEBPACK_IMPORTED_MODULE_0__","_engine_music__WEBPACK_IMPORTED_MODULE_1__","_engine_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","splash","music","location","hash","Scenes","reload","test","fontTester","style","fontFamily","initialWidth","once","process","keyCode","repeat","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.75ac6d4d6127928a7588.js","sourcesContent":["import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 16);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, 0.1), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from '@/meshes/grid';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.6);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/meshes/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    bonesOrigin,\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    Object.keys(bonesOrigin).forEach((bone) => {\n      this.skeleton.bones[Actor.Bones[bone]].position.copy(bonesOrigin[bone]);\n    });\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: Dude.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/meshes/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processInput(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","export default ({ input, scene }) => {\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n  };\n};\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass ThiccBoi extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: ThiccBoi.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: ThiccBoi.geometry(palette),\n      material: ThiccBoi.material,\n    });\n  }\n}\n\nThiccBoi.bones = {\n  hip: new Vector3(0, 0.4, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.325, 0.45, 0),\n  rightArm: new Vector3(0.325, 0.45, 0),\n  leftLeg: new Vector3(-0.08, 0.1, 0),\n  rightLeg: new Vector3(0.08, 0.1, 0),\n};\n\nThiccBoi.geometry = (palette) => {\n  // const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  const torso = new SphereGeometry(0.26, 8, 8);\n  torso.translate(0, 0.25, 0);\n  torso.scale(1.5, 1, 1.5);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new CylinderGeometry(0.175, 0.15, 0.4, 6);\n  // const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.03, 0.075, 0.3, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.15, 0);\n  rightArm.translate(0, -0.15, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.1, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nThiccBoi.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default ThiccBoi;\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/meshes/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += (animation.delta * 0.5) / Math.abs(route.travel);\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshLambertMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Road extends Mesh {\n  constructor() {\n    const geometry = new Geometry();\n    const track = new PlaneGeometry(512, 4);\n    track.rotateX(Math.PI * -0.5);\n    track.faces.forEach((face) => {\n      face.color.set(0x222233);\n      face.materialIndex = 0;\n    });\n    const markings = new PlaneGeometry(1, 0.2);\n    markings.rotateX(Math.PI * -0.5);\n    markings.faces.forEach((face) => {\n      face.color.set(0xBEBEBE);\n      face.materialIndex = 0;\n    });\n    for (let x = -128; x < 128; x += 5) {\n      geometry.merge(\n        markings.clone().translate(x, 0.001, 0)\n      );\n    }\n    geometry.merge(track);\n    geometry.translate(0, 0, 4);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshLambertMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Road;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.floor(Math.min(Math.max(point.x, 0), grid.width - 1));\n    point.z = Math.floor(Math.min(Math.max(point.z, 0), grid.height - 1));\n    return point;\n  }\n}\n\nexport default Walkable;\n","import {\n  Vector3,\n} from 'three';\n\nclass AI {\n  constructor(building) {\n    this.building = building;\n    this.actors = [];\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    const { actors } = this;\n    actors.push({\n      actor,\n      floor,\n      position,\n      lastThought: 0,\n      state: AI.states.IDLE,\n    });\n  }\n\n  onAnimationTick({ time }) {\n    const { actors, building } = this;\n    actors.forEach((actor) => {\n      const {\n        floor,\n        position,\n        lastThought,\n        state,\n      } = actor;\n      if (state === AI.states.IDLE) {\n        if (time - lastThought > 3) {\n          actor.lastThought = time;\n          if (Math.random() > 0.75) {\n            actor.state = AI.states.WALKING;\n          }\n        }\n        switch (actor.state) {\n          case AI.states.WALKING: {\n            const { walkable } = building.floors[floor];\n            const { finder, grid } = walkable;\n            let destination;\n            let path;\n            grid.setWalkableAt(position.x, position.z, true);\n            do {\n              destination = {\n                x: Math.floor(Math.random() * grid.width),\n                z: Math.floor(Math.random() * grid.height),\n              };\n              path = finder.findPath(\n                position.x, position.z,\n                destination.x, destination.z,\n                grid.clone()\n              )\n                .map(([x, z]) => (\n                  walkable.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n                ));\n            } while (\n              path.length < 2\n            );\n            grid.setWalkableAt(destination.x, destination.z, false);\n            actor.actor.walk(path.slice(1), () => {\n              position.x = destination.x;\n              position.z = destination.z;\n              actor.lastThought = time;\n              actor.state = AI.states.IDLE;\n            });\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n\nAI.states = {\n  IDLE: 0,\n  WALKING: 1,\n};\n\nexport default AI;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Road from './road';\nimport Wall from './wall';\nimport Walkable from './walkable';\nimport AI from './ai';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.ai = new AI(this);\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n    this.road = new Road();\n    this.add(this.road);\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    this.addToGrid({ floor, mesh: actor, position });\n    this.ai.addActor({ actor, floor, position });\n  }\n\n  addToGrid({\n    floor,\n    mesh,\n    position,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(position.x, position.z, false);\n    mesh.position.set(position.x + 0.5, 0, position.z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { ai, children } = this;\n    ai.onAnimationTick(animation);\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","class Dialog {\n  constructor() {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = 'dialog';\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default Dialog;\n","import Dialog from './dialog';\n\nclass ElevatorUI extends Dialog {\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Object3D,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Object3D {\n  constructor() {\n    super();\n    {\n      const position = new Float32Array(Rain.numDrops * 3);\n      const geometry = new BufferGeometry();\n      geometry.addAttribute('position', (new BufferAttribute(position, 3).setDynamic(true)));\n      const ripples = new Points(\n        geometry,\n        new PointsMaterial({\n          color: 0xAAAADD,\n          fog: true,\n          size: 0.01,\n          sizeAttenuation: true,\n          transparent: true,\n          opacity: 1 / 3,\n        })\n      );\n      ripples.frustumCulled = false;\n      ripples.offsets = position;\n      this.add(ripples);\n      this.ripples = ripples;\n    }\n    {\n      const drop = (new BufferGeometry()).fromGeometry(\n        (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n      ).attributes.position.array;\n      const offsets = new Float32Array(Rain.numDrops * 3);\n      const geometry = new InstancedBufferGeometry();\n      geometry.addAttribute('position', new BufferAttribute(drop, 3));\n      geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n      const drops = new Mesh(\n        geometry,\n        new RainMaterial({\n          color: 0xAAAADD,\n        })\n      );\n      drops.frustumCulled = false;\n      drops.drop = new Vector3();\n      drops.offsets = offsets;\n      this.add(drops);\n      this.drops = drops;\n      for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n        this.resetDrop(i);\n        this.ripples.offsets[i] = 0;\n        this.ripples.offsets[i + 1] = -999;\n        this.ripples.offsets[i + 2] = 0;\n      }\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { drops, position, ripples } = this;\n    const { offsets } = drops;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        offsets[i + 1] = height;\n        this.resetDrop(i);\n      }\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drops, position, ripples } = this;\n    const { drop, offsets } = drops;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    ripples.offsets[i] = offsets[i];\n    ripples.offsets[i + 1] = offsets[i + 1] + 0.01;\n    ripples.offsets[i + 2] = offsets[i + 2];\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { drops, ripples } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xAAAAAA,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport Building from '@/meshes/building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/meshes/marker';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 4,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 4,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const actors = [Dude, ThiccBoi, ThiccBoi];\n  const dudes = [...Array(building.floors.length * actors.length)].map(() => {\n    const Actor = actors[Math.floor(Math.random() * actors.length)];\n    const dude = new Actor({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * building.floors.length);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * (grid.height - 1)),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addActor({\n      floor,\n      actor: dude,\n      position: spawn,\n    });\n    dude.position.y += 0.001;\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const from = player.position.clone();\n        const to = dude.position.clone();\n        to.z += 1;\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    elevator.removePassenger(player);\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const from = player.position.clone();\n          const to = point.clone();\n          const path = walkable.getPath(from, to);\n          if (path.length) {\n            walkable.grid.setWalkableAt(from.x, from.z, true);\n            if (path.length > 1) {\n              player.walk(path.slice(1), onDestination);\n            } else {\n              onDestination();\n            }\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const from = player.position.clone();\n        const to = point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const from = player.position.clone();\n        const to = hit.point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n          });\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as editor } from './editor';\nexport { default as game } from './game';\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.lambert.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.lambert.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.lambert.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/engine/input';\nimport Music from '@/engine/music';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst splash = document.getElementById('splash');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    splash.style.display = 'none';\n    input.isEnabled = true;\n    music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n\nif (window.process && window.process.type) {\n  // We're running inside electron.\n  // Allow the user to exit with the ESC key.\n  window.addEventListener('keydown', ({ keyCode, repeat }) => {\n    if (keyCode === 27 && !repeat) {\n      if (splash.style.display !== 'none') {\n        window.close();\n      } else {\n        splash.style.display = '';\n        input.isEnabled = false;\n        input.touches.once('end', () => {\n          splash.style.display = 'none';\n          input.isEnabled = true;\n        });\n      }\n    }\n  }, false);\n}\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}