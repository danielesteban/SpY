{"version":3,"sources":["webpack:///./src/engine/input.js","webpack:///./src/engine/camera.js","webpack:///./src/materials/grid.js","webpack:///./src/engine/grid.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/rooms/hallway.js","webpack:///./src/rooms/shaft.js","webpack:///./src/scenes/game.js","webpack:///./src/index.js"],"names":["Input","_ref","_ref$mount","mount","document","body","_classCallCheck","this","pointer","current","Vector2","movement","x","y","normalized","last","raycaster","Raycaster","wheel","touches","Touches","window","filtered","preventSimulated","target","on","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","addEventListener","e","preventDefault","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","button","_ref2","primary","secondary","_ref4","_slicedToArray","_ref3","_this$size","size","width","height","copy","_ref5","deltaY","_ref6","getBoundingClientRect","Camera","_this","camera_classCallCheck","_getPrototypeOf","call","distance","offset","Vector3","tilt","Math","PI","pitch","speed","step","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","delta","position","distanceTo","sub","normalize","multiplyScalar","hasUpdated","min","max","set","cos","sin","lookAt","GridMaterial","arguments","length","undefined","_ref$color","color","_ref$size","_ref$subdivisions","subdivisions","rest","_objectWithoutProperties","grid_classCallCheck","vertexShader","ShaderLib","phong","replace","join","primaryGrid","secondaryGrid","fragmentShader","concat","grid_possibleConstructorReturn","grid_getPrototypeOf","grid_objectSpread","name","uniforms","UniformsUtils","clone","extensions","derivatives","fog","lights","diffuse","value","ShaderMaterial","Grid","_ref$background","background","Color","engine_grid_classCallCheck","geometry","PlaneBufferGeometry","translate","rotateX","engine_grid_possibleConstructorReturn","engine_grid_getPrototypeOf","material","Mesh","Scene","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","floor","z","render","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Actor","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actor_assertThisInitialized","actions","Object","keys","animations","reduce","action","actor_objectSpread","actor_defineProperty","clipAction","idle","timeScale","play","rotationAux","movementAux","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","computeVertexNormals","computeBoundingSphere","boundingSphere","center","radius","walkingSpeed","walk","destination","destinationMarker","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","abs","setAnimation","visible","onDestinationCallback","fadeOut","reset","fadeIn","point","faceTo","angle","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","marker_possibleConstructorReturn","marker_getPrototypeOf","opacity","transparent","scale","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","map","v","i","dude","random","walkTo","mainDudeX","mainDudeZ","mainDude","debug_slicedToArray","getPointerFrame","processInput","setFromCamera","hit","intersectObject","Hallway","_ref2$hasElevator","hasElevator","_ref2$isEdge","isEdge","hallway_classCallCheck","generateWall","orientation","wall","rotateY","hallway_possibleConstructorReturn","hallway_getPrototypeOf","side","DoubleSide","_ref$width","_ref$height","PlaneGeometry","ceil","setHSL","Shaft","floors","origin","shaft_classCallCheck","back","shaft_possibleConstructorReturn","shaft_getPrototypeOf","game","positionAux","getWorldPosition","building","game_toConsumableArray","elevators","hallway","shafts","meta","mesh","intersectObjects","object","getElementById","once","style","display","route","location","hash","split","slice","Scenes"],"mappings":"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","file":"code/main.37d127081bb358d1c3b0.js","sourcesContent":["import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      filtered: true,\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown({ button }) {\n    const { pointer } = this;\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove(e, [x, y]) {\n    const { pointer, size: { width, height } } = this;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button }) {\n    const { pointer } = this;\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { pointer } = this;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.size = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.01, 2048);\n    this.distance = 4;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.65;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, 0), Math.PI * 0.5);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 8);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      offset,\n      pitch,\n      position,\n      root,\n      tilt,\n    } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance);\n    this.lookAt(root.position);\n    position.add(offset);\n  }\n}\n\nexport default Camera;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.phong.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.phong.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.phong.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import {\n  Color,\n  Mesh,\n  PlaneBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new PlaneBufferGeometry(2048, 2048, 2, 2);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x336699);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.025);\n    this.root.add(new AmbientLight(0x454545));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 1, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.2);\n    secondaryLight.position.set(-1, -1, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x335555) });\n    this.root.add(this.grid);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(Math.floor(camera.root.position.x), 0, Math.floor(camera.root.position.z));\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    geometry.boundingSphere.center.y = geometry.boundingSphere.radius;\n    return geometry;\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n      if (this.onDestinationCallback) {\n        this.onDestinationCallback();\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point) {\n    const { destinationMarker } = this;\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    this.faceTo(point);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  return Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.01, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0xFF0000,\n        opacity: 0.25,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { scale, visible } = this;\n    if (!visible) return;\n    const s = 0.75 + ((1 + Math.sin(time * 4)) * 0.125);\n    scale.set(s, 1, s);\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walkTo(point);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = () => {\n    const { camera, grid } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObject(grid)[0];\n      if (!hit) return;\n      pack.walkTo(hit.point);\n    }\n  };\n};\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Hallway extends Mesh {\n  static generateWall({\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Hallway.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Hallway.scale.x : Hallway.scale.y))\n    );\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.0125, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      face.color.copy(color);\n    });\n    return wall;\n  }\n\n  constructor({\n    hasElevator = false,\n    isEdge = false,\n  } = {}) {\n    const merged = new Geometry();\n    const floor = Hallway.generateWall({\n      material: 0,\n      orientation: 'horizontal',\n    });\n    floor.translate(0, -0.0005, 0);\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Hallway.generateWall({\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Hallway.generateWall({\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    const wall = Hallway.generateWall({\n      height: 1 / 3,\n      material: 1,\n    });\n    wall.rotateY(Math.PI);\n    wall.translate(0, 1 / 3 / 2, 0.5);\n    merged.merge(wall);\n    if (isEdge) {\n      const wall = Hallway.generateWall({\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n      wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n      merged.merge(wall);\n    }\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n    this.scale.copy(Hallway.scale);\n  }\n}\n\nHallway.scale = new Vector3(4, 3, 4);\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    floors,\n    origin,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.translate(0, 0, -1.5);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color: Shaft.color,\n        side: DoubleSide,\n      })\n    );\n    this.position.x = origin.x * 4;\n    this.position.y = origin.y * 3;\n    this.scale.copy(Shaft.scale);\n  }\n}\n\nShaft.color = 0x333333;\nShaft.scale = new Vector3(2, 3, 2);\n\nexport default Shaft;\n","import { Vector3 } from 'three';\nimport Dude from '@/actors/dude';\nimport Hallway from '@/rooms/hallway';\nimport Shaft from '@/rooms/shaft';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  /* Spawn main dude */\n  const dude = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  dude.position.set(2, 3, 0);\n  dude.destinationMarker = new Marker();\n  const positionAux = new Vector3();\n  dude.onDestinationCallback = () => {\n    scene.camera.getWorldPosition(positionAux);\n    dude.faceTo(positionAux);\n  };\n  scene.root.add(dude);\n  scene.root.add(dude.destinationMarker);\n  scene.camera.target = dude.position;\n\n  /* Spawn test building */\n  const building = {\n    dudes: [...Array(4)].map(() => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: 0x999999 * Math.random(),\n        head: 0x999999 * Math.random(),\n        legs: 0x222222,\n        torso: 0x999999 * Math.random(),\n      });\n      dude.position.set(\n        Math.random() * 19 - 9.5,\n        Math.floor(Math.random() * 3) * 3,\n        0\n      );\n      return dude;\n    }),\n    elevators: [],\n    floors: [\n      [...Array(5)].map((v, i) => {\n        const hallway = new Hallway({\n          hasElevator: i === 1,\n          // eslint-disable-next-line no-nested-ternary\n          isEdge: i === 0 ? 'left' : (i === 4 ? 'right' : false),\n        });\n        hallway.position.set(i * 4 - (2 * 4), 0, 0);\n        return hallway;\n      }),\n      [...Array(5)].map((v, i) => {\n        const hallway = new Hallway({\n          hasElevator: i === 1 || i === 3,\n          // eslint-disable-next-line no-nested-ternary\n          isEdge: i === 0 ? 'left' : (i === 4 ? 'right' : false),\n        });\n        hallway.position.set(i * 4 - (2 * 4), 3, 0);\n        return hallway;\n      }),\n      [...Array(5)].map((v, i) => {\n        const hallway = new Hallway({\n          hasElevator: i === 3,\n          // eslint-disable-next-line no-nested-ternary\n          isEdge: i === 0 ? 'left' : (i === 4 ? 'right' : false),\n        });\n        hallway.position.set(i * 4 - (2 * 4), 6, 0);\n        return hallway;\n      }),\n      [...Array(5)].map((v, i) => {\n        const hallway = new Hallway({\n          // eslint-disable-next-line no-nested-ternary\n          isEdge: i === 0 ? 'left' : (i === 4 ? 'right' : false),\n        });\n        hallway.position.set(i * 4 - (2 * 4), 9, 0);\n        return hallway;\n      }),\n    ],\n    shafts: [\n      {\n        floors: 2,\n        origin: { x: -1, y: 0 },\n      },\n      {\n        floors: 2,\n        origin: { x: 1, y: 1 },\n      },\n    ].map((meta => new Shaft(meta))),\n  };\n\n  [\n    ...building.dudes,\n    ...building.elevators,\n    ...building.floors.reduce((floors, floor) => [...floors, ...floor], []),\n    ...building.shafts,\n  ].forEach(mesh => scene.root.add(mesh));\n\n  /* Animation loop */\n  const floor = 1;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    if (camera.processInput(pointer) && !dude.destination) {\n      scene.camera.getWorldPosition(positionAux);\n      dude.faceTo(positionAux);\n    }\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObjects([\n        ...building.elevators,\n        ...building.floors[floor],\n      ])[0];\n      if (!hit) return;\n      hit.point.x = Math.min(Math.max(hit.point.x, -9.5), 9.5);\n      hit.point.y = hit.object.position.y;\n      hit.point.z = Math.min(Math.max(hit.point.z, -1.5), 1.5);\n      dude.walkTo(hit.point);\n    }\n  };\n};\n","import Input from '@/engine/input';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst scene = new Scene({ mount });\n\ninput.touches.once('start', () => {\n  document.getElementById('credits').style.display = 'none';\n});\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nScenes[route]({ input, scene });\n"],"sourceRoot":""}