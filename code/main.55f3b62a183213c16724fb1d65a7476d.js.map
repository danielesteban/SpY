{"version":3,"sources":["webpack:///./src/engine/camera.js","webpack:///./src/engine/grid.js","webpack:///./src/engine/moon.js","webpack:///./src/engine/starfield.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/music.js","webpack:///./src/engine/input.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/building/elevator/cabin.js","webpack:///./src/items/button.js","webpack:///./src/building/elevator/doors.js","webpack:///./src/building/elevator/shaft.js","webpack:///./src/building/elevator/index.js","webpack:///./src/building/hallway.js","webpack:///./src/building/index.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js"],"names":["Camera","_this","_classCallCheck","this","_getPrototypeOf","call","distance","maxHeight","Infinity","offset","tilt","Math","PI","pitch","speed","step","Vector3","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","delta","_ref","position","target","distanceTo","copy","sub","normalize","multiplyScalar","movement","_ref2","secondary","wheel","hasUpdated","x","y","min","max","set","cos","sin","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","size","_ref$subdivisions","subdivisions","grid_classCallCheck","geometry","CircleBufferGeometry","translate","rotateX","grid_possibleConstructorReturn","grid_getPrototypeOf","GridMaterial","material","color","Mesh","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","MeshBasicMaterial","fog","Starfield","starfield_classCallCheck","radius","BufferGeometry","Float32Array","count","aux","i","floor","random","o","z","addAttribute","BufferAttribute","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","Scene","_ref$mount","mount","document","body","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","bind","setPixelRatio","window","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","starfield","addEventListener","onResize","ShaderChunk","fog_pars_vertex","replace","fog_vertex","fog_pars_fragment","fog_fragment","join","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","render","end","_mount$getBoundingCli","getBoundingClientRect","width","height","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Music","toggle","api","SC","initialize","client_id","tracks","shuffle","track","index","temp","play","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","pointer","current","Vector2","normalized","last","raycaster","Raycaster","touches","Touches","preventSimulated","onPointerDown","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","e","preventDefault","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","isEnabled","primary","_ref4","_slicedToArray","_ref3","rect","top","left","_touches$i","clientX","clientY","_ref5","deltaY","_ref6","Actor","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actions","Object","keys","animations","reduce","action","_defineProperty","clipAction","idle","timeScale","rotationAux","movementAux","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","fromGeometry","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destination","destinationMarker","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","abs","setAnimation","visible","onDestinationCallback","fadeOut","reset","fadeIn","point","callback","clone","faceTo","angle","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","boundingSphere","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","marker_possibleConstructorReturn","marker_getPrototypeOf","transparent","scale","inc","s","opacity","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","map","v","dude","getPointerFrame","processInput","setFromCamera","hit","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","Cabin","cabin_classCallCheck","BoxGeometry","setHSL","splice","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","origin","tapping","ThreeMath","smoothstep","addScaledVector","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","plane","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","OPEN","animationStep","Shaft","floors","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_possibleConstructorReturn","elevator_getPrototypeOf","buttons","animationStart","shaft","doors","elevator_toConsumableArray","cabin","close","open","Hallway","_ref2$hasElevator","hasElevator","_ref2$isEdge","isEdge","_ref2$isLobby","isLobby","hallway_classCallCheck","generateWall","aoBottom","orientation","wall","aoTop","hallway_possibleConstructorReturn","hallway_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","ceil","hallway_toConsumableArray","j","offsetHSL","Building","elevators","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","pallete","mesh","elevator","building_toConsumableArray","rooms","room","type","findIndex","game","building","game_toConsumableArray","constraintToFloor","intersectObjects","object","tap","__webpack_require__","d","__webpack_exports__","_ref$color","rest","_objectWithoutProperties","vertexShader","ShaderLib","phong","primaryGrid","secondaryGrid","fragmentShader","_possibleConstructorReturn","name","uniforms","UniformsUtils","extensions","derivatives","lights","diffuse","value","ShaderMaterial","r","setImmediate","fonts","loaded","_engine_input__WEBPACK_IMPORTED_MODULE_0__","_engine_music__WEBPACK_IMPORTED_MODULE_1__","_engine_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","music","route","location","hash","split","slice","Scenes","reload","font","test","fontTester","createElement","innerText","style","fontFamily","initialWidth","check","removeChild","once","display","setTimeout"],"mappings":"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","file":"code/main.198c15497270e3fc69b1.js","sourcesContent":["import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.01, 2048);\n    this.distance = 4;\n    this.maxHeight = Infinity;\n    this.offset = 1.2;\n    this.tilt = Math.PI * -0.65;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 8);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      root,\n      tilt,\n    } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance);\n    position.y = Math.min(Math.max(position.y, 0.1 - offset), maxHeight - offset);\n    this.lookAt(root.position);\n    position.y += offset;\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(1024, 8);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0x999999,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\nimport Starfield from './starfield';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.025);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.starfield = new Starfield();\n    this.root.add(this.starfield);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      starfield,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    starfield.position.copy(grid.position);\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    this.api = window.SC;\n    this.api.initialize({\n      client_id: 'eb5fcff9e107aab508431b4c3c416415',\n    });\n    // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n    //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n    // });\n    // eslint-disable-next-line\n    this.tracks = Music.shuffle([15107449,14281750,135099881,14449372,201545618,7546385,199917181,130450594,43516158,20969172,209771982,29561041,6582510,89379153,96594845,199889475,137188503,74658085,177686789,90256034,183847047,3916883]);\n    this.track = 0;\n    toggle.addEventListener('click', () => this.toggle(toggle), false);\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n      if (this.onDestinationCallback) {\n        this.onDestinationCallback();\n        delete this.onDestinationCallback;\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(point);\n    delete this.onDestinationCallback;\n    if (distance < 0.25) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(point);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processInput(pointer);\n      if (pointer.primaryUp) {\n        const { raycaster } = pointer;\n        raycaster.setFromCamera(pointer.normalized, camera);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walkTo(point);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.9985, 0.9985, 0.9985,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.1, 0.1);\n    geometry.translate(0, 0, 0.05);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.05);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return;\n    if (onTap) {\n      onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/items/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, 0.5 * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n  }\n\n  open() {\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    if (state === targetState) return;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.buttons = [];\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.position.y = floor * Elevator.scale.y;\n      this.buttons.push(doors.callButton);\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n\n    this.position.x = origin.x * 4;\n    this.position.y = origin.y * 3;\n    this.position.z = -1.5 * Elevator.scale.z;\n  }\n\n  onAnimationTick(animation) {\n    // const { time } = animation;\n    // const { animationStart, floors, cabin: { position: cabin } } = this;\n    // const mid = (floors - 1) * Elevator.scale.y * 0.5;\n    // cabin.y = mid + (Math.sin((animationStart + time) * 0.5) * mid);\n    this.doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor) {\n    const { doors } = this;\n    // Debug: Door toggle testing\n    if (doors[floor].state === Doors.states.OPEN) {\n      doors[floor].close();\n    } else {\n      doors[floor].open();\n    }\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Hallway extends Mesh {\n  static generateWall({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Hallway.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Hallway.scale.x : Hallway.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    hasElevator = false,\n    isEdge = false,\n    isLobby = false,\n  } = {}) {\n    const merged = new Geometry();\n    const floor = Hallway.generateWall({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    floor.translate(0, -0.0005, 0);\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Hallway.generateWall({\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Hallway.generateWall({\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Hallway.generateWall({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Hallway.generateWall({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n    this.scale.copy(Hallway.scale);\n  }\n}\n\nHallway.scale = new Vector3(4, 3, 4);\n\nexport default Hallway;\n","import { Object3D } from 'three';\nimport Dude from '@/actors/dude';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\n\nclass Building extends Object3D {\n  constructor({\n    dudes,\n    elevators,\n    floors,\n  }) {\n    super();\n    this.buttons = [];\n    this.dudes = dudes.map(({\n      pallete,\n      position,\n    }) => {\n      const mesh = new Dude(pallete);\n      mesh.position.copy(position);\n      this.add(mesh);\n      return mesh;\n    });\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      this.buttons = [\n        ...this.buttons,\n        ...elevator.buttons,\n      ];\n      this.add(elevator);\n      return elevator;\n    });\n    this.floors = floors.map((rooms, floor) => rooms.map(({ type }, room) => {\n      let isEdge = false;\n      if (room === 0) isEdge = 'left';\n      else if (room === rooms.length - 1) isEdge = 'right';\n      const hasElevator = (\n        this.elevators.findIndex(({\n          floors,\n          origin,\n        }) => (\n          origin.x === room - Math.floor(rooms.length / 2)\n          && origin.y <= floor\n          && origin.y + floors > floor\n        ))\n      ) !== -1;\n      let mesh;\n      switch (type) {\n        default:\n          mesh = new Hallway({\n            hasElevator,\n            isEdge,\n            isLobby: floor === 0,\n          });\n          break;\n      }\n      mesh.position.set(room * 4 - (Math.floor(rooms.length / 2) * 4), floor * 3, 0);\n      this.add(mesh);\n      return mesh;\n    }));\n  }\n\n  onAnimationTick(animation) {\n    const { buttons, dudes, elevators } = this;\n    buttons.forEach(button => button.onAnimationTick(animation));\n    dudes.forEach(dude => dude.onAnimationTick(animation));\n    elevators.forEach(elevator => elevator.onAnimationTick(animation));\n  }\n}\n\nexport default Building;\n","import { Vector3 } from 'three';\nimport Dude from '@/actors/dude';\nimport Building from '@/building';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  /* Spawn main dude */\n  const dude = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  dude.position.set(2, 3, 0);\n  dude.destinationMarker = new Marker();\n  scene.root.add(dude);\n  scene.root.add(dude.destinationMarker);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.target = dude.position;\n\n  /* Spawn test building */\n  const building = new Building({\n    dudes: [...Array(4)].map(() => ({\n      pallete: {\n        arms: 0x222222,\n        eyes: 0x999999 * Math.random(),\n        head: 0x999999 * Math.random(),\n        legs: 0x222222,\n        torso: 0x999999 * Math.random(),\n      },\n      position: new Vector3(\n        (Math.random() * 9 - 4.5) * 2,\n        Math.floor(Math.random() * 3) * 3,\n        0\n      ),\n    })),\n    elevators: [\n      {\n        floors: 2,\n        origin: { x: -1, y: 0 },\n      },\n      {\n        floors: 2,\n        origin: { x: 1, y: 1 },\n      },\n    ],\n    floors: [\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n    ],\n  });\n  scene.root.add(building);\n\n  /* Animation loop */\n  const floor = 1;\n  const constraintToFloor = (point) => {\n    point.x = Math.min(Math.max(point.x, -9.5), 9.5);\n    point.y = floor * 3;\n    point.z = Math.min(Math.max(point.z, -1.5), 1.5);\n    return point;\n  };\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      {\n        const hit = raycaster.intersectObjects(building.buttons)[0];\n        if (hit) {\n          const { point, object: button } = hit;\n          dude.walkTo(constraintToFloor(point.clone()), () => {\n            dude.faceTo(point);\n            button.tap();\n          });\n          return;\n        }\n      }\n      {\n        const hit = raycaster.intersectObjects(building.floors[floor])[0];\n        if (hit) {\n          constraintToFloor(hit.point);\n          dude.walkTo(hit.point);\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as game } from './game';\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.phong.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.phong.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.phong.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/engine/input';\nimport Music from '@/engine/music';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    document.getElementById('splash').style.display = 'none';\n    input.isEnabled = true;\n    music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n"],"sourceRoot":""}