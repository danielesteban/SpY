{"version":3,"sources":["webpack:///./src/core/music.js","webpack:///./src/core/input.js","webpack:///./src/meshes/bubble.js","webpack:///./src/core/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/meshes/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/meshes/building/floor.js","webpack:///./src/meshes/building/index.js","webpack:///./src/core/ui.js","webpack:///./src/ui/editor.js","webpack:///./src/meshes/moon.js","webpack:///./src/meshes/starfield.js","webpack:///./src/scenes/editor.js","webpack:///./src/actors/thiccboi.js","webpack:///./src/meshes/legacy_building/elevator/cabin.js","webpack:///./src/meshes/button.js","webpack:///./src/meshes/legacy_building/elevator/doors.js","webpack:///./src/meshes/legacy_building/elevator/shaft.js","webpack:///./src/meshes/legacy_building/elevator/index.js","webpack:///./src/meshes/legacy_building/wall.js","webpack:///./src/meshes/legacy_building/hallway.js","webpack:///./src/meshes/legacy_building/road.js","webpack:///./src/meshes/legacy_building/walkable.js","webpack:///./src/meshes/legacy_building/ai.js","webpack:///./src/meshes/legacy_building/index.js","webpack:///./src/ui/elevator.js","webpack:///./src/materials/rain.js","webpack:///./src/meshes/rain.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/core/camera.js","webpack:///./src/meshes/grid.js","webpack:///./src/core/vignette.js","webpack:///./src/core/scene.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/materials/sprite.js"],"names":["Music","_ref","_this","this","toggle","_classCallCheck","script","document","createElement","async","defer","src","body","appendChild","check","window","SC","api","initialize","client_id","tracks","shuffle","track","addEventListener","wantsToPlay","play","setTimeout","index","length","random","Math","floor","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","_ref$mount","mount","keyboard","backwards","forwards","leftwards","rightwards","tool","pointer","current","Vector2","movement","x","y","normalized","last","wheel","touches","Touches","preventSimulated","target","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","onBlur","e","preventDefault","onKeydown","onKeyup","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","keyCode","_ref2","repeat","indexOf","tagName","_ref3","isEnabled","secondary","primary","_ref4","_ref6","_slicedToArray","_ref5","rect","top","left","i","_touches$i","clientX","clientY","width","height","copy","_ref7","deltaY","_ref8","getBoundingClientRect","Bubble","_possibleConstructorReturn","_getPrototypeOf","call","SpriteMaterial","depthTest","scale","set","visible","Sprite","lines","delay","arguments","undefined","_this$material","material","renderer","ctx","clearRect","fillStyle","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","map","needsUpdate","clearTimeout","timer","display","Actor","bonesOrigin","collisionGeometry","geometry","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","add","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","Object","keys","forEach","bone","skeleton","bones","Bones","position","mixer","AnimationMixer","actor_assertThisInitialized","actions","animations","reduce","action","_defineProperty","clipAction","animation","idle","timeScale","rotationAux","movementAux","Vector3","collisionMesh","Mesh","MeshBasicMaterial","opacity","transparent","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","merge","vertices","a","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","computeVertexNormals","computeBoundingSphere","delta","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","min","max","abs","waypoint","path","distance","distanceTo","step","sub","normalize","multiplyScalar","faceTo","setAnimation","fadeOut","reset","fadeIn","point","angle","z","PI","bubble","boundingSphere","radius","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","QuaternionKeyframeTrack","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","dude_possibleConstructorReturn","dude_getPrototypeOf","CylinderBufferGeometry","translate","CylinderGeometry","color","SphereGeometry","hat","leftEye","eyes","rightEye","clone","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","rotateX","marker_possibleConstructorReturn","marker_getPrototypeOf","time","inc","sin","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","root","onAnimationTick","camera","grid","getPointerFrame","processPointer","hit","getRaycaster","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","pitch","updateOrbit","Floor","floor_classCallCheck","floor_possibleConstructorReturn","floor_getPrototypeOf","_Floor$defaultGridSiz","defaultGridSize","Grid","setTile","type","tile","nodes","walkable","tiles","air","plane","PlaneBufferGeometry","intersect","setIndex","BufferAttribute","Uint16Array","addAttribute","GridMaterial","updateTiles","isActive","Object3D","avg","Color","r","g","offsetHSL","indices","colors","normals","pushFace","n","offset","apply","floor_toConsumableArray","getNodeAt","wall","getIndex","getAttribute","normal","setArray","_isActive","active","array","Building","meta","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","floors","activeFloor","_activeFloor","UI","ui_classCallCheck","wrapper","content","removeChild","tag","node","firstChild","EditorUI","editor_classCallCheck","editor_possibleConstructorReturn","editor_getPrototypeOf","buttons","label","innerText","setTool","value","setColor","onColorChange","onToolChange","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","fog","Starfield","starfield_classCallCheck","count","size","aux","o","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","scenes_editor","starfield","building","tilt","_building$floors$buil","ui","lastTile","processKeyboard","editor_objectSpread","raycaster","intersectObjects","constructor","addScaledVector","ThiccBoi","thiccboi_classCallCheck","thiccboi_possibleConstructorReturn","thiccboi_getPrototypeOf","Cabin","cabin_classCallCheck","BoxGeometry","setHSL","splice","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","origin","ret","tapping","ThreeMath","smoothstep","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","MOVING","OPEN","close","open","children","animationStep","Shaft","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","findIndex","p","travel","to","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","ceil","wall_toConsumableArray","j","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","Road","road_classCallCheck","markings","road_possibleConstructorReturn","road_getPrototypeOf","MeshLambertMaterial","Walkable","walkable_classCallCheck","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","AI","ai_classCallCheck","actors","actor","lastThought","IDLE","WALKING","destination","setWalkableAt","ai_slicedToArray","slice","elevators","legacy_building_classCallCheck","legacy_building_getPrototypeOf","ai","legacy_building_assertThisInitialized","layout","split","heightmap","legacy_building_toConsumableArray","meshes","rooms","room","mesh","elevatorIndex","road","addToGrid","addActor","child","ElevatorUI","ui_elevator_classCallCheck","ui_elevator_possibleConstructorReturn","ui_elevator_getPrototypeOf","onFloor","onExit","empty","unmount","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","replace","join","rain_possibleConstructorReturn","rain_getPrototypeOf","rain_objectSpread","name","uniforms","UniformsUtils","fragmentShader","diffuse","ShaderMaterial","Rain","meshes_rain_classCallCheck","meshes_rain_possibleConstructorReturn","meshes_rain_getPrototypeOf","numDrops","setDynamic","ripples","frustumCulled","offsets","drop","attributes","InstancedBufferGeometry","InstancedBufferAttribute","drops","resetDrop","testHeight","func","game","rain","reverse","maxHeight","testMeshes","game_toConsumableArray","setHeightTest","getHeight","spawn","isWalkableAt","elevatorUI","_building$floors$floo","object","parent","onDestination","say","getPath","elevatorFloor","show","addPassenger","removePassenger","tap","__webpack_require__","d","__webpack_exports__","Camera","Infinity","speed","Raycaster","_assertThisInitialized","forward","right","worldUp","PerspectiveCamera","setFromCamera","far","hasUpdated","cos","negate","crossVectors","ray","direction","lookAt","_ref$background","background","_ref$size","_ref$subdivisions","subdivisions","grid_classCallCheck","grid_possibleConstructorReturn","grid_getPrototypeOf","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","OrthographicCamera","sprite","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Scene","grd","createRadialGradient","addColorStop","beginPath","fill","clearDepth","render","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","vignette","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","getDelta","oldTime","clear","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","lambert","primaryGrid","secondaryGrid","extensions","derivatives","lights","setImmediate","fonts","loaded","_core_input__WEBPACK_IMPORTED_MODULE_0__","_core_music__WEBPACK_IMPORTED_MODULE_1__","_core_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","splash","music","location","hash","Scenes","reload","test","fontTester","style","fontFamily","initialWidth","once","process","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.3427f8505fb31256a1fd.js","sourcesContent":["class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.keyboard = {\n      backwards: false,\n      forwards: false,\n      leftwards: false,\n      rightwards: false,\n      tool: 1,\n    };\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('blur', this.onBlur.bind(this), false);\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('keydown', this.onKeydown.bind(this), false);\n    window.addEventListener('keyup', this.onKeyup.bind(this), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onBlur() {\n    const { keyboard } = this;\n    keyboard.forwards = false;\n    keyboard.backwards = false;\n    keyboard.leftwards = false;\n    keyboard.rightwards = false;\n  }\n\n  onKeydown({ keyCode, repeat, target }) {\n    const { keyboard } = this;\n    if (\n      repeat\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = true;\n        break;\n      case 83:\n        keyboard.backwards = true;\n        break;\n      case 65:\n        keyboard.leftwards = true;\n        break;\n      case 68:\n        keyboard.rightwards = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    const { keyboard } = this;\n    if (repeat) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = false;\n        break;\n      case 83:\n        keyboard.backwards = false;\n        break;\n      case 65:\n        keyboard.leftwards = false;\n        break;\n      case 68:\n        keyboard.rightwards = false;\n        break;\n      default:\n        if (keyCode >= 49 && keyCode <= 57) {\n          keyboard.tool = keyCode - 49;\n        }\n        break;\n    }\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled || e.target.tagName !== 'CANVAS') return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/meshes/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    bonesOrigin,\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    Object.keys(bonesOrigin).forEach((bone) => {\n      this.skeleton.bones[Actor.Bones[bone]].position.copy(bonesOrigin[bone]);\n    });\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: Dude.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 24);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/meshes/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processPointer(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import { Grid } from 'pathfinding';\nimport {\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneBufferGeometry,\n  VertexColors,\n  Object3D,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Floor extends Object3D {\n  constructor(grid) {\n    super();\n    const { width, height } = Floor.defaultGridSize;\n    this.grid = new Grid(width, height);\n    this.grid.setTile = function setTile({\n      color,\n      type,\n      x,\n      y,\n    }) {\n      const tile = this.nodes[y][x];\n      tile.color = color;\n      tile.type = type;\n      tile.walkable = type !== Floor.tiles.floor;\n    };\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        if (grid) {\n          // TODO !!!\n          console.error('Slow down! Grid loading is not yet implemented!!');\n        } else {\n          this.grid.setTile({\n            x,\n            y,\n            type: Floor.tiles.air,\n          });\n        }\n      }\n    }\n    const plane = new PlaneBufferGeometry(width, height, 2, 2);\n    plane.rotateX(Math.PI * -0.5);\n    plane.translate(width * 0.5, 0, height * 0.5);\n    this.intersect = new Mesh(\n      plane,\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.add(this.intersect);\n    const tile = new BufferGeometry();\n    tile.setIndex(new BufferAttribute(new Uint16Array(), 1));\n    tile.addAttribute('position', new BufferAttribute(new Float32Array(), 3));\n    tile.addAttribute('color', new BufferAttribute(new Float32Array(), 3));\n    tile.addAttribute('normal', new BufferAttribute(new Float32Array(), 3));\n    this.tiles = new Mesh(\n      tile,\n      new GridMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n    this.updateTiles();\n    this.add(this.tiles);\n    this.isActive = false;\n  }\n\n  setTile({\n    color,\n    type,\n    x,\n    y,\n  }) {\n    const { grid } = this;\n    if (\n      x < 0\n      || x > grid.width - 1\n      || y < 0\n      || y > grid.height - 1\n    ) {\n      return;\n    }\n    color = new Color(color);\n    const avg = (color.r + color.g + color.b) / 3 * 0.1;\n    color.offsetHSL(\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg\n    );\n    grid.setTile({\n      color,\n      type,\n      x,\n      y,\n    });\n    this.updateTiles();\n  }\n\n  get isActive() {\n    return this._isActive;\n  }\n\n  set isActive(active) {\n    const { intersect, tiles } = this;\n    intersect.visible = active;\n    tiles.visible = !!(tiles.geometry.getAttribute('position').array.length && active);\n    this._isActive = active;\n  }\n\n  updateTiles() {\n    const indices = [];\n    const vertices = [];\n    const colors = [];\n    const normals = [];\n    const pushFace = (v, n, { r, g, b }) => {\n      const offset = vertices.length / 3;\n      vertices.push(...v);\n      colors.push(\n        r, g, b,\n        r, g, b,\n        r, g, b,\n        r, g, b\n      );\n      normals.push(...n);\n      indices.push(\n        offset, offset + 1, offset + 2,\n        offset + 2, offset + 3, offset\n      );\n    };\n    const pushTile = (x, y, color) => {\n      pushFace(\n        [\n          x, 0, y + 1,\n          x + 1, 0, y + 1,\n          x + 1, 0, y,\n          x, 0, y,\n        ],\n        [\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n        ],\n        color\n      );\n    };\n    const pushWall = (x, y, color) => {\n      const height = 3;\n      pushFace(\n        [\n          x, 0, y + 1,\n          x + 1, 0, y + 1,\n          x + 1, height, y + 1,\n          x, height, y + 1,\n        ],\n        [\n          0, 0, 1,\n          0, 0, 1,\n          0, 0, 1,\n          0, 0, 1,\n        ],\n        color\n      );\n      pushFace(\n        [\n          x + 1, 0, y,\n          x, 0, y,\n          x, height, y,\n          x + 1, height, y,\n        ],\n        [\n          0, 0, -1,\n          0, 0, -1,\n          0, 0, -1,\n          0, 0, -1,\n        ],\n        color\n      );\n      pushFace(\n        [\n          x, 0, y,\n          x, 0, y + 1,\n          x, height, y + 1,\n          x, height, y,\n        ],\n        [\n          1, 0, 0,\n          1, 0, 0,\n          1, 0, 0,\n          1, 0, 0,\n        ],\n        color\n      );\n      pushFace(\n        [\n          x + 1, 0, y + 1,\n          x + 1, 0, y,\n          x + 1, height, y,\n          x + 1, height, y + 1,\n        ],\n        [\n          -1, 0, 0,\n          -1, 0, 0,\n          -1, 0, 0,\n          -1, 0, 0,\n        ],\n        color\n      );\n      pushFace(\n        [\n          x, height, y + 1,\n          x + 1, height, y + 1,\n          x + 1, height, y,\n          x, height, y,\n        ],\n        [\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n        ],\n        color\n      );\n    };\n    const { grid, tiles } = this;\n    const { geometry } = tiles;\n    for (let y = 0; y < grid.height; y += 1) {\n      for (let x = 0; x < grid.width; x += 1) {\n        const tile = grid.getNodeAt(x, y);\n        if (tile.type !== Floor.tiles.air) {\n          switch (tile.type) {\n            case Floor.tiles.wall:\n              pushWall(x, y, tile.color);\n              break;\n            default:\n              pushTile(x, y, tile.color);\n              break;\n          }\n        }\n      }\n    }\n    const index = geometry.getIndex();\n    const position = geometry.getAttribute('position');\n    const color = geometry.getAttribute('color');\n    const normal = geometry.getAttribute('normal');\n    index.setArray(new Uint16Array(indices));\n    index.needsUpdate = true;\n    position.setArray(new Float32Array(vertices));\n    position.needsUpdate = true;\n    color.setArray(new Float32Array(colors));\n    color.needsUpdate = true;\n    normal.setArray(new Float32Array(normals));\n    normal.needsUpdate = true;\n    geometry.computeBoundingSphere();\n    if (this.isActive) {\n      tiles.visible = true;\n    }\n  }\n}\n\nFloor.tiles = {\n  air: 0,\n  floor: 1,\n  wall: 2,\n};\n\nFloor.defaultGridSize = {\n  width: 48,\n  height: 48,\n};\n\nexport default Floor;\n","import {\n  Object3D,\n} from 'three';\nimport Floor from './floor';\n\nclass Building extends Object3D {\n  constructor(meta = {}) {\n    super();\n    this.floors = meta.floors ? (\n      meta.floors.map(grid => new Floor(grid))\n    ) : [new Floor()];\n    this.floors.forEach(floor => this.add(floor));\n    this.activeFloor = 0;\n  }\n\n  get activeFloor() {\n    return this._activeFloor;\n  }\n\n  set activeFloor(floor) {\n    const { floors } = this;\n    if (this._activeFloor !== undefined) {\n      floors[this._activeFloor].isActive = false;\n    }\n    floors[floor].isActive = true;\n    this._activeFloor = floor;\n  }\n}\n\nexport default Building;\n","class UI {\n  constructor(className) {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = className;\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default UI;\n","import UI from '@/core/ui';\n\nclass EditorUI extends UI {\n  constructor() {\n    super('toolbar');\n    this.buttons = ['Air', 'Floor', 'Wall'].map((label, tool) => {\n      const button = this.add('button');\n      button.innerText = label;\n      button.addEventListener('click', () => {\n        this.setTool(tool);\n      }, false);\n      return button;\n    });\n    this.setTool(1);\n    this.color = this.add('input');\n    this.color.type = 'color';\n    this.color.addEventListener('change', ({ target: { value: color } }) => {\n      this.setColor(color);\n    }, false);\n    this.setColor('#bebebe');\n    this.mount();\n  }\n\n  setColor(value) {\n    const { color } = this;\n    color.value = value;\n    if (this.onColorChange) {\n      this.onColorChange(value);\n    }\n  }\n\n  setTool(value) {\n    const { buttons } = this;\n    buttons.forEach((button, tool) => {\n      button.className = tool === value ? 'active' : '';\n    });\n    this.tool = value;\n    if (this.onToolChange) {\n      this.onToolChange(value);\n    }\n  }\n}\n\nexport default EditorUI;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xBEBEBE,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Building from '@/meshes/building';\nimport EditorUI from '@/ui/editor';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn building\n  const building = new Building();\n  scene.root.add(building);\n\n  // Setup camera\n  scene.camera.distance = 8;\n  scene.camera.pitch = Math.PI * 0.2;\n  scene.camera.tilt = Math.PI * -0.5;\n  scene.camera.updateOrbit();\n  const { width, height } = building.floors[building.activeFloor].grid;\n  scene.camera.root.position.set(\n    width * 0.5 + 0.5,\n    0,\n    height * 0.5 + 0.5\n  );\n  // scene.camera.maxHeight = 2.9;\n\n  // UI\n  const ui = new EditorUI();\n  ui.onToolChange = (tool) => { input.keyboard.tool = tool; };\n\n  const lastTile = { x: -1, y: -1, tool: -1 };\n  scene.onAnimationTick = ({ delta }) => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    camera.processKeyboard({ ...input.keyboard, delta });\n    if (ui.tool !== input.keyboard.tool) {\n      ui.setTool(input.keyboard.tool);\n    }\n    if (!pointer.primary) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    const floor = building.floors[building.activeFloor];\n    const hit = raycaster.intersectObjects([floor.intersect, floor.tiles])[0];\n    if (hit) {\n      const { tiles } = floor.constructor;\n      const { tool } = input.keyboard;\n      hit.point.addScaledVector(\n        hit.face.normal,\n        ~[tiles.air, tiles.floor].indexOf(tool) ? -0.5 : 0.5\n      );\n      const x = Math.floor(hit.point.x);\n      const y = Math.floor(hit.point.z);\n      const tile = floor.grid.getNodeAt(x, y);\n      if (\n        pointer.primaryDown\n        || (\n          ~[tiles.air, tiles.floor].indexOf(tool)\n          && ~[tiles.air, tiles.floor].indexOf(tile.type)\n          && (x !== lastTile.x || y !== lastTile.y)\n        )\n      ) {\n        lastTile.x = x;\n        lastTile.y = y;\n        lastTile.tool = tool;\n        switch (tool) {\n          case tiles.air:\n          case tiles.floor:\n          case tiles.wall:\n            floor.setTile({\n              type: tool,\n              color: ui.color.value,\n              x,\n              y,\n            });\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  };\n};\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass ThiccBoi extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: ThiccBoi.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: ThiccBoi.geometry(palette),\n      material: ThiccBoi.material,\n    });\n  }\n}\n\nThiccBoi.bones = {\n  hip: new Vector3(0, 0.4, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.325, 0.45, 0),\n  rightArm: new Vector3(0.325, 0.45, 0),\n  leftLeg: new Vector3(-0.08, 0.1, 0),\n  rightLeg: new Vector3(0.08, 0.1, 0),\n};\n\nThiccBoi.geometry = (palette) => {\n  // const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  const torso = new SphereGeometry(0.26, 8, 8);\n  torso.translate(0, 0.25, 0);\n  torso.scale(1.5, 1, 1.5);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new CylinderGeometry(0.175, 0.15, 0.4, 6);\n  // const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.03, 0.075, 0.3, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.15, 0);\n  rightArm.translate(0, -0.15, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.1, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nThiccBoi.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default ThiccBoi;\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/meshes/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += (animation.delta * 0.5) / Math.abs(route.travel);\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshLambertMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Road extends Mesh {\n  constructor() {\n    const geometry = new Geometry();\n    const track = new PlaneGeometry(512, 4);\n    track.rotateX(Math.PI * -0.5);\n    track.faces.forEach((face) => {\n      face.color.set(0x222233);\n      face.materialIndex = 0;\n    });\n    const markings = new PlaneGeometry(1, 0.2);\n    markings.rotateX(Math.PI * -0.5);\n    markings.faces.forEach((face) => {\n      face.color.set(0xBEBEBE);\n      face.materialIndex = 0;\n    });\n    for (let x = -128; x < 128; x += 5) {\n      geometry.merge(\n        markings.clone().translate(x, 0.001, 0)\n      );\n    }\n    geometry.merge(track);\n    geometry.translate(0, 0, 4);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshLambertMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Road;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.floor(Math.min(Math.max(point.x, 0), grid.width - 1));\n    point.z = Math.floor(Math.min(Math.max(point.z, 0), grid.height - 1));\n    return point;\n  }\n}\n\nexport default Walkable;\n","import {\n  Vector3,\n} from 'three';\n\nclass AI {\n  constructor(building) {\n    this.building = building;\n    this.actors = [];\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    const { actors } = this;\n    actors.push({\n      actor,\n      floor,\n      position,\n      lastThought: 0,\n      state: AI.states.IDLE,\n    });\n  }\n\n  onAnimationTick({ time }) {\n    const { actors, building } = this;\n    actors.forEach((actor) => {\n      const {\n        floor,\n        position,\n        lastThought,\n        state,\n      } = actor;\n      if (state === AI.states.IDLE) {\n        if (time - lastThought > 3) {\n          actor.lastThought = time;\n          if (Math.random() > 0.75) {\n            actor.state = AI.states.WALKING;\n          }\n        }\n        switch (actor.state) {\n          case AI.states.WALKING: {\n            const { walkable } = building.floors[floor];\n            const { finder, grid } = walkable;\n            let destination;\n            let path;\n            grid.setWalkableAt(position.x, position.z, true);\n            do {\n              destination = {\n                x: Math.floor(Math.random() * grid.width),\n                z: Math.floor(Math.random() * grid.height),\n              };\n              path = finder.findPath(\n                position.x, position.z,\n                destination.x, destination.z,\n                grid.clone()\n              )\n                .map(([x, z]) => (\n                  walkable.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n                ));\n            } while (\n              path.length < 2\n            );\n            grid.setWalkableAt(destination.x, destination.z, false);\n            actor.actor.walk(path.slice(1), () => {\n              position.x = destination.x;\n              position.z = destination.z;\n              actor.lastThought = time;\n              actor.state = AI.states.IDLE;\n            });\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n\nAI.states = {\n  IDLE: 0,\n  WALKING: 1,\n};\n\nexport default AI;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Road from './road';\nimport Wall from './wall';\nimport Walkable from './walkable';\nimport AI from './ai';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.ai = new AI(this);\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n    this.road = new Road();\n    this.add(this.road);\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    this.addToGrid({ floor, mesh: actor, position });\n    this.ai.addActor({ actor, floor, position });\n  }\n\n  addToGrid({\n    floor,\n    mesh,\n    position,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(position.x, position.z, false);\n    mesh.position.set(position.x + 0.5, 0, position.z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { ai, children } = this;\n    ai.onAnimationTick(animation);\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","import UI from '@/core/ui';\n\nclass ElevatorUI extends UI {\n  constructor() {\n    super('dialog');\n  }\n\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Object3D,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Object3D {\n  constructor() {\n    super();\n    {\n      const position = new Float32Array(Rain.numDrops * 3);\n      const geometry = new BufferGeometry();\n      geometry.addAttribute('position', (new BufferAttribute(position, 3).setDynamic(true)));\n      const ripples = new Points(\n        geometry,\n        new PointsMaterial({\n          color: 0xAAAADD,\n          fog: true,\n          size: 0.01,\n          sizeAttenuation: true,\n          transparent: true,\n          opacity: 1 / 3,\n        })\n      );\n      ripples.frustumCulled = false;\n      ripples.offsets = position;\n      this.add(ripples);\n      this.ripples = ripples;\n    }\n    {\n      const drop = (new BufferGeometry()).fromGeometry(\n        (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n      ).attributes.position.array;\n      const offsets = new Float32Array(Rain.numDrops * 3);\n      const geometry = new InstancedBufferGeometry();\n      geometry.addAttribute('position', new BufferAttribute(drop, 3));\n      geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n      const drops = new Mesh(\n        geometry,\n        new RainMaterial({\n          color: 0xAAAADD,\n        })\n      );\n      drops.frustumCulled = false;\n      drops.drop = new Vector3();\n      drops.offsets = offsets;\n      this.add(drops);\n      this.drops = drops;\n      for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n        this.resetDrop(i);\n        this.ripples.offsets[i] = 0;\n        this.ripples.offsets[i + 1] = -999;\n        this.ripples.offsets[i + 2] = 0;\n      }\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { drops, position, ripples } = this;\n    const { offsets } = drops;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        offsets[i + 1] = height;\n        this.resetDrop(i);\n      }\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drops, position, ripples } = this;\n    const { drop, offsets } = drops;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    ripples.offsets[i] = offsets[i];\n    ripples.offsets[i + 1] = offsets[i + 1] + 0.01;\n    ripples.offsets[i + 2] = offsets[i + 2];\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { drops, ripples } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport Building from '@/meshes/legacy_building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/meshes/marker';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 4,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 4,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const actors = [Dude, ThiccBoi, ThiccBoi];\n  const dudes = [...Array(building.floors.length * actors.length)].map(() => {\n    const Actor = actors[Math.floor(Math.random() * actors.length)];\n    const dude = new Actor({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * building.floors.length);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * (grid.height - 1)),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addActor({\n      floor,\n      actor: dude,\n      position: spawn,\n    });\n    dude.position.y += 0.001;\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const from = player.position.clone();\n        const to = dude.position.clone();\n        to.z += 1;\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    elevator.removePassenger(player);\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const from = player.position.clone();\n          const to = point.clone();\n          const path = walkable.getPath(from, to);\n          if (path.length) {\n            walkable.grid.setWalkableAt(from.x, from.z, true);\n            if (path.length > 1) {\n              player.walk(path.slice(1), onDestination);\n            } else {\n              onDestination();\n            }\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const from = player.position.clone();\n        const to = point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const from = player.position.clone();\n        const to = hit.point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n          });\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as editor } from './editor';\nexport { default as game } from './game';\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.forward = new Vector3();\n    this.right = new Vector3();\n    this.worldUp = new Vector3(0, 1, 0);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processPointer({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 16);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  processKeyboard({\n    backwards,\n    delta,\n    forwards,\n    leftwards,\n    rightwards,\n  }) {\n    const {\n      forward,\n      right,\n      tilt,\n      pitch,\n      root: { position },\n      worldUp,\n    } = this;\n    const step = delta * 4;\n    forward.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      0,\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize().negate();\n    right.crossVectors(forward, worldUp);\n    if (forwards) {\n      position.addScaledVector(forward, step);\n    }\n    if (backwards) {\n      position.addScaledVector(forward, -step);\n    }\n    if (leftwards) {\n      position.addScaledVector(right, -step);\n    }\n    if (rightwards) {\n      position.addScaledVector(right, step);\n    }\n  }\n\n  updateOrbit() {\n    const {\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, 0.1), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.001);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from '@/meshes/grid';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.6);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.lambert.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n        'varying float vOrientation;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n        'vOrientation = normal.y != 0.0 ? 1.0 : (normal.x != 0.0 ? 2.0 : 0.0);',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.lambert.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'varying float vOrientation;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = (vOrientation > 1.5 ? vPosition.zy : (vOrientation > 0.5 ? vPosition.xz : vPosition.xy)) * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.lambert.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/core/input';\nimport Music from '@/core/music';\nimport Scene from '@/core/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst splash = document.getElementById('splash');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    splash.style.display = 'none';\n    input.isEnabled = true;\n    if (__PRODUCTION__) music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n\nif (window.process && window.process.type) {\n  // We're running inside electron.\n  // Allow the user to exit with the ESC key.\n  window.addEventListener('keydown', ({ keyCode, repeat }) => {\n    if (keyCode === 27 && !repeat) {\n      if (splash.style.display !== 'none') {\n        window.close();\n      } else {\n        splash.style.display = '';\n        input.isEnabled = false;\n        input.touches.once('end', () => {\n          splash.style.display = 'none';\n          input.isEnabled = true;\n        });\n      }\n    }\n  }, false);\n}\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}