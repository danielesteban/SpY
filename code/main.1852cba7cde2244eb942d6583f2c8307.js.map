{"version":3,"sources":["webpack:///./src/engine/input.js","webpack:///./src/engine/camera.js","webpack:///./src/materials/grid.js","webpack:///./src/engine/grid.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/building/hallway.js","webpack:///./src/building/shaft.js","webpack:///./src/building/index.js","webpack:///./src/scenes/game.js","webpack:///./src/index.js"],"names":["Input","_ref","_ref$mount","mount","document","body","_classCallCheck","this","pointer","current","Vector2","movement","x","y","normalized","last","raycaster","Raycaster","wheel","touches","Touches","window","filtered","preventSimulated","target","on","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","addEventListener","e","preventDefault","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","button","_ref2","primary","secondary","_ref4","_slicedToArray","_ref3","_this$size","size","width","height","copy","_ref5","deltaY","_ref6","getBoundingClientRect","Camera","_this","camera_classCallCheck","_getPrototypeOf","call","distance","offset","Vector3","tilt","Math","PI","pitch","speed","step","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","delta","position","distanceTo","sub","normalize","multiplyScalar","hasUpdated","min","max","set","cos","sin","lookAt","GridMaterial","arguments","length","undefined","_ref$color","color","_ref$size","_ref$subdivisions","subdivisions","rest","_objectWithoutProperties","grid_classCallCheck","vertexShader","ShaderLib","phong","replace","join","primaryGrid","secondaryGrid","fragmentShader","concat","grid_possibleConstructorReturn","grid_getPrototypeOf","grid_objectSpread","name","uniforms","UniformsUtils","clone","extensions","derivatives","fog","lights","diffuse","value","ShaderMaterial","Grid","_ref$background","background","Color","engine_grid_classCallCheck","geometry","PlaneBufferGeometry","translate","rotateX","engine_grid_possibleConstructorReturn","engine_grid_getPrototypeOf","material","Mesh","Scene","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","floor","z","render","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Actor","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actor_assertThisInitialized","actions","Object","keys","animations","reduce","action","actor_objectSpread","actor_defineProperty","clipAction","idle","timeScale","play","rotationAux","movementAux","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destination","destinationMarker","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","abs","setAnimation","visible","onDestinationCallback","fadeOut","reset","fadeIn","point","faceTo","angle","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","boundingSphere","center","radius","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","marker_possibleConstructorReturn","marker_getPrototypeOf","transparent","scale","inc","s","opacity","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","map","v","i","dude","random","walkTo","mainDudeX","mainDudeZ","mainDude","debug_slicedToArray","getPointerFrame","processInput","setFromCamera","hit","intersectObject","Hallway","_ref2$hasElevator","hasElevator","_ref2$isEdge","isEdge","hallway_classCallCheck","generateWall","orientation","wall","rotateY","hallway_possibleConstructorReturn","hallway_getPrototypeOf","side","DoubleSide","_ref$width","_ref$height","PlaneGeometry","ceil","setHSL","Shaft","floors","origin","shaft_classCallCheck","back","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Building","elevators","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","pallete","mesh","shaft","rooms","room","type","findIndex","game","positionAux","getWorldPosition","building","game_toConsumableArray","intersectObjects","object","getElementById","once","style","display","route","location","hash","split","slice","Scenes"],"mappings":"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","file":"code/main.23cb0add0d6332102049.js","sourcesContent":["import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      filtered: true,\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown({ button }) {\n    const { pointer } = this;\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove(e, [x, y]) {\n    const { pointer, size: { width, height } } = this;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button }) {\n    const { pointer } = this;\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { pointer } = this;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.size = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.01, 2048);\n    this.distance = 4;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.65;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, 0), Math.PI * 0.5);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 8);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      offset,\n      pitch,\n      position,\n      root,\n      tilt,\n    } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance);\n    this.lookAt(root.position);\n    position.add(offset);\n  }\n}\n\nexport default Camera;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.phong.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.phong.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.phong.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import {\n  Color,\n  Mesh,\n  PlaneBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new PlaneBufferGeometry(2048, 2048, 2, 2);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x336699);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.025);\n    this.root.add(new AmbientLight(0x454545));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 1, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.2);\n    secondaryLight.position.set(-1, -1, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x335555) });\n    this.root.add(this.grid);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(Math.floor(camera.root.position.x), 0, Math.floor(camera.root.position.z));\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n      if (this.onDestinationCallback) {\n        this.onDestinationCallback();\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point) {\n    const { destinationMarker } = this;\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    this.faceTo(point);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walkTo(point);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = () => {\n    const { camera, grid } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObject(grid)[0];\n      if (!hit) return;\n      pack.walkTo(hit.point);\n    }\n  };\n};\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Hallway extends Mesh {\n  static generateWall({\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Hallway.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Hallway.scale.x : Hallway.scale.y))\n    );\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.0125, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      face.color.copy(color);\n    });\n    return wall;\n  }\n\n  constructor({\n    hasElevator = false,\n    isEdge = false,\n  } = {}) {\n    const merged = new Geometry();\n    const floor = Hallway.generateWall({\n      material: 0,\n      orientation: 'horizontal',\n    });\n    floor.translate(0, -0.0005, 0);\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Hallway.generateWall({\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Hallway.generateWall({\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    const wall = Hallway.generateWall({\n      height: 1 / 3,\n      material: 1,\n    });\n    wall.rotateY(Math.PI);\n    wall.translate(0, 1 / 3 / 2, 0.5);\n    merged.merge(wall);\n    if (isEdge) {\n      const wall = Hallway.generateWall({\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n      wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n      merged.merge(wall);\n    }\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n    this.scale.copy(Hallway.scale);\n  }\n}\n\nHallway.scale = new Vector3(4, 3, 4);\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    floors,\n    origin,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.translate(0, 0, -1.5);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color: Shaft.color,\n        side: DoubleSide,\n      })\n    );\n    this.position.x = origin.x * 4;\n    this.position.y = origin.y * 3;\n    this.scale.copy(Shaft.scale);\n  }\n}\n\nShaft.color = 0x333333;\nShaft.scale = new Vector3(2, 3, 2);\n\nexport default Shaft;\n","import { Object3D } from 'three';\nimport Dude from '@/actors/dude';\nimport Hallway from './hallway';\nimport Shaft from './shaft';\n\nclass Building extends Object3D {\n  constructor({\n    dudes,\n    elevators,\n    floors,\n  }) {\n    super();\n    this.dudes = dudes.map(({\n      pallete,\n      position,\n    }) => {\n      const mesh = new Dude(pallete);\n      mesh.position.copy(position);\n      this.add(mesh);\n      return mesh;\n    });\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const shaft = new Shaft({ floors, origin });\n      this.add(shaft);\n      return {\n        floors,\n        origin,\n        shaft,\n      };\n    });\n    this.floors = floors.map((rooms, floor) => rooms.map(({ type }, room) => {\n      let isEdge = false;\n      if (room === 0) isEdge = 'left';\n      else if (room === rooms.length - 1) isEdge = 'right';\n      const hasElevator = (\n        this.elevators.findIndex(({\n          floors,\n          origin,\n        }) => (\n          origin.x === room - Math.floor(rooms.length / 2)\n          && origin.y <= floor\n          && origin.y + floors > floor\n        ))\n      ) !== -1;\n      let mesh;\n      switch (type) {\n        default:\n          mesh = new Hallway({\n            hasElevator,\n            isEdge,\n          });\n          break;\n      }\n      mesh.position.set(room * 4 - (Math.floor(rooms.length / 2) * 4), floor * 3, 0);\n      this.add(mesh);\n      return mesh;\n    }));\n  }\n}\n\nexport default Building;\n","import { Vector3 } from 'three';\nimport Dude from '@/actors/dude';\nimport Building from '@/building';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  /* Spawn main dude */\n  const dude = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  dude.position.set(2, 3, 0);\n  dude.destinationMarker = new Marker();\n  const positionAux = new Vector3();\n  dude.onDestinationCallback = () => {\n    scene.camera.getWorldPosition(positionAux);\n    dude.faceTo(positionAux);\n  };\n  scene.root.add(dude);\n  scene.root.add(dude.destinationMarker);\n  scene.camera.target = dude.position;\n\n  /* Spawn test building */\n  const building = new Building({\n    dudes: [...Array(4)].map(() => ({\n      pallete: {\n        arms: 0x222222,\n        eyes: 0x999999 * Math.random(),\n        head: 0x999999 * Math.random(),\n        legs: 0x222222,\n        torso: 0x999999 * Math.random(),\n      },\n      position: new Vector3(\n        Math.random() * 19 - 9.5,\n        Math.floor(Math.random() * 3) * 3,\n        0\n      ),\n    })),\n    elevators: [\n      {\n        floors: 2,\n        origin: { x: -1, y: 0 },\n      },\n      {\n        floors: 2,\n        origin: { x: 1, y: 1 },\n      },\n    ],\n    floors: [\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n    ],\n  });\n  scene.root.add(building);\n\n  /* Animation loop */\n  const floor = 1;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    if (camera.processInput(pointer) && !dude.destination) {\n      dude.onDestinationCallback();\n    }\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObjects([\n        // ...building.elevators,\n        ...building.floors[floor],\n      ])[0];\n      if (!hit) return;\n      hit.point.x = Math.min(Math.max(hit.point.x, -9.5), 9.5);\n      hit.point.y = hit.object.position.y;\n      hit.point.z = Math.min(Math.max(hit.point.z, -1.5), 1.5);\n      dude.walkTo(hit.point);\n    }\n  };\n};\n","import Input from '@/engine/input';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst scene = new Scene({ mount });\n\ninput.touches.once('start', () => {\n  document.getElementById('credits').style.display = 'none';\n});\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nScenes[route]({ input, scene });\n"],"sourceRoot":""}