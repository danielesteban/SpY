{"version":3,"sources":["webpack:///./src/engine/camera.js","webpack:///./src/engine/grid.js","webpack:///./src/engine/moon.js","webpack:///./src/engine/starfield.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/music.js","webpack:///./src/engine/input.js","webpack:///./src/materials/sprite.js","webpack:///./src/items/bubble.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/building/elevator/cabin.js","webpack:///./src/items/button.js","webpack:///./src/building/elevator/doors.js","webpack:///./src/building/elevator/shaft.js","webpack:///./src/building/elevator/index.js","webpack:///./src/building/hallway.js","webpack:///./src/building/index.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js"],"names":["Camera","_this","_classCallCheck","this","_getPrototypeOf","call","distance","maxHeight","Infinity","offset","tilt","Math","PI","pitch","speed","step","Vector3","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","delta","_ref","position","target","distanceTo","copy","sub","normalize","multiplyScalar","movement","_ref2","secondary","wheel","hasUpdated","x","y","min","max","set","cos","sin","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","size","_ref$subdivisions","subdivisions","grid_classCallCheck","geometry","CircleBufferGeometry","translate","rotateX","grid_possibleConstructorReturn","grid_getPrototypeOf","GridMaterial","material","color","Mesh","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","MeshBasicMaterial","fog","Starfield","starfield_classCallCheck","radius","BufferGeometry","Float32Array","count","aux","i","floor","random","o","z","addAttribute","BufferAttribute","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","Scene","_ref$mount","mount","document","body","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","bind","setPixelRatio","window","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","starfield","addEventListener","onResize","ShaderChunk","fog_pars_vertex","replace","fog_vertex","fog_pars_fragment","fog_fragment","join","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","render","end","_mount$getBoundingCli","getBoundingClientRect","width","height","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Music","toggle","api","SC","initialize","client_id","tracks","shuffle","track","index","temp","play","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","pointer","current","Vector2","normalized","last","raycaster","Raycaster","touches","Touches","preventSimulated","onPointerDown","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","e","preventDefault","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","isEnabled","primary","_ref4","_slicedToArray","_ref3","rect","top","left","_touches$i","clientX","clientY","_ref5","deltaY","_ref6","SpriteMaterial","rest","_objectWithoutProperties","createElement","texture","CanvasTexture","_possibleConstructorReturn","map","ctx","getContext","ThreeSprite","Bubble","bubble_classCallCheck","bubble_possibleConstructorReturn","bubble_getPrototypeOf","scale","visible","Sprite","lines","delay","_this$material","clearRect","fillStyle","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","needsUpdate","clearTimeout","timer","setTimeout","display","Actor","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actor_assertThisInitialized","actions","Object","keys","animations","reduce","action","actor_objectSpread","actor_defineProperty","clipAction","idle","timeScale","rotationAux","movementAux","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","fromGeometry","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destination","destinationMarker","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","abs","setAnimation","onDestinationCallback","fadeOut","reset","fadeIn","point","callback","clone","faceTo","angle","bubble","boundingSphere","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","marker_possibleConstructorReturn","marker_getPrototypeOf","transparent","inc","s","opacity","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","getPointerFrame","processInput","setFromCamera","hit","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","Cabin","cabin_classCallCheck","BoxGeometry","setHSL","splice","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","origin","ret","tapping","ThreeMath","smoothstep","addScaledVector","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","plane","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","OPEN","animationStep","Shaft","floors","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_possibleConstructorReturn","elevator_getPrototypeOf","buttons","animationStart","shaft","doors","elevator_toConsumableArray","cabin","close","open","Hallway","_ref2$hasElevator","hasElevator","_ref2$isEdge","isEdge","_ref2$isLobby","isLobby","hallway_classCallCheck","generateWall","aoBottom","orientation","wall","aoTop","hallway_possibleConstructorReturn","hallway_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","ceil","hallway_toConsumableArray","j","offsetHSL","Building","elevators","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","pallete","mesh","elevator","building_toConsumableArray","rooms","room","type","findIndex","game","building","game_toConsumableArray","constraintToFloor","intersectObjects","object","tap","say","getWorldPosition","__webpack_require__","d","__webpack_exports__","_ref$color","vertexShader","ShaderLib","phong","primaryGrid","secondaryGrid","fragmentShader","name","uniforms","UniformsUtils","extensions","derivatives","lights","diffuse","value","ShaderMaterial","r","setImmediate","fonts","loaded","_engine_input__WEBPACK_IMPORTED_MODULE_0__","_engine_music__WEBPACK_IMPORTED_MODULE_1__","_engine_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","music","route","location","hash","split","slice","Scenes","reload","test","fontTester","innerText","style","fontFamily","initialWidth","check","removeChild","once"],"mappings":"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","file":"code/main.521c7ea8760ab6fc888d.js","sourcesContent":["import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.01, 2048);\n    this.distance = 4;\n    this.maxHeight = Infinity;\n    this.offset = 1.2;\n    this.tilt = Math.PI * -0.65;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 8);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      root,\n      tilt,\n    } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance);\n    position.y = Math.min(Math.max(position.y, 0.1 - offset), maxHeight - offset);\n    this.lookAt(root.position);\n    position.y += offset;\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(1024, 8);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0x999999,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\nimport Starfield from './starfield';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.025);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.starfield = new Starfield();\n    this.root.add(this.starfield);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      starfield,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    starfield.position.copy(grid.position);\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    this.api = window.SC;\n    this.api.initialize({\n      client_id: 'eb5fcff9e107aab508431b4c3c416415',\n    });\n    // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n    //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n    // });\n    // eslint-disable-next-line\n    this.tracks = Music.shuffle([15107449,14281750,135099881,14449372,201545618,130450594,43516158,20969172,29561041,6582510,89379153,96594845,199889475,137188503,74658085,177686789,90256034,183847047,3916883]);\n    this.track = 0;\n    toggle.addEventListener('click', () => this.toggle(toggle), false);\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n    }));\n    this.scale.set(2, 0.25, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/items/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n      if (this.onDestinationCallback) {\n        this.onDestinationCallback();\n        delete this.onDestinationCallback;\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(point);\n    delete this.onDestinationCallback;\n    if (distance < 0.25) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(point);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processInput(pointer);\n      if (pointer.primaryUp) {\n        const { raycaster } = pointer;\n        raycaster.setFromCamera(pointer.normalized, camera);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walkTo(point);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.9985, 0.9985, 0.9985,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.1, 0.1);\n    geometry.translate(0, 0, 0.05);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.05);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/items/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.7 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n  }\n\n  open() {\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    if (state === targetState) return;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.buttons = [];\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.position.y = floor * Elevator.scale.y;\n      this.buttons.push(doors.callButton);\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n\n    this.position.x = origin.x * 4;\n    this.position.y = origin.y * 3;\n    this.position.z = -1.5 * Elevator.scale.z;\n  }\n\n  onAnimationTick(animation) {\n    // const { time } = animation;\n    // const { animationStart, floors, cabin: { position: cabin } } = this;\n    // const mid = (floors - 1) * Elevator.scale.y * 0.5;\n    // cabin.y = mid + (Math.sin((animationStart + time) * 0.5) * mid);\n    this.doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor) {\n    const { doors } = this;\n    // Debug: Door toggle testing\n    if (doors[floor].state === Doors.states.OPEN) {\n      doors[floor].close();\n      return false;\n    }\n    doors[floor].open();\n    return true;\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Hallway extends Mesh {\n  static generateWall({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Hallway.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Hallway.scale.x : Hallway.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    hasElevator = false,\n    isEdge = false,\n    isLobby = false,\n  } = {}) {\n    const merged = new Geometry();\n    const floor = Hallway.generateWall({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    floor.translate(0, -0.0005, 0);\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Hallway.generateWall({\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Hallway.generateWall({\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Hallway.generateWall({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Hallway.generateWall({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n    this.scale.copy(Hallway.scale);\n  }\n}\n\nHallway.scale = new Vector3(4, 3, 4);\n\nexport default Hallway;\n","import { Object3D } from 'three';\nimport Dude from '@/actors/dude';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\n\nclass Building extends Object3D {\n  constructor({\n    dudes,\n    elevators,\n    floors,\n  }) {\n    super();\n    this.buttons = [];\n    this.dudes = dudes.map(({\n      pallete,\n      position,\n    }) => {\n      const mesh = new Dude(pallete);\n      mesh.position.copy(position);\n      this.add(mesh);\n      return mesh;\n    });\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      this.buttons = [\n        ...this.buttons,\n        ...elevator.buttons,\n      ];\n      this.add(elevator);\n      return elevator;\n    });\n    this.floors = floors.map((rooms, floor) => rooms.map(({ type }, room) => {\n      let isEdge = false;\n      if (room === 0) isEdge = 'left';\n      else if (room === rooms.length - 1) isEdge = 'right';\n      const hasElevator = (\n        this.elevators.findIndex(({\n          floors,\n          origin,\n        }) => (\n          origin.x === room - Math.floor(rooms.length / 2)\n          && origin.y <= floor\n          && origin.y + floors > floor\n        ))\n      ) !== -1;\n      let mesh;\n      switch (type) {\n        default:\n          mesh = new Hallway({\n            hasElevator,\n            isEdge,\n            isLobby: floor === 0,\n          });\n          break;\n      }\n      mesh.position.set(room * 4 - (Math.floor(rooms.length / 2) * 4), floor * 3, 0);\n      this.add(mesh);\n      return mesh;\n    }));\n  }\n\n  onAnimationTick(animation) {\n    const { buttons, dudes, elevators } = this;\n    buttons.forEach(button => button.onAnimationTick(animation));\n    dudes.forEach(dude => dude.onAnimationTick(animation));\n    elevators.forEach(elevator => elevator.onAnimationTick(animation));\n  }\n}\n\nexport default Building;\n","import { Vector3 } from 'three';\nimport Dude from '@/actors/dude';\nimport Building from '@/building';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  /* Spawn main dude */\n  const dude = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  dude.position.set(2, 3, 0);\n  dude.destinationMarker = new Marker();\n  scene.root.add(dude);\n  scene.root.add(dude.destinationMarker);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.target = dude.position;\n\n  /* Spawn test building */\n  const building = new Building({\n    dudes: [...Array(4)].map(() => ({\n      pallete: {\n        arms: 0x222222,\n        eyes: 0x999999 * Math.random(),\n        head: 0x999999 * Math.random(),\n        legs: 0x222222,\n        torso: 0x999999 * Math.random(),\n      },\n      position: new Vector3(\n        (Math.random() * 9 - 4.5) * 2,\n        Math.floor(Math.random() * 3) * 3,\n        0\n      ),\n    })),\n    elevators: [\n      {\n        floors: 2,\n        origin: { x: -1, y: 0 },\n      },\n      {\n        floors: 2,\n        origin: { x: 1, y: 1 },\n      },\n    ],\n    floors: [\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n      [...Array(5)].map(() => ({ type: 'hallway' })),\n    ],\n  });\n  scene.root.add(building);\n\n  /* Animation loop */\n  const floor = 1;\n  const constraintToFloor = (point) => {\n    point.x = Math.min(Math.max(point.x, -9.5), 9.5);\n    point.y = floor * 3;\n    point.z = Math.min(Math.max(point.z, -1.5), 1.5);\n    return point;\n  };\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      {\n        const hit = raycaster.intersectObjects(building.buttons)[0];\n        if (hit) {\n          const { point, object: button } = hit;\n          dude.walkTo(constraintToFloor(point.clone()), () => {\n            dude.faceTo(point);\n            if (button.tap()) {\n              setTimeout(() => {\n                setTimeout(() => (\n                  dude.say([\n                    'Crap!',\n                    \"It's Broken!\",\n                    'What a night...',\n                  ])\n                ), 500);\n                const aux = camera.position.clone();\n                camera.getWorldPosition(aux);\n                dude.faceTo(aux);\n              }, 1000);\n            }\n          });\n          return;\n        }\n      }\n      {\n        const hit = raycaster.intersectObjects(building.floors[floor])[0];\n        if (hit) {\n          constraintToFloor(hit.point);\n          dude.walkTo(hit.point);\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as game } from './game';\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.phong.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.phong.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.phong.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/engine/input';\nimport Music from '@/engine/music';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    document.getElementById('splash').style.display = 'none';\n    input.isEnabled = true;\n    music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n"],"sourceRoot":""}