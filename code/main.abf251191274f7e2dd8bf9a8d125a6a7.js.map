{"version":3,"sources":["webpack:///./src/core/music.js","webpack:///./src/core/input.js","webpack:///./src/meshes/bubble.js","webpack:///./src/core/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/meshes/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/meshes/building/index.js","webpack:///./src/meshes/moon.js","webpack:///./src/meshes/starfield.js","webpack:///./src/scenes/editor.js","webpack:///./src/actors/thiccboi.js","webpack:///./src/meshes/legacy_building/elevator/cabin.js","webpack:///./src/meshes/button.js","webpack:///./src/meshes/legacy_building/elevator/doors.js","webpack:///./src/meshes/legacy_building/elevator/shaft.js","webpack:///./src/meshes/legacy_building/elevator/index.js","webpack:///./src/meshes/legacy_building/wall.js","webpack:///./src/meshes/legacy_building/hallway.js","webpack:///./src/meshes/legacy_building/road.js","webpack:///./src/meshes/legacy_building/walkable.js","webpack:///./src/meshes/legacy_building/ai.js","webpack:///./src/meshes/legacy_building/index.js","webpack:///./src/ui/dialog.js","webpack:///./src/ui/elevator.js","webpack:///./src/materials/rain.js","webpack:///./src/meshes/rain.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/core/camera.js","webpack:///./src/meshes/grid.js","webpack:///./src/core/vignette.js","webpack:///./src/core/scene.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/materials/sprite.js"],"names":["Music","_ref","_this","this","toggle","_classCallCheck","script","document","createElement","async","defer","src","body","appendChild","check","window","SC","api","initialize","client_id","tracks","shuffle","track","addEventListener","wantsToPlay","play","setTimeout","index","length","random","Math","floor","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","_ref$mount","mount","keyboard","backwards","forwards","leftwards","rightwards","pointer","current","Vector2","movement","x","y","normalized","last","wheel","touches","Touches","preventSimulated","target","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","e","preventDefault","onKeydown","onKeyup","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","keyCode","_ref2","repeat","indexOf","tagName","_ref3","isEnabled","secondary","primary","_ref4","_ref6","_slicedToArray","_ref5","rect","top","left","i","_touches$i","clientX","clientY","width","height","copy","_ref7","deltaY","_ref8","getBoundingClientRect","Bubble","_possibleConstructorReturn","_getPrototypeOf","call","SpriteMaterial","depthTest","scale","set","visible","Sprite","lines","delay","arguments","undefined","_this$material","material","renderer","ctx","clearRect","fillStyle","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","map","needsUpdate","clearTimeout","timer","display","Actor","bonesOrigin","collisionGeometry","geometry","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","add","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","Object","keys","forEach","bone","skeleton","bones","Bones","position","mixer","AnimationMixer","actor_assertThisInitialized","actions","animations","reduce","action","_defineProperty","clipAction","animation","idle","timeScale","rotationAux","movementAux","Vector3","collisionMesh","Mesh","MeshBasicMaterial","opacity","transparent","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","merge","vertices","a","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","computeVertexNormals","computeBoundingSphere","delta","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","min","max","abs","waypoint","path","distance","distanceTo","step","sub","normalize","multiplyScalar","faceTo","setAnimation","fadeOut","reset","fadeIn","point","angle","z","PI","bubble","boundingSphere","radius","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","QuaternionKeyframeTrack","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","dude_possibleConstructorReturn","dude_getPrototypeOf","CylinderBufferGeometry","translate","CylinderGeometry","color","SphereGeometry","hat","leftEye","eyes","rightEye","clone","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","rotateX","marker_possibleConstructorReturn","marker_getPrototypeOf","time","inc","sin","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","root","onAnimationTick","camera","grid","getPointerFrame","processPointer","hit","getRaycaster","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","pitch","updateOrbit","Building","building_classCallCheck","PlaneGeometry","Color","setHSL","building_toConsumableArray","building_possibleConstructorReturn","building_getPrototypeOf","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","fog","Starfield","starfield_classCallCheck","count","size","aux","o","addAttribute","BufferAttribute","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","editor","starfield","building","marker","processKeyboard","editor_objectSpread","ThiccBoi","thiccboi_classCallCheck","thiccboi_possibleConstructorReturn","thiccboi_getPrototypeOf","Cabin","cabin_classCallCheck","BoxGeometry","splice","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","origin","ret","tapping","ThreeMath","smoothstep","addScaledVector","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","plane","door","animationScale","state","states","CLOSED","targetState","callButton","PlaneBufferGeometry","Object3D","MOVING","OPEN","close","open","children","animationStep","Shaft","floors","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","findIndex","p","travel","to","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","wall","ceil","wall_toConsumableArray","j","offsetHSL","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","GridMaterial","Road","road_classCallCheck","markings","road_possibleConstructorReturn","road_getPrototypeOf","MeshLambertMaterial","Walkable","walkable_classCallCheck","intersect","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","Grid","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","AI","ai_classCallCheck","actors","actor","lastThought","IDLE","WALKING","destination","walkable","setWalkableAt","ai_slicedToArray","slice","elevators","legacy_building_classCallCheck","legacy_building_getPrototypeOf","ai","legacy_building_assertThisInitialized","layout","split","heightmap","legacy_building_toConsumableArray","buttons","meshes","rooms","type","room","mesh","elevatorIndex","road","addToGrid","addActor","child","Dialog","dialog_classCallCheck","wrapper","content","removeChild","tag","node","firstChild","ElevatorUI","onFloor","onExit","empty","unmount","innerText","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","replace","join","rain_possibleConstructorReturn","rain_getPrototypeOf","rain_objectSpread","name","uniforms","UniformsUtils","fragmentShader","diffuse","value","ShaderMaterial","Rain","meshes_rain_classCallCheck","meshes_rain_possibleConstructorReturn","meshes_rain_getPrototypeOf","numDrops","setDynamic","ripples","frustumCulled","offsets","drop","attributes","array","InstancedBufferGeometry","InstancedBufferAttribute","drops","resetDrop","testHeight","offset","func","game","rain","reverse","maxHeight","testMeshes","game_toConsumableArray","setHeightTest","getHeight","spawn","isWalkableAt","elevatorUI","_building$floors$floo","raycaster","intersectObjects","object","parent","onDestination","say","getPath","elevatorFloor","show","addPassenger","removePassenger","tap","__webpack_require__","d","__webpack_exports__","Camera","Infinity","tilt","speed","Raycaster","_assertThisInitialized","forward","right","worldUp","PerspectiveCamera","setFromCamera","far","hasUpdated","cos","negate","crossVectors","ray","direction","lookAt","_ref$background","background","_ref$size","_ref$subdivisions","subdivisions","grid_classCallCheck","grid_possibleConstructorReturn","grid_getPrototypeOf","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","OrthographicCamera","sprite","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Scene","grd","createRadialGradient","addColorStop","beginPath","fill","clearDepth","render","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","vignette","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","getDelta","oldTime","clear","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","lambert","primaryGrid","secondaryGrid","extensions","derivatives","lights","r","setImmediate","fonts","loaded","_core_input__WEBPACK_IMPORTED_MODULE_0__","_core_music__WEBPACK_IMPORTED_MODULE_1__","_core_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","splash","music","location","hash","Scenes","reload","test","fontTester","style","fontFamily","initialWidth","once","process","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.77f962bab28bd039e413.js","sourcesContent":["class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.keyboard = {\n      backwards: false,\n      forwards: false,\n      leftwards: false,\n      rightwards: false,\n    };\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('keydown', this.onKeydown.bind(this), false);\n    window.addEventListener('keyup', this.onKeyup.bind(this), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onKeydown({ keyCode, repeat, target }) {\n    const { keyboard } = this;\n    if (\n      repeat\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = true;\n        break;\n      case 83:\n        keyboard.backwards = true;\n        break;\n      case 65:\n        keyboard.leftwards = true;\n        break;\n      case 68:\n        keyboard.rightwards = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    const { keyboard } = this;\n    if (repeat) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = false;\n        break;\n      case 83:\n        keyboard.backwards = false;\n        break;\n      case 65:\n        keyboard.leftwards = false;\n        break;\n      case 68:\n        keyboard.rightwards = false;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/meshes/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    bonesOrigin,\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    Object.keys(bonesOrigin).forEach((bone) => {\n      this.skeleton.bones[Actor.Bones[bone]].position.copy(bonesOrigin[bone]);\n    });\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: Dude.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/meshes/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processPointer(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import {\n  BufferGeometry,\n  Color,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Building extends Mesh {\n  constructor() {\n    const floor = new PlaneGeometry(\n      16,\n      8,\n      16,\n      8\n    );\n    const color = new Color();\n    floor.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = 0;\n      face.vertexColors = [...Array(3)].map(() => color);\n    });\n    floor.rotateX(Math.PI * -0.5);\n    super(\n      (new BufferGeometry()).fromGeometry(floor),\n      new MeshPhongMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Building;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xAAAAAA,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Building from '@/meshes/building';\nimport Marker from '@/meshes/marker';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Setup camera\n  scene.camera.distance = 10;\n  scene.camera.pitch = Math.PI * 0.2;\n  scene.camera.updateOrbit();\n  // scene.camera.maxHeight = 2.9;\n\n  // Spawn building\n  const building = new Building();\n  scene.root.add(building);\n\n  // Spawn marker\n  const marker = new Marker();\n  scene.root.add(marker);\n\n  scene.onAnimationTick = ({ delta }) => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    camera.processKeyboard({ ...input.keyboard, delta });\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    const hit = raycaster.intersectObject(scene.grid)[0];\n    marker.visible = !!hit;\n    if (hit) {\n      marker.position.set(\n        Math.floor(hit.point.x) + 0.5,\n        0,\n        Math.floor(hit.point.z) + 0.5\n      );\n    }\n  };\n};\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass ThiccBoi extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: ThiccBoi.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: ThiccBoi.geometry(palette),\n      material: ThiccBoi.material,\n    });\n  }\n}\n\nThiccBoi.bones = {\n  hip: new Vector3(0, 0.4, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.325, 0.45, 0),\n  rightArm: new Vector3(0.325, 0.45, 0),\n  leftLeg: new Vector3(-0.08, 0.1, 0),\n  rightLeg: new Vector3(0.08, 0.1, 0),\n};\n\nThiccBoi.geometry = (palette) => {\n  // const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  const torso = new SphereGeometry(0.26, 8, 8);\n  torso.translate(0, 0.25, 0);\n  torso.scale(1.5, 1, 1.5);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new CylinderGeometry(0.175, 0.15, 0.4, 6);\n  // const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.03, 0.075, 0.3, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.15, 0);\n  rightArm.translate(0, -0.15, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.1, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nThiccBoi.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default ThiccBoi;\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/meshes/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += (animation.delta * 0.5) / Math.abs(route.travel);\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshLambertMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Road extends Mesh {\n  constructor() {\n    const geometry = new Geometry();\n    const track = new PlaneGeometry(512, 4);\n    track.rotateX(Math.PI * -0.5);\n    track.faces.forEach((face) => {\n      face.color.set(0x222233);\n      face.materialIndex = 0;\n    });\n    const markings = new PlaneGeometry(1, 0.2);\n    markings.rotateX(Math.PI * -0.5);\n    markings.faces.forEach((face) => {\n      face.color.set(0xBEBEBE);\n      face.materialIndex = 0;\n    });\n    for (let x = -128; x < 128; x += 5) {\n      geometry.merge(\n        markings.clone().translate(x, 0.001, 0)\n      );\n    }\n    geometry.merge(track);\n    geometry.translate(0, 0, 4);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshLambertMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Road;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.floor(Math.min(Math.max(point.x, 0), grid.width - 1));\n    point.z = Math.floor(Math.min(Math.max(point.z, 0), grid.height - 1));\n    return point;\n  }\n}\n\nexport default Walkable;\n","import {\n  Vector3,\n} from 'three';\n\nclass AI {\n  constructor(building) {\n    this.building = building;\n    this.actors = [];\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    const { actors } = this;\n    actors.push({\n      actor,\n      floor,\n      position,\n      lastThought: 0,\n      state: AI.states.IDLE,\n    });\n  }\n\n  onAnimationTick({ time }) {\n    const { actors, building } = this;\n    actors.forEach((actor) => {\n      const {\n        floor,\n        position,\n        lastThought,\n        state,\n      } = actor;\n      if (state === AI.states.IDLE) {\n        if (time - lastThought > 3) {\n          actor.lastThought = time;\n          if (Math.random() > 0.75) {\n            actor.state = AI.states.WALKING;\n          }\n        }\n        switch (actor.state) {\n          case AI.states.WALKING: {\n            const { walkable } = building.floors[floor];\n            const { finder, grid } = walkable;\n            let destination;\n            let path;\n            grid.setWalkableAt(position.x, position.z, true);\n            do {\n              destination = {\n                x: Math.floor(Math.random() * grid.width),\n                z: Math.floor(Math.random() * grid.height),\n              };\n              path = finder.findPath(\n                position.x, position.z,\n                destination.x, destination.z,\n                grid.clone()\n              )\n                .map(([x, z]) => (\n                  walkable.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n                ));\n            } while (\n              path.length < 2\n            );\n            grid.setWalkableAt(destination.x, destination.z, false);\n            actor.actor.walk(path.slice(1), () => {\n              position.x = destination.x;\n              position.z = destination.z;\n              actor.lastThought = time;\n              actor.state = AI.states.IDLE;\n            });\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n\nAI.states = {\n  IDLE: 0,\n  WALKING: 1,\n};\n\nexport default AI;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Road from './road';\nimport Wall from './wall';\nimport Walkable from './walkable';\nimport AI from './ai';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.ai = new AI(this);\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n    this.road = new Road();\n    this.add(this.road);\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    this.addToGrid({ floor, mesh: actor, position });\n    this.ai.addActor({ actor, floor, position });\n  }\n\n  addToGrid({\n    floor,\n    mesh,\n    position,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(position.x, position.z, false);\n    mesh.position.set(position.x + 0.5, 0, position.z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { ai, children } = this;\n    ai.onAnimationTick(animation);\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","class Dialog {\n  constructor() {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = 'dialog';\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default Dialog;\n","import Dialog from './dialog';\n\nclass ElevatorUI extends Dialog {\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Object3D,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Object3D {\n  constructor() {\n    super();\n    {\n      const position = new Float32Array(Rain.numDrops * 3);\n      const geometry = new BufferGeometry();\n      geometry.addAttribute('position', (new BufferAttribute(position, 3).setDynamic(true)));\n      const ripples = new Points(\n        geometry,\n        new PointsMaterial({\n          color: 0xAAAADD,\n          fog: true,\n          size: 0.01,\n          sizeAttenuation: true,\n          transparent: true,\n          opacity: 1 / 3,\n        })\n      );\n      ripples.frustumCulled = false;\n      ripples.offsets = position;\n      this.add(ripples);\n      this.ripples = ripples;\n    }\n    {\n      const drop = (new BufferGeometry()).fromGeometry(\n        (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n      ).attributes.position.array;\n      const offsets = new Float32Array(Rain.numDrops * 3);\n      const geometry = new InstancedBufferGeometry();\n      geometry.addAttribute('position', new BufferAttribute(drop, 3));\n      geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n      const drops = new Mesh(\n        geometry,\n        new RainMaterial({\n          color: 0xAAAADD,\n        })\n      );\n      drops.frustumCulled = false;\n      drops.drop = new Vector3();\n      drops.offsets = offsets;\n      this.add(drops);\n      this.drops = drops;\n      for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n        this.resetDrop(i);\n        this.ripples.offsets[i] = 0;\n        this.ripples.offsets[i + 1] = -999;\n        this.ripples.offsets[i + 2] = 0;\n      }\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { drops, position, ripples } = this;\n    const { offsets } = drops;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        offsets[i + 1] = height;\n        this.resetDrop(i);\n      }\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drops, position, ripples } = this;\n    const { drop, offsets } = drops;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    ripples.offsets[i] = offsets[i];\n    ripples.offsets[i + 1] = offsets[i + 1] + 0.01;\n    ripples.offsets[i + 2] = offsets[i + 2];\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { drops, ripples } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport Building from '@/meshes/legacy_building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/meshes/marker';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 4,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 4,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const actors = [Dude, ThiccBoi, ThiccBoi];\n  const dudes = [...Array(building.floors.length * actors.length)].map(() => {\n    const Actor = actors[Math.floor(Math.random() * actors.length)];\n    const dude = new Actor({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * building.floors.length);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * (grid.height - 1)),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addActor({\n      floor,\n      actor: dude,\n      position: spawn,\n    });\n    dude.position.y += 0.001;\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const from = player.position.clone();\n        const to = dude.position.clone();\n        to.z += 1;\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    elevator.removePassenger(player);\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const from = player.position.clone();\n          const to = point.clone();\n          const path = walkable.getPath(from, to);\n          if (path.length) {\n            walkable.grid.setWalkableAt(from.x, from.z, true);\n            if (path.length > 1) {\n              player.walk(path.slice(1), onDestination);\n            } else {\n              onDestination();\n            }\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const from = player.position.clone();\n        const to = point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const from = player.position.clone();\n        const to = hit.point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n          });\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as editor } from './editor';\nexport { default as game } from './game';\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.forward = new Vector3();\n    this.right = new Vector3();\n    this.worldUp = new Vector3(0, 1, 0);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processPointer({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 16);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  processKeyboard({\n    backwards,\n    delta,\n    forwards,\n    leftwards,\n    rightwards,\n  }) {\n    const {\n      forward,\n      right,\n      tilt,\n      pitch,\n      root: { position },\n      worldUp,\n    } = this;\n    const step = delta * 4;\n    forward.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      0,\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize().negate();\n    right.crossVectors(forward, worldUp);\n    if (forwards) {\n      position.addScaledVector(forward, step);\n    }\n    if (backwards) {\n      position.addScaledVector(forward, -step);\n    }\n    if (leftwards) {\n      position.addScaledVector(right, -step);\n    }\n    if (rightwards) {\n      position.addScaledVector(right, step);\n    }\n  }\n\n  updateOrbit() {\n    const {\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, 0.1), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from '@/meshes/grid';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.6);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.lambert.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.lambert.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.lambert.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/core/input';\nimport Music from '@/core/music';\nimport Scene from '@/core/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst splash = document.getElementById('splash');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    splash.style.display = 'none';\n    input.isEnabled = true;\n    if (__PRODUCTION__) music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n\nif (window.process && window.process.type) {\n  // We're running inside electron.\n  // Allow the user to exit with the ESC key.\n  window.addEventListener('keydown', ({ keyCode, repeat }) => {\n    if (keyCode === 27 && !repeat) {\n      if (splash.style.display !== 'none') {\n        window.close();\n      } else {\n        splash.style.display = '';\n        input.isEnabled = false;\n        input.touches.once('end', () => {\n          splash.style.display = 'none';\n          input.isEnabled = true;\n        });\n      }\n    }\n  }, false);\n}\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}