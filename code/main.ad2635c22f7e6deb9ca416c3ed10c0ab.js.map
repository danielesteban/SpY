{"version":3,"sources":["webpack:///./src/engine/camera.js","webpack:///./src/engine/grid.js","webpack:///./src/materials/rain.js","webpack:///./src/engine/rain.js","webpack:///./src/engine/moon.js","webpack:///./src/engine/starfield.js","webpack:///./src/engine/vignette.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/music.js","webpack:///./src/engine/input.js","webpack:///./src/items/bubble.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/building/elevator/cabin.js","webpack:///./src/items/button.js","webpack:///./src/building/elevator/doors.js","webpack:///./src/building/elevator/shaft.js","webpack:///./src/building/elevator/index.js","webpack:///./src/building/wall.js","webpack:///./src/building/hallway.js","webpack:///./src/engine/walkable.js","webpack:///./src/building/index.js","webpack:///./src/ui/dialog.js","webpack:///./src/ui/elevator.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/materials/sprite.js"],"names":["Camera","_this","_classCallCheck","this","_getPrototypeOf","call","distance","maxHeight","Infinity","offset","Vector3","tilt","Math","PI","pitch","speed","step","raycaster","Raycaster","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","pointer","setFromCamera","far","delta","_ref","position","target","distanceTo","copy","sub","normalize","multiplyScalar","movement","_ref2","secondary","wheel","hasUpdated","x","y","min","max","testMeshes","set","cos","sin","ray","origin","direction","hit","intersectObjects","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","size","_ref$subdivisions","subdivisions","grid_classCallCheck","geometry","CircleBufferGeometry","translate","rotateX","grid_possibleConstructorReturn","grid_getPrototypeOf","GridMaterial","material","color","Mesh","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","replace","join","rain_possibleConstructorReturn","rain_getPrototypeOf","_objectSpread","name","uniforms","UniformsUtils","clone","fragmentShader","fog","diffuse","value","ShaderMaterial","Rain","engine_rain_classCallCheck","drop","BufferGeometry","fromGeometry","BoxGeometry","attributes","array","offsets","Float32Array","numDrops","InstancedBufferGeometry","addAttribute","BufferAttribute","InstancedBufferAttribute","setDynamic","engine_rain_possibleConstructorReturn","engine_rain_getPrototypeOf","frustumCulled","i","resetDrop","height","testHeight","z","needsUpdate","random","radius","func","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","MeshBasicMaterial","Starfield","starfield_classCallCheck","count","aux","floor","o","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","camera","OrthographicCamera","sprite","SpriteMaterial","width","map","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Sprite","Scene","renderer","ctx","grd","createRadialGradient","addColorStop","fillStyle","beginPath","rect","fill","clearDepth","render","_ref$mount","mount","document","body","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","bind","setPixelRatio","window","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","rain","starfield","vignette","addEventListener","onResize","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","clear","end","_mount$getBoundingCli","getBoundingClientRect","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Music","toggle","script","createElement","async","defer","src","check","SC","api","initialize","client_id","tracks","shuffle","track","wantsToPlay","play","setTimeout","index","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","current","Vector2","normalized","last","touches","Touches","preventSimulated","onPointerDown","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","e","preventDefault","frame","primaryDown","primaryUp","secondaryDown","secondaryUp","isEnabled","primary","_ref4","_slicedToArray","_ref3","top","left","_touches$i","clientX","clientY","_ref5","deltaY","_ref6","Bubble","_possibleConstructorReturn","depthTest","scale","visible","lines","delay","_this$material","clearRect","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","clearTimeout","timer","display","Actor","collisionGeometry","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actor_assertThisInitialized","actions","Object","keys","animations","reduce","action","_defineProperty","clipAction","idle","timeScale","rotationAux","movementAux","collisionMesh","opacity","transparent","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","abs","waypoint","path","faceTo","setAnimation","fadeOut","reset","fadeIn","point","angle","bubble","boundingSphere","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","CylinderBufferGeometry","skeleton","CylinderGeometry","SphereGeometry","hat","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","marker_possibleConstructorReturn","marker_getPrototypeOf","inc","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","getPointerFrame","processInput","getRaycaster","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","Cabin","cabin_classCallCheck","setHSL","splice","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","ret","tapping","ThreeMath","smoothstep","addScaledVector","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","plane","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","PlaneBufferGeometry","MOVING","OPEN","close","open","animationStep","Shaft","floors","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","findIndex","p","to","travel","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","wall","ceil","wall_toConsumableArray","j","offsetHSL","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","Walkable","walkable_classCallCheck","intersect","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","setWalkableAt","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","isWalkableAt","Building","elevators","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","layout","split","heightmap","building_toConsumableArray","buttons","meshes","rooms","type","room","mesh","indexOf","elevatorIndex","walkable","Dialog","dialog_classCallCheck","wrapper","content","removeChild","tag","node","firstChild","ElevatorUI","onFloor","onExit","empty","unmount","innerText","game","building","reverse","game_toConsumableArray","setHeightTest","getHeight","spawn","addToFloorGrid","game_objectSpread","elevatorUI","_building$floors$floo","object","parent","onDestination","say","getPath","slice","elevatorFloor","show","addPassenger","tap","__webpack_require__","d","__webpack_exports__","phong","primaryGrid","secondaryGrid","extensions","derivatives","lights","r","setImmediate","fonts","loaded","_engine_input__WEBPACK_IMPORTED_MODULE_0__","_engine_music__WEBPACK_IMPORTED_MODULE_1__","_engine_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","music","location","hash","Scenes","reload","test","fontTester","style","fontFamily","initialWidth","once","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.7783ed9315d151e3817c.js","sourcesContent":["import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 16);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, 0.1), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Mesh {\n  constructor() {\n    const drop = (new BufferGeometry()).fromGeometry(\n      (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n    ).attributes.position.array;\n    const offsets = new Float32Array(Rain.numDrops * 3);\n    const geometry = new InstancedBufferGeometry();\n    geometry.addAttribute('position', new BufferAttribute(drop, 3));\n    geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n    super(\n      geometry,\n      new RainMaterial({\n        color: 0xAAAADD,\n      })\n    );\n    this.frustumCulled = false;\n    this.drop = new Vector3();\n    this.offsets = offsets;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { geometry, offsets, position } = this;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        this.resetDrop(i);\n      }\n    }\n    geometry.attributes.offset.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drop, offsets, position } = this;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { geometry } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    geometry.attributes.offset.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xAAAAAA,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\nimport Rain from './rain';\nimport Starfield from './starfield';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.6);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.rain = new Rain();\n    this.root.add(this.rain);\n    this.starfield = new Starfield();\n    this.root.add(this.starfield);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      starfield,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    starfield.position.copy(grid.position);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/items/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processInput(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/items/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += animation.delta * 0.5;\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n    this.grid.setWalkableAt(0, 1, true);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.min(Math.max(point.x, 0), grid.width - 1);\n    point.z = Math.min(Math.max(point.z, 0), grid.height - 1);\n    point = {\n      x: Math.floor(point.x),\n      z: Math.floor(point.z),\n    };\n    while (!grid.isWalkableAt(point.x, point.z) && point.z < grid.height - 1) {\n      point.z += 1;\n    }\n    return point;\n  }\n}\n\nexport default Walkable;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Wall from './wall';\nimport Walkable from '@/engine/walkable';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n  }\n\n  addToFloorGrid({\n    floor,\n    mesh,\n    x,\n    z,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(x, z, false);\n    mesh.position.set(x + 0.5, 0, z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { children } = this;\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","class Dialog {\n  constructor() {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = 'dialog';\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default Dialog;\n","import Dialog from './dialog';\n\nclass ElevatorUI extends Dialog {\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import Dude from '@/actors/dude';\nimport Building from '@/building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 2,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 3,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  scene.rain.position.x = building.heightmap[0].length * 0.5;\n  scene.rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const dudes = [...Array(4)].map(() => {\n    const dude = new Dude({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * 2);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * grid.height - 1),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addToFloorGrid({\n      floor,\n      mesh: dude,\n      ...spawn,\n    });\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const path = walkable.getPath(player.position.clone(), dude.position.clone());\n        if (path.length > 1) {\n          player.walk(path.slice(1), onDestination);\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const path = walkable.getPath(player.position.clone(), point.clone());\n          if (path.length > 1) {\n            player.walk(path.slice(1), onDestination);\n          } else if (path.length) {\n            onDestination();\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const path = walkable.getPath(player.position.clone(), point.clone());\n        if (path.length > 1) {\n          player.walk(path.slice(1), onDestination);\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const path = walkable.getPath(player.position.clone(), hit.point);\n        if (path.length > 1) {\n          player.walk(path.slice(1));\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as game } from './game';\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.phong.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.phong.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.phong.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/engine/input';\nimport Music from '@/engine/music';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    document.getElementById('splash').style.display = 'none';\n    input.isEnabled = true;\n    music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}