{"version":3,"sources":["webpack:///./src/engine/input.js","webpack:///./src/engine/camera.js","webpack:///./src/engine/grid.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/scenes/test.js","webpack:///./src/index.js"],"names":["Input","_ref","_ref$mount","mount","document","body","_classCallCheck","this","pointer","current","Vector2","movement","x","y","normalized","last","raycaster","Raycaster","wheel","touches","Touches","window","filtered","preventSimulated","target","on","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","addEventListener","e","preventDefault","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","button","_ref2","primary","secondary","_ref4","_slicedToArray","_ref3","_this$size","size","width","height","copy","_ref5","deltaY","_ref6","getBoundingClientRect","Camera","_this","camera_classCallCheck","_getPrototypeOf","call","distance","offset","Vector3","tilt","Math","PI","pitch","speed","step","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","delta","position","distanceTo","sub","normalize","multiplyScalar","min","max","set","cos","sin","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","_ref$subdivisions","subdivisions","grid_classCallCheck","geometry","PlaneBufferGeometry","translate","rotateX","vertexShader","ShaderLib","basic","replace","join","primaryGrid","secondaryGrid","fragmentShader","concat","material","ShaderMaterial","name","uniforms","UniformsUtils","clone","extensions","derivatives","fog","color","diffuse","value","grid_possibleConstructorReturn","grid_getPrototypeOf","Mesh","Scene","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","floor","z","render","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Actor","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actor_assertThisInitialized","actions","Object","keys","animations","reduce","action","actor_objectSpread","actor_defineProperty","clipAction","idle","timeScale","play","rotationAux","movementAux","SkinnedMesh","limbs","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","walkingSpeed","walk","destination","destinationMarker","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","abs","setAnimation","visible","fadeOut","reset","fadeIn","point","angle","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","computeVertexNormals","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","marker_possibleConstructorReturn","marker_getPrototypeOf","opacity","transparent","scale","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","map","v","i","dude","random","walkTo","mainDudeX","mainDudeZ","mainDude","debug_slicedToArray","getPointerFrame","processInput","setFromCamera","hit","intersectObject","test","getElementById","once","style","display","route","location","hash","split","slice","Scenes"],"mappings":"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","file":"code/main.b65618dfbca3231383fd.js","sourcesContent":["import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      filtered: true,\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown({ button }) {\n    const { pointer } = this;\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove(e, [x, y]) {\n    const { pointer, size: { width, height } } = this;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button }) {\n    const { pointer } = this;\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { pointer } = this;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.size = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.01, 2048);\n    this.distance = 6;\n    this.offset = new Vector3(0, 1.5, 0);\n    this.tilt = Math.PI * -0.5;\n    this.pitch = Math.PI * 0.125;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, 0), Math.PI * 0.5);\n      this.updateOrbit();\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 16);\n      this.updateOrbit();\n    }\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      offset,\n      pitch,\n      root,\n      tilt,\n    } = this;\n    this.position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance)\n      .add(offset);\n    this.lookAt(root.position);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  PlaneBufferGeometry,\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new PlaneBufferGeometry(2048, 2048, 2, 2);\n    geometry.translate(0, 0, -0.001);\n    geometry.rotateX(Math.PI * -0.5);\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.basic.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    const material = new ShaderMaterial({\n      name: 'grid-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n    });\n    material.color = material.uniforms.diffuse.value;\n    material.color.set(background);\n    super(\n      geometry,\n      material\n    );\n  }\n}\n\nexport default Grid;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\n\nclass Scene {\n  constructor({\n    background = new Color(0x223322),\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    this.renderer.setClearColor(background);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(background, 0.03);\n    this.root.add(new AmbientLight(0x454545));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 1, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.2);\n    secondaryLight.position.set(-1, -1, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: background.clone().multiplyScalar(0.75) });\n    this.root.add(this.grid);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(Math.floor(camera.position.x), 0, Math.floor(camera.position.z));\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const geometry = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      geometry.merge(limbs[limb]);\n    });\n    geometry.faces.forEach((face) => {\n      geometry.vertices[face.a].bone = face.materialIndex;\n      geometry.vertices[face.b].bone = face.materialIndex;\n      geometry.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    geometry.vertices.forEach((vertex) => {\n      geometry.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      geometry.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    return (new BufferGeometry()).fromGeometry(geometry);\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point) {\n    const { destinationMarker, position, rotationAux } = this;\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.computeVertexNormals();\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.002, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0xFF0000,\n        opacity: 0.25,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { scale, visible } = this;\n    if (!visible) return;\n    const s = 0.75 + ((1 + Math.sin(time * 4)) * 0.125);\n    scale.set(s, 1, s);\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walkTo(point);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.onAnimationTick = () => {\n    const { camera, grid } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObject(grid)[0];\n      if (!hit) return;\n      pack.walkTo(hit.point);\n    }\n  };\n};\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const dude = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  dude.destinationMarker = new Marker();\n  scene.root.add(dude);\n  scene.root.add(dude.destinationMarker);\n  scene.camera.target = dude.position;\n\n  scene.onAnimationTick = () => {\n    const { camera, grid } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObject(grid)[0];\n      if (!hit) return;\n      dude.walkTo(hit.point);\n    }\n  };\n};\n","import Input from '@/engine/input';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst scene = new Scene({ mount });\n\ninput.touches.once('start', () => {\n  document.getElementById('credits').style.display = 'none';\n});\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/debug';\n  route = 'debug';\n}\nScenes[route]({ input, scene });\n"],"sourceRoot":""}