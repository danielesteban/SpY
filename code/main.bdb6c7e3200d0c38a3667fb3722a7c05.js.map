{"version":3,"sources":["webpack:///./src/engine/camera.js","webpack:///./src/meshes/grid.js","webpack:///./src/engine/vignette.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/music.js","webpack:///./src/engine/input.js","webpack:///./src/meshes/bubble.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/meshes/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/scenes/editor.js","webpack:///./src/actors/thiccboi.js","webpack:///./src/meshes/building/elevator/cabin.js","webpack:///./src/meshes/button.js","webpack:///./src/meshes/building/elevator/doors.js","webpack:///./src/meshes/building/elevator/shaft.js","webpack:///./src/meshes/building/elevator/index.js","webpack:///./src/meshes/building/wall.js","webpack:///./src/meshes/building/hallway.js","webpack:///./src/meshes/building/road.js","webpack:///./src/meshes/building/walkable.js","webpack:///./src/meshes/building/ai.js","webpack:///./src/meshes/building/index.js","webpack:///./src/ui/dialog.js","webpack:///./src/ui/elevator.js","webpack:///./src/materials/rain.js","webpack:///./src/meshes/rain.js","webpack:///./src/meshes/moon.js","webpack:///./src/meshes/starfield.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/materials/sprite.js"],"names":["Camera","_this","_classCallCheck","this","_getPrototypeOf","call","distance","maxHeight","Infinity","offset","Vector3","tilt","Math","PI","pitch","speed","step","raycaster","Raycaster","root","Object3D","add","_assertThisInitialized","forward","right","worldUp","updateOrbit","PerspectiveCamera","pointer","setFromCamera","far","delta","_ref","position","target","distanceTo","copy","sub","normalize","multiplyScalar","movement","_ref2","secondary","wheel","hasUpdated","x","y","min","max","backwards","_ref3","forwards","leftwards","rightwards","set","cos","sin","negate","crossVectors","addScaledVector","testMeshes","ray","origin","direction","hit","intersectObjects","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","size","_ref$subdivisions","subdivisions","grid_classCallCheck","geometry","CircleBufferGeometry","translate","rotateX","grid_possibleConstructorReturn","grid_getPrototypeOf","GridMaterial","material","color","Mesh","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","camera","OrthographicCamera","sprite","SpriteMaterial","width","height","map","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Sprite","Scene","renderer","ctx","grd","createRadialGradient","addColorStop","fillStyle","beginPath","rect","fill","needsUpdate","clearDepth","render","_ref$mount","mount","document","body","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","bind","setPixelRatio","window","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","fog","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","vignette","addEventListener","onResize","ShaderChunk","fog_pars_vertex","replace","fog_vertex","fog_pars_fragment","fog_fragment","join","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","z","clear","end","_mount$getBoundingCli","getBoundingClientRect","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Music","toggle","script","createElement","async","defer","src","check","SC","api","initialize","client_id","tracks","shuffle","track","wantsToPlay","play","setTimeout","index","random","floor","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","keyboard","current","Vector2","normalized","last","touches","Touches","preventSimulated","onPointerDown","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","e","preventDefault","onKeydown","onKeyup","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","keyCode","repeat","indexOf","tagName","isEnabled","primary","_ref4","_ref6","_slicedToArray","_ref5","top","left","i","_touches$i","clientX","clientY","_ref7","deltaY","_ref8","Bubble","_possibleConstructorReturn","depthTest","scale","visible","lines","delay","_this$material","clearRect","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","clearTimeout","timer","display","Actor","bonesOrigin","collisionGeometry","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","Object","keys","bone","skeleton","bones","Bones","mixer","AnimationMixer","actor_assertThisInitialized","actions","animations","reduce","action","_defineProperty","clipAction","idle","timeScale","rotationAux","movementAux","collisionMesh","MeshBasicMaterial","opacity","transparent","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","merge","vertices","a","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","abs","waypoint","path","faceTo","setAnimation","fadeOut","reset","fadeIn","point","angle","bubble","boundingSphere","radius","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","dude_possibleConstructorReturn","dude_getPrototypeOf","CylinderBufferGeometry","CylinderGeometry","SphereGeometry","hat","leftEye","eyes","rightEye","clone","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","marker_possibleConstructorReturn","marker_getPrototypeOf","inc","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","getPointerFrame","processPointer","getRaycaster","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","editor","processKeyboard","editor_objectSpread","ThiccBoi","thiccboi_classCallCheck","thiccboi_possibleConstructorReturn","thiccboi_getPrototypeOf","Cabin","cabin_classCallCheck","BoxGeometry","aux","setHSL","splice","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","ret","tapping","ThreeMath","smoothstep","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","plane","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","PlaneBufferGeometry","MOVING","OPEN","close","open","animationStep","Shaft","floors","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","findIndex","p","travel","to","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","wall","ceil","wall_toConsumableArray","j","offsetHSL","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","Road","road_classCallCheck","markings","road_possibleConstructorReturn","road_getPrototypeOf","MeshLambertMaterial","Walkable","walkable_classCallCheck","intersect","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","AI","building","ai_classCallCheck","actors","actor","lastThought","IDLE","WALKING","destination","walkable","setWalkableAt","ai_slicedToArray","slice","Building","elevators","building_classCallCheck","building_getPrototypeOf","ai","building_assertThisInitialized","layout","split","heightmap","building_toConsumableArray","buttons","meshes","rooms","type","room","mesh","elevatorIndex","road","addToGrid","addActor","Dialog","dialog_classCallCheck","wrapper","content","removeChild","tag","node","firstChild","ElevatorUI","onFloor","onExit","empty","unmount","innerText","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","rain_possibleConstructorReturn","rain_getPrototypeOf","rain_objectSpread","name","uniforms","UniformsUtils","fragmentShader","diffuse","value","ShaderMaterial","Rain","meshes_rain_classCallCheck","meshes_rain_possibleConstructorReturn","meshes_rain_getPrototypeOf","numDrops","addAttribute","BufferAttribute","setDynamic","ripples","Points","PointsMaterial","sizeAttenuation","frustumCulled","offsets","drop","attributes","array","InstancedBufferGeometry","InstancedBufferAttribute","drops","resetDrop","testHeight","func","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","Starfield","starfield_classCallCheck","count","o","starfield_possibleConstructorReturn","starfield_getPrototypeOf","moon","game","rain","starfield","reverse","game_toConsumableArray","setHeightTest","getHeight","spawn","isWalkableAt","elevatorUI","_building$floors$floo","object","parent","onDestination","say","getPath","elevatorFloor","show","addPassenger","removePassenger","tap","__webpack_require__","d","__webpack_exports__","lambert","primaryGrid","secondaryGrid","extensions","derivatives","lights","r","setImmediate","fonts","loaded","_engine_input__WEBPACK_IMPORTED_MODULE_0__","_engine_music__WEBPACK_IMPORTED_MODULE_1__","_engine_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","splash","music","location","hash","Scenes","reload","test","fontTester","style","fontFamily","initialWidth","once","process","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.982441d54eb913d13a77.js","sourcesContent":["import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.forward = new Vector3();\n    this.right = new Vector3();\n    this.worldUp = new Vector3(0, 1, 0);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processPointer({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 16);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  processKeyboard({\n    backwards,\n    delta,\n    forwards,\n    leftwards,\n    rightwards,\n  }) {\n    const {\n      forward,\n      right,\n      tilt,\n      pitch,\n      root: { position },\n      worldUp,\n    } = this;\n    const step = delta * 4;\n    forward.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      0,\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize().negate();\n    right.crossVectors(forward, worldUp);\n    if (forwards) {\n      position.addScaledVector(forward, step);\n    }\n    if (backwards) {\n      position.addScaledVector(forward, -step);\n    }\n    if (leftwards) {\n      position.addScaledVector(right, -step);\n    }\n    if (rightwards) {\n      position.addScaledVector(right, step);\n    }\n  }\n\n  updateOrbit() {\n    const {\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, 0.1), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from '@/meshes/grid';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.6);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.keyboard = {\n      backwards: false,\n      forwards: false,\n      leftwards: false,\n      rightwards: false,\n    };\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('keydown', this.onKeydown.bind(this), false);\n    window.addEventListener('keyup', this.onKeyup.bind(this), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onKeydown({ keyCode, repeat, target }) {\n    const { keyboard } = this;\n    if (\n      repeat\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = true;\n        break;\n      case 83:\n        keyboard.backwards = true;\n        break;\n      case 65:\n        keyboard.leftwards = true;\n        break;\n      case 68:\n        keyboard.rightwards = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    const { keyboard } = this;\n    if (repeat) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = false;\n        break;\n      case 83:\n        keyboard.backwards = false;\n        break;\n      case 65:\n        keyboard.leftwards = false;\n        break;\n      case 68:\n        keyboard.rightwards = false;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/meshes/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    bonesOrigin,\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    Object.keys(bonesOrigin).forEach((bone) => {\n      this.skeleton.bones[Actor.Bones[bone]].position.copy(bonesOrigin[bone]);\n    });\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: Dude.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/meshes/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processPointer(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","export default ({ input, scene }) => {\n  scene.camera.maxHeight = 2.9;\n  scene.onAnimationTick = ({ delta }) => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    camera.processKeyboard({ ...input.keyboard, delta });\n  };\n};\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass ThiccBoi extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: ThiccBoi.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: ThiccBoi.geometry(palette),\n      material: ThiccBoi.material,\n    });\n  }\n}\n\nThiccBoi.bones = {\n  hip: new Vector3(0, 0.4, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.325, 0.45, 0),\n  rightArm: new Vector3(0.325, 0.45, 0),\n  leftLeg: new Vector3(-0.08, 0.1, 0),\n  rightLeg: new Vector3(0.08, 0.1, 0),\n};\n\nThiccBoi.geometry = (palette) => {\n  // const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  const torso = new SphereGeometry(0.26, 8, 8);\n  torso.translate(0, 0.25, 0);\n  torso.scale(1.5, 1, 1.5);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new CylinderGeometry(0.175, 0.15, 0.4, 6);\n  // const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.03, 0.075, 0.3, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.15, 0);\n  rightArm.translate(0, -0.15, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.1, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nThiccBoi.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default ThiccBoi;\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/meshes/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += (animation.delta * 0.5) / Math.abs(route.travel);\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshLambertMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Road extends Mesh {\n  constructor() {\n    const geometry = new Geometry();\n    const track = new PlaneGeometry(512, 4);\n    track.rotateX(Math.PI * -0.5);\n    track.faces.forEach((face) => {\n      face.color.set(0x222233);\n      face.materialIndex = 0;\n    });\n    const markings = new PlaneGeometry(1, 0.2);\n    markings.rotateX(Math.PI * -0.5);\n    markings.faces.forEach((face) => {\n      face.color.set(0xBEBEBE);\n      face.materialIndex = 0;\n    });\n    for (let x = -128; x < 128; x += 5) {\n      geometry.merge(\n        markings.clone().translate(x, 0.001, 0)\n      );\n    }\n    geometry.merge(track);\n    geometry.translate(0, 0, 4);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshLambertMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Road;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.floor(Math.min(Math.max(point.x, 0), grid.width - 1));\n    point.z = Math.floor(Math.min(Math.max(point.z, 0), grid.height - 1));\n    return point;\n  }\n}\n\nexport default Walkable;\n","import {\n  Vector3,\n} from 'three';\n\nclass AI {\n  constructor(building) {\n    this.building = building;\n    this.actors = [];\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    const { actors } = this;\n    actors.push({\n      actor,\n      floor,\n      position,\n      lastThought: 0,\n      state: AI.states.IDLE,\n    });\n  }\n\n  onAnimationTick({ time }) {\n    const { actors, building } = this;\n    actors.forEach((actor) => {\n      const {\n        floor,\n        position,\n        lastThought,\n        state,\n      } = actor;\n      if (state === AI.states.IDLE) {\n        if (time - lastThought > 3) {\n          actor.lastThought = time;\n          if (Math.random() > 0.75) {\n            actor.state = AI.states.WALKING;\n          }\n        }\n        switch (actor.state) {\n          case AI.states.WALKING: {\n            const { walkable } = building.floors[floor];\n            const { finder, grid } = walkable;\n            let destination;\n            let path;\n            grid.setWalkableAt(position.x, position.z, true);\n            do {\n              destination = {\n                x: Math.floor(Math.random() * grid.width),\n                z: Math.floor(Math.random() * grid.height),\n              };\n              path = finder.findPath(\n                position.x, position.z,\n                destination.x, destination.z,\n                grid.clone()\n              )\n                .map(([x, z]) => (\n                  walkable.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n                ));\n            } while (\n              path.length < 2\n            );\n            grid.setWalkableAt(destination.x, destination.z, false);\n            actor.actor.walk(path.slice(1), () => {\n              position.x = destination.x;\n              position.z = destination.z;\n              actor.lastThought = time;\n              actor.state = AI.states.IDLE;\n            });\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n\nAI.states = {\n  IDLE: 0,\n  WALKING: 1,\n};\n\nexport default AI;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Road from './road';\nimport Wall from './wall';\nimport Walkable from './walkable';\nimport AI from './ai';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.ai = new AI(this);\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n    this.road = new Road();\n    this.add(this.road);\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    this.addToGrid({ floor, mesh: actor, position });\n    this.ai.addActor({ actor, floor, position });\n  }\n\n  addToGrid({\n    floor,\n    mesh,\n    position,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(position.x, position.z, false);\n    mesh.position.set(position.x + 0.5, 0, position.z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { ai, children } = this;\n    ai.onAnimationTick(animation);\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","class Dialog {\n  constructor() {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = 'dialog';\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default Dialog;\n","import Dialog from './dialog';\n\nclass ElevatorUI extends Dialog {\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Object3D,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Object3D {\n  constructor() {\n    super();\n    {\n      const position = new Float32Array(Rain.numDrops * 3);\n      const geometry = new BufferGeometry();\n      geometry.addAttribute('position', (new BufferAttribute(position, 3).setDynamic(true)));\n      const ripples = new Points(\n        geometry,\n        new PointsMaterial({\n          color: 0xAAAADD,\n          fog: true,\n          size: 0.01,\n          sizeAttenuation: true,\n          transparent: true,\n          opacity: 1 / 3,\n        })\n      );\n      ripples.frustumCulled = false;\n      ripples.offsets = position;\n      this.add(ripples);\n      this.ripples = ripples;\n    }\n    {\n      const drop = (new BufferGeometry()).fromGeometry(\n        (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n      ).attributes.position.array;\n      const offsets = new Float32Array(Rain.numDrops * 3);\n      const geometry = new InstancedBufferGeometry();\n      geometry.addAttribute('position', new BufferAttribute(drop, 3));\n      geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n      const drops = new Mesh(\n        geometry,\n        new RainMaterial({\n          color: 0xAAAADD,\n        })\n      );\n      drops.frustumCulled = false;\n      drops.drop = new Vector3();\n      drops.offsets = offsets;\n      this.add(drops);\n      this.drops = drops;\n      for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n        this.resetDrop(i);\n        this.ripples.offsets[i] = 0;\n        this.ripples.offsets[i + 1] = -999;\n        this.ripples.offsets[i + 2] = 0;\n      }\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { drops, position, ripples } = this;\n    const { offsets } = drops;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        offsets[i + 1] = height;\n        this.resetDrop(i);\n      }\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drops, position, ripples } = this;\n    const { drop, offsets } = drops;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    ripples.offsets[i] = offsets[i];\n    ripples.offsets[i + 1] = offsets[i + 1] + 0.01;\n    ripples.offsets[i + 2] = offsets[i + 2];\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { drops, ripples } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xAAAAAA,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport Building from '@/meshes/building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/meshes/marker';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 4,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 4,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const actors = [Dude, ThiccBoi, ThiccBoi];\n  const dudes = [...Array(building.floors.length * actors.length)].map(() => {\n    const Actor = actors[Math.floor(Math.random() * actors.length)];\n    const dude = new Actor({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * building.floors.length);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * (grid.height - 1)),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addActor({\n      floor,\n      actor: dude,\n      position: spawn,\n    });\n    dude.position.y += 0.001;\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const from = player.position.clone();\n        const to = dude.position.clone();\n        to.z += 1;\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    elevator.removePassenger(player);\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const from = player.position.clone();\n          const to = point.clone();\n          const path = walkable.getPath(from, to);\n          if (path.length) {\n            walkable.grid.setWalkableAt(from.x, from.z, true);\n            if (path.length > 1) {\n              player.walk(path.slice(1), onDestination);\n            } else {\n              onDestination();\n            }\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const from = player.position.clone();\n        const to = point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const from = player.position.clone();\n        const to = hit.point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n          });\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as editor } from './editor';\nexport { default as game } from './game';\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.lambert.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.lambert.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.lambert.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/engine/input';\nimport Music from '@/engine/music';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst splash = document.getElementById('splash');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    splash.style.display = 'none';\n    input.isEnabled = true;\n    music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n\nif (window.process && window.process.type) {\n  // We're running inside electron.\n  // Allow the user to exit with the ESC key.\n  window.addEventListener('keydown', ({ keyCode, repeat }) => {\n    if (keyCode === 27 && !repeat) {\n      if (splash.style.display !== 'none') {\n        window.close();\n      } else {\n        splash.style.display = '';\n        input.isEnabled = false;\n        input.touches.once('end', () => {\n          splash.style.display = 'none';\n          input.isEnabled = true;\n        });\n      }\n    }\n  }, false);\n}\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}