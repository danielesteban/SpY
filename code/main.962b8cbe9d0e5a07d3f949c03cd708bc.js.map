{"version":3,"sources":["webpack:///./src/engine/camera.js","webpack:///./src/engine/grid.js","webpack:///./src/materials/rain.js","webpack:///./src/engine/rain.js","webpack:///./src/engine/moon.js","webpack:///./src/engine/starfield.js","webpack:///./src/engine/vignette.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/music.js","webpack:///./src/engine/input.js","webpack:///./src/items/bubble.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/actors/thiccboi.js","webpack:///./src/building/elevator/cabin.js","webpack:///./src/items/button.js","webpack:///./src/building/elevator/doors.js","webpack:///./src/building/elevator/shaft.js","webpack:///./src/building/elevator/index.js","webpack:///./src/building/wall.js","webpack:///./src/building/hallway.js","webpack:///./src/building/road.js","webpack:///./src/engine/walkable.js","webpack:///./src/building/index.js","webpack:///./src/ui/dialog.js","webpack:///./src/ui/elevator.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/materials/sprite.js"],"names":["Camera","_this","_classCallCheck","this","_getPrototypeOf","call","distance","maxHeight","Infinity","offset","Vector3","tilt","Math","PI","pitch","speed","step","raycaster","Raycaster","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","pointer","setFromCamera","far","delta","_ref","position","target","distanceTo","copy","sub","normalize","multiplyScalar","movement","_ref2","secondary","wheel","hasUpdated","x","y","min","max","testMeshes","set","cos","sin","ray","origin","direction","hit","intersectObjects","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","size","_ref$subdivisions","subdivisions","grid_classCallCheck","geometry","CircleBufferGeometry","translate","rotateX","grid_possibleConstructorReturn","grid_getPrototypeOf","GridMaterial","material","color","Mesh","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","replace","join","rain_possibleConstructorReturn","rain_getPrototypeOf","_objectSpread","name","uniforms","UniformsUtils","clone","fragmentShader","fog","diffuse","value","ShaderMaterial","Rain","engine_rain_classCallCheck","engine_rain_possibleConstructorReturn","engine_rain_getPrototypeOf","Float32Array","numDrops","BufferGeometry","addAttribute","BufferAttribute","setDynamic","ripples","Points","PointsMaterial","sizeAttenuation","transparent","opacity","frustumCulled","offsets","drop","fromGeometry","BoxGeometry","attributes","array","InstancedBufferGeometry","InstancedBufferAttribute","drops","i","resetDrop","height","testHeight","z","needsUpdate","random","radius","func","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","MeshBasicMaterial","Starfield","starfield_classCallCheck","count","aux","floor","o","starfield_possibleConstructorReturn","starfield_getPrototypeOf","moon","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","camera","OrthographicCamera","sprite","SpriteMaterial","width","map","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Sprite","Scene","renderer","ctx","grd","createRadialGradient","addColorStop","fillStyle","beginPath","rect","fill","clearDepth","render","_ref$mount","mount","document","body","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","bind","setPixelRatio","window","devicePixelRatio","sky","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","rain","starfield","vignette","addEventListener","onResize","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","animation","getDelta","time","oldTime","onAnimationTick","children","forEach","child","clear","end","_mount$getBoundingCli","getBoundingClientRect","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Music","toggle","script","createElement","async","defer","src","check","SC","api","initialize","client_id","tracks","shuffle","track","wantsToPlay","play","setTimeout","index","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","current","Vector2","normalized","last","touches","Touches","preventSimulated","onPointerDown","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","e","preventDefault","frame","primaryDown","primaryUp","secondaryDown","secondaryUp","isEnabled","primary","_ref4","_slicedToArray","_ref3","top","left","_touches$i","clientX","clientY","_ref5","deltaY","_ref6","Bubble","_possibleConstructorReturn","depthTest","scale","visible","lines","delay","_this$material","clearRect","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","clearTimeout","timer","display","Actor","bonesOrigin","collisionGeometry","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","Object","keys","bone","skeleton","bones","Bones","mixer","AnimationMixer","actor_assertThisInitialized","actions","animations","reduce","action","_defineProperty","clipAction","idle","timeScale","rotationAux","movementAux","collisionMesh","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","merge","vertices","a","b","c","vertex","skinIndices","push","Vector4","skinWeights","computeVertexNormals","computeBoundingSphere","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","abs","waypoint","path","faceTo","setAnimation","fadeOut","reset","fadeIn","point","angle","bubble","boundingSphere","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","_toConsumableArray","Dude","palette","dude_classCallCheck","dude_possibleConstructorReturn","dude_getPrototypeOf","CylinderBufferGeometry","CylinderGeometry","SphereGeometry","hat","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","marker_possibleConstructorReturn","marker_getPrototypeOf","inc","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","getPointerFrame","processInput","getRaycaster","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","ThiccBoi","thiccboi_classCallCheck","thiccboi_possibleConstructorReturn","thiccboi_getPrototypeOf","Cabin","cabin_classCallCheck","setHSL","splice","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","ret","tapping","ThreeMath","smoothstep","addScaledVector","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","plane","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","PlaneBufferGeometry","MOVING","OPEN","close","open","animationStep","Shaft","floors","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","findIndex","p","travel","to","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","wall","ceil","wall_toConsumableArray","j","offsetHSL","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","Road","road_classCallCheck","markings","road_possibleConstructorReturn","road_getPrototypeOf","MeshLambertMaterial","Walkable","walkable_classCallCheck","intersect","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","isWalkableAt","Building","elevators","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","layout","split","heightmap","building_toConsumableArray","buttons","meshes","rooms","type","room","mesh","indexOf","elevatorIndex","walkable","road","setWalkableAt","Dialog","dialog_classCallCheck","wrapper","content","removeChild","tag","node","firstChild","ElevatorUI","onFloor","onExit","empty","unmount","innerText","game","building","reverse","game_toConsumableArray","setHeightTest","getHeight","actors","spawn","addToFloorGrid","game_objectSpread","elevatorUI","_building$floors$floo","object","parent","onDestination","say","getPath","slice","elevatorFloor","show","addPassenger","removePassenger","tap","__webpack_require__","d","__webpack_exports__","lambert","primaryGrid","secondaryGrid","extensions","derivatives","lights","r","setImmediate","fonts","loaded","_engine_input__WEBPACK_IMPORTED_MODULE_0__","_engine_music__WEBPACK_IMPORTED_MODULE_1__","_engine_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","music","location","hash","Scenes","reload","test","fontTester","style","fontFamily","initialWidth","once","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.7c638f3fdb3c12fb6ef6.js","sourcesContent":["import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processInput({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 16);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  updateOrbit() {\n    const {\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, 0.1), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.01);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Object3D,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Object3D {\n  constructor() {\n    super();\n    {\n      const position = new Float32Array(Rain.numDrops * 3);\n      const geometry = new BufferGeometry();\n      geometry.addAttribute('position', (new BufferAttribute(position, 3).setDynamic(true)));\n      const ripples = new Points(\n        geometry,\n        new PointsMaterial({\n          color: 0xAAAADD,\n          fog: true,\n          size: 0.01,\n          sizeAttenuation: false,\n          transparent: true,\n          opacity: 1 / 3,\n        })\n      );\n      ripples.frustumCulled = false;\n      ripples.offsets = position;\n      this.add(ripples);\n      this.ripples = ripples;\n    }\n    {\n      const drop = (new BufferGeometry()).fromGeometry(\n        (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n      ).attributes.position.array;\n      const offsets = new Float32Array(Rain.numDrops * 3);\n      const geometry = new InstancedBufferGeometry();\n      geometry.addAttribute('position', new BufferAttribute(drop, 3));\n      geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n      const drops = new Mesh(\n        geometry,\n        new RainMaterial({\n          color: 0xAAAADD,\n        })\n      );\n      drops.frustumCulled = false;\n      drops.drop = new Vector3();\n      drops.offsets = offsets;\n      this.add(drops);\n      this.drops = drops;\n      for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n        this.resetDrop(i);\n        this.ripples.offsets[i] = 0;\n        this.ripples.offsets[i + 1] = -999;\n        this.ripples.offsets[i + 2] = 0;\n      }\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { drops, position, ripples } = this;\n    const { offsets } = drops;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        offsets[i + 1] = height;\n        this.resetDrop(i);\n      }\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drops, position, ripples } = this;\n    const { drop, offsets } = drops;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    ripples.offsets[i] = offsets[i];\n    ripples.offsets[i + 1] = offsets[i + 1] + 0.01;\n    ripples.offsets[i + 2] = offsets[i + 2];\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { drops, ripples } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xAAAAAA,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\nimport Rain from './rain';\nimport Starfield from './starfield';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.6);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.rain = new Rain();\n    this.root.add(this.rain);\n    this.starfield = new Starfield();\n    this.root.add(this.starfield);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      starfield,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    starfield.position.copy(grid.position);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/items/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    bonesOrigin,\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    Object.keys(bonesOrigin).forEach((bone) => {\n      this.skeleton.bones[Actor.Bones[bone]].position.copy(bonesOrigin[bone]);\n    });\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: Dude.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processInput(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass ThiccBoi extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: ThiccBoi.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: ThiccBoi.geometry(palette),\n      material: ThiccBoi.material,\n    });\n  }\n}\n\nThiccBoi.bones = {\n  hip: new Vector3(0, 0.4, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.325, 0.45, 0),\n  rightArm: new Vector3(0.325, 0.45, 0),\n  leftLeg: new Vector3(-0.08, 0.1, 0),\n  rightLeg: new Vector3(0.08, 0.1, 0),\n};\n\nThiccBoi.geometry = (palette) => {\n  // const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  const torso = new SphereGeometry(0.26, 8, 8);\n  torso.translate(0, 0.25, 0);\n  torso.scale(1.5, 1, 1.5);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new CylinderGeometry(0.175, 0.15, 0.4, 6);\n  // const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.03, 0.075, 0.3, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.15, 0);\n  rightArm.translate(0, -0.15, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.1, 0.4, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.2, 0);\n  rightLeg.translate(0, -0.2, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nThiccBoi.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default ThiccBoi;\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/items/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += (animation.delta * 0.5) / Math.abs(route.travel);\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshLambertMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Road extends Mesh {\n  constructor() {\n    const geometry = new Geometry();\n    const track = new PlaneGeometry(512, 4);\n    track.rotateX(Math.PI * -0.5);\n    track.faces.forEach((face) => {\n      face.color.set(0x222233);\n      face.materialIndex = 0;\n    });\n    const markings = new PlaneGeometry(1, 0.2);\n    markings.rotateX(Math.PI * -0.5);\n    markings.faces.forEach((face) => {\n      face.color.set(0xBEBEBE);\n      face.materialIndex = 0;\n    });\n    for (let x = -128; x < 128; x += 5) {\n      geometry.merge(\n        markings.clone().translate(x, 0.001, 0)\n      );\n    }\n    geometry.merge(track);\n    geometry.translate(0, 0, 4);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshLambertMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Road;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.min(Math.max(point.x, 0), grid.width - 1);\n    point.z = Math.min(Math.max(point.z, 0), grid.height - 1);\n    point = {\n      x: Math.floor(point.x),\n      z: Math.floor(point.z),\n    };\n    while (!grid.isWalkableAt(point.x, point.z) && point.z < grid.height - 1) {\n      point.z += 1;\n    }\n    return point;\n  }\n}\n\nexport default Walkable;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Road from './road';\nimport Wall from './wall';\nimport Walkable from '@/engine/walkable';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n    this.road = new Road();\n    this.add(this.road);\n  }\n\n  addToFloorGrid({\n    floor,\n    mesh,\n    x,\n    z,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(x, z, false);\n    mesh.position.set(x + 0.5, 0, z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { children } = this;\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","class Dialog {\n  constructor() {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = 'dialog';\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default Dialog;\n","import Dialog from './dialog';\n\nclass ElevatorUI extends Dialog {\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport Building from '@/building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 4,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 4,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  scene.rain.position.x = building.heightmap[0].length * 0.5;\n  scene.rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const actors = [Dude, ThiccBoi, ThiccBoi];\n  const dudes = [...Array(building.floors.length * actors.length)].map(() => {\n    const Actor = actors[Math.floor(Math.random() * actors.length)];\n    const dude = new Actor({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * building.floors.length);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * (grid.height - 1)),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addToFloorGrid({\n      floor,\n      mesh: dude,\n      ...spawn,\n    });\n    dude.position.y += 0.001;\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processInput(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const path = walkable.getPath(player.position.clone(), dude.position.clone());\n        if (path.length > 1) {\n          player.walk(path.slice(1), onDestination);\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    elevator.removePassenger(player);\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const path = walkable.getPath(player.position.clone(), point.clone());\n          if (path.length > 1) {\n            player.walk(path.slice(1), onDestination);\n          } else if (path.length) {\n            onDestination();\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const path = walkable.getPath(player.position.clone(), point.clone());\n        if (path.length > 1) {\n          player.walk(path.slice(1), onDestination);\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const path = walkable.getPath(player.position.clone(), hit.point);\n        if (path.length > 1) {\n          player.walk(path.slice(1));\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as game } from './game';\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.lambert.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.lambert.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.lambert.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/engine/input';\nimport Music from '@/engine/music';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    document.getElementById('splash').style.display = 'none';\n    input.isEnabled = true;\n    music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}