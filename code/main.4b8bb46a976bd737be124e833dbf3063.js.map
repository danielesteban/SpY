{"version":3,"sources":["webpack:///./src/scenes/editor.js","webpack:///./src/ui/editor.js","webpack:///./src/meshes/moon.js","webpack:///./src/meshes/starfield.js","webpack:///./src/core/ui.js","webpack:///./src/core/music.js","webpack:///./src/materials/rain.js","webpack:///./src/meshes/rain.js","webpack:///./src/meshes/building/door.js","webpack:///./src/meshes/building/floor.js","webpack:///./src/meshes/building/index.js","webpack:///./src/core/input.js","webpack:///./src/actors/dude.js","webpack:///./src/meshes/bubble.js","webpack:///./src/core/actor.js","webpack:///./src/meshes/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/meshes/legacy_building/elevator/cabin.js","webpack:///./src/meshes/button.js","webpack:///./src/meshes/legacy_building/elevator/doors.js","webpack:///./src/meshes/legacy_building/elevator/shaft.js","webpack:///./src/meshes/legacy_building/elevator/index.js","webpack:///./src/meshes/legacy_building/wall.js","webpack:///./src/meshes/legacy_building/hallway.js","webpack:///./src/meshes/legacy_building/road.js","webpack:///./src/meshes/legacy_building/walkable.js","webpack:///./src/meshes/legacy_building/ai.js","webpack:///./src/meshes/legacy_building/index.js","webpack:///./src/ui/elevator.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/core/camera.js","webpack:///./src/meshes/grid.js","webpack:///./src/core/vignette.js","webpack:///./src/core/scene.js","webpack:///./src/core/history.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/actors/thiccboi.js","webpack:///./src/materials/sprite.js"],"names":["__webpack_exports__","_ref","input","scene","rain","Rain","root","add","starfield","Starfield","stored","localStorage","getItem","building","Building","JSON","parse","ab2str","pako","inflate","Uint8Array","str2ab","position","x","heightmap","length","z","setHeightTest","getHeight","bind","camera","distance","minHeight","updateOrbit","_building$floors$buil","floors","activeFloor","grid","width","height","set","maxDistance","history","History","window","addEventListener","e","ctrlKey","keyCode","shiftKey","target","indexOf","tagName","preventDefault","stopPropagation","redo","undo","ui","EditorUI","floorCount","onAddFloor","addFloor","setFloorCount","setFloor","onRemoveFloor","confirm","removeFloor","empty","onSave","meta","export","encoded","deflate","stringify","setItem","setModified","onImport","document","createElement","type","onchange","reader","FileReader","onload","result","location","reload","readAsArrayBuffer","files","click","onExport","blob","Blob","url","URL","createObjectURL","a","href","download","setImmediate","revokeObjectURL","onSetFloor","floor","constructor","y","lastTile","onAnimationTick","_ref2","delta","pointer","getPointerFrame","processPointer","processKeyboard","_objectSpread","keyboard","primary","raycaster","getRaycaster","normalized","hit","intersectObjects","intersect","point","addScaledVector","face","normal","color","_ui$tool","tool","modifier","Math","primaryDown","current","getNodeAt","currentType","currentColor","concat","getHexString","action","setTile","computeHeightmap","push","setColor","setTool","_this","_classCallCheck","this","_getPrototypeOf","call","onKeyup","_assertThisInitialized","innerText","value","parseInt","min","step","floorInput","buttons","remove","appendChild","wrapper","_ref3","colorInput","button","_this$tool","pickButton","tiles","map","label","tile","slice","forEach","save","className","saveButton","importButton","exportButton","mount","UI","_get","prototype","removeEventListener","_ref4","repeat","count","max","Moon","_possibleConstructorReturn","SphereBufferGeometry","MeshBasicMaterial","fog","Mesh","starfield_classCallCheck","radius","geometry","BufferGeometry","Float32Array","size","aux","Vector3","i","random","normalize","multiplyScalar","o","addAttribute","BufferAttribute","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","content","body","removeChild","tag","node","firstChild","Music","toggle","script","async","defer","src","check","SC","api","initialize","client_id","tracks","shuffle","track","wantsToPlay","play","setTimeout","index","temp","_this2","player","kill","id","stream","then","on","next","setVolume","catch","isPlaying","pause","RainMaterial","arguments","undefined","_ref$color","rest","_objectWithoutProperties","vertexShader","ShaderLib","basic","replace","join","name","uniforms","UniformsUtils","clone","fragmentShader","diffuse","ShaderMaterial","rain_classCallCheck","rain_possibleConstructorReturn","rain_getPrototypeOf","numDrops","setDynamic","ripples","transparent","opacity","frustumCulled","offsets","drop","fromGeometry","BoxGeometry","translate","attributes","array","InstancedBufferGeometry","InstancedBufferAttribute","drops","resetDrop","Object3D","testHeight","offset","needsUpdate","func","Door","BoxBufferGeometry","GridMaterial","geometries","xAxis","yAxis","rotateY","PI","timeOffset","time","scale","sin","_yAxis","Floor","number","floor_classCallCheck","floor_getPrototypeOf","setNumber","entities","_Floor$defaultGridSiz","defaultGridSize","Grid","_assertThisInitialize","floor_assertThisInitialized","nodes","entity","children","findIndex","spawn","walkable","dude","thiccboi","Actor","Dude","ThiccBoi","actor","arms","eyes","hat","head","legs","torso","door","r","g","b","avg","Color","setRGB","_grid$y$x","_slicedToArray","air","plane","PlaneBufferGeometry","rotateX","side","DoubleSide","visible","material","vertexColors","VertexColors","chunks","_toConsumableArray","Array","ceil","chunkSize","setIndex","Uint16Array","chunk","updateChunk","offsetHSL","cy","cx","types","indices","vertices","colors","normals","pushFace","v","c","n","apply","pushBox","_ref5","testNeighbor","topAO","hw","hl","wallAO","testTileNeighbor","testTile","wall","fence","testWallNeighbor","testWindowNeighbor","tileAO","s","windowAO","pushTile","pushDoorway","_ref6","pushFence","mesh","getIndex","getAttribute","setArray","computeBoundingSphere","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","animation","splice","building_slicedToArray","Input","_ref$mount","backwards","forwards","leftwards","rightwards","Vector2","movement","last","wheel","touches","Touches","preventSimulated","onPointerDown","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","onBlur","onKeydown","onResize","frame","primaryUp","secondaryDown","secondaryUp","isEnabled","secondary","rect","top","left","_touches$i","clientX","clientY","copy","_ref7","deltaY","_ref8","getBoundingClientRect","palette","bonesOrigin","bones","collisionGeometry","CylinderBufferGeometry","hip","leftArm","rightArm","leftLeg","rightLeg","CylinderGeometry","faces","SphereGeometry","merge","leftEye","rightEye","geometryFromLimbs","boundingSphere","center","MeshPhongMaterial","skinning","Bubble","SpriteMaterial","depthTest","Sprite","lines","delay","_this$material","renderer","ctx","clearRect","fillStyle","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","clearTimeout","timer","display","actor_classCallCheck","actor_getPrototypeOf","Bone","Skeleton","Object","keys","bone","skeleton","Bones","mixer","AnimationMixer","actor_assertThisInitialized","actions","animations","reduce","_defineProperty","clipAction","idle","timeScale","rotationAux","movementAux","collisionMesh","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","materialIndex","vertex","skinIndices","Vector4","skinWeights","computeVertexNormals","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","abs","waypoint","path","distanceTo","sub","faceTo","setAnimation","fadeOut","reset","fadeIn","angle","bubble","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","QuaternionKeyframeTrack","Marker","CircleBufferGeometry","inc","debug","pack","dudes","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","pitch","Cabin","cabin_classCallCheck","setHSL","cabin_possibleConstructorReturn","cabin_getPrototypeOf","Button","onTap","button_classCallCheck","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","origin","ret","tapping","ThreeMath","smoothstep","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","PlaneGeometry","animationScale","state","states","CLOSED","targetState","callButton","MOVING","OPEN","close","open","animationStep","Shaft","shaft_classCallCheck","back","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","p","travel","to","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","wall_toConsumableArray","j","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","Road","road_classCallCheck","markings","road_possibleConstructorReturn","road_getPrototypeOf","MeshLambertMaterial","Walkable","walkable_classCallCheck","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","AI","ai_classCallCheck","actors","lastThought","IDLE","WALKING","destination","setWalkableAt","ai_slicedToArray","elevators","legacy_building_classCallCheck","legacy_building_getPrototypeOf","ai","legacy_building_assertThisInitialized","layout","split","legacy_building_toConsumableArray","meshes","rooms","room","elevatorIndex","road","addToGrid","addActor","child","ElevatorUI","ui_elevator_classCallCheck","ui_elevator_possibleConstructorReturn","ui_elevator_getPrototypeOf","onFloor","onExit","unmount","game","reverse","maxHeight","testMeshes","game_toConsumableArray","isWalkableAt","elevatorUI","_building$floors$floo","object","parent","onDestination","say","getPath","elevatorFloor","show","addPassenger","removePassenger","tap","__webpack_require__","d","editor","Camera","Infinity","tilt","speed","Raycaster","forward","right","worldUp","PerspectiveCamera","setFromCamera","far","hasUpdated","cos","negate","crossVectors","ray","direction","lookAt","_ref$background","background","_ref$size","_ref$subdivisions","subdivisions","grid_classCallCheck","grid_possibleConstructorReturn","grid_getPrototypeOf","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","OrthographicCamera","sprite","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Scene","grd","createRadialGradient","addColorStop","beginPath","fill","clearDepth","render","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","vignette","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","getDelta","oldTime","clear","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","past","future","prev","pop","unshift","lambert","primaryGrid","secondaryGrid","extensions","derivatives","lights","fonts","loaded","_core_input__WEBPACK_IMPORTED_MODULE_0__","_core_music__WEBPACK_IMPORTED_MODULE_1__","_core_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","splash","music","hash","Scenes","test","fontTester","style","fontFamily","initialWidth","once","process","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.eb64c21f1b5f52457868.js","sourcesContent":["import pako from 'pako';\nimport ab2str from 'arraybuffer-to-string';\nimport str2ab from 'string-to-arraybuffer';\nimport Building from '@/meshes/building';\nimport EditorUI from '@/ui/editor';\nimport History from '@/core/history';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn building\n  const stored = localStorage.getItem('SpY::EditorTestLevel');\n  const building = new Building(\n    stored ? JSON.parse(ab2str(pako.inflate(new Uint8Array(str2ab(stored))))) : {}\n  );\n  scene.root.add(building);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.position.z = building.heightmap.length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Setup camera\n  scene.camera.distance = 10;\n  scene.camera.minHeight = 0.2;\n  scene.camera.updateOrbit();\n  const { width, height } = building.floors[building.activeFloor].grid;\n  scene.camera.root.position.set(\n    width * 0.5 + 0.5,\n    0,\n    height * 0.5 + 0.5\n  );\n  scene.camera.maxDistance = 32;\n\n  // History\n  const history = new History();\n  window.addEventListener('keydown', (e) => {\n    const {\n      ctrlKey,\n      keyCode,\n      shiftKey,\n      target,\n    } = e;\n    if (\n      !ctrlKey\n      || keyCode !== 90\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    if (shiftKey) history.redo();\n    else history.undo();\n  });\n\n  // UI\n  const ui = new EditorUI({\n    floorCount: building.floors.length,\n    onAddFloor() {\n      building.addFloor();\n      ui.setFloorCount(building.floors.length);\n      ui.setFloor(building.activeFloor);\n    },\n    onRemoveFloor() {\n      // eslint-disable-next-line no-alert\n      if (!window.confirm('Remove the current floor?')) {\n        return;\n      }\n      building.removeFloor();\n      ui.setFloorCount(building.floors.length);\n      ui.setFloor(building.activeFloor);\n      history.empty();\n    },\n    onSave() {\n      const meta = building.export();\n      const encoded = ab2str(pako.deflate(new Uint8Array(str2ab(JSON.stringify(meta)))), 'base64');\n      localStorage.setItem('SpY::EditorTestLevel', encoded);\n      ui.setModified(false);\n    },\n    onImport() {\n      const input = document.createElement('input');\n      input.type = 'file';\n      input.onchange = () => {\n        const reader = new FileReader();\n        reader.onload = () => {\n          localStorage.setItem('SpY::EditorTestLevel', ab2str(reader.result, 'base64'));\n          window.location.reload();\n        };\n        reader.readAsArrayBuffer(input.files[0]);\n      };\n      input.click();\n    },\n    onExport() {\n      const meta = building.export();\n      const blob = new Blob([\n        pako.deflate(new Uint8Array(str2ab(JSON.stringify(meta)))),\n      ]);\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'SpYEditorLevel.bin';\n      a.click();\n      setImmediate(() => URL.revokeObjectURL(url));\n    },\n    onSetFloor(floor) {\n      building.activeFloor = floor;\n      const { height } = building.floors[building.activeFloor].constructor;\n      scene.camera.root.position.y = height * floor;\n    },\n  });\n\n  const lastTile = { x: -1, y: -1 };\n  scene.onAnimationTick = ({ delta }) => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    camera.processKeyboard({ ...input.keyboard, delta });\n    if (!pointer.primary) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    const floor = building.floors[building.activeFloor];\n    const hit = raycaster.intersectObjects(floor.intersect)[0];\n    if (!hit) {\n      return;\n    }\n    hit.point.addScaledVector(hit.face.normal, -0.5);\n    const { color, tool: { tool, modifier } } = ui;\n    const x = Math.floor(hit.point.x);\n    const y = Math.floor(hit.point.z);\n    if (\n      pointer.primaryDown || x !== lastTile.x || y !== lastTile.y\n    ) {\n      lastTile.x = x;\n      lastTile.y = y;\n      const current = floor.grid.getNodeAt(x, y);\n      const currentType = current.type;\n      const currentColor = `#${current.color.getHexString()}`;\n      switch (tool) {\n        case 'paint': {\n          const action = {\n            undo() {\n              floor.setTile({\n                type: currentType,\n                color: currentColor,\n                x,\n                y,\n              });\n              building.computeHeightmap();\n              ui.setModified(true);\n            },\n            redo() {\n              floor.setTile({\n                type: modifier,\n                color,\n                x,\n                y,\n              });\n              building.computeHeightmap();\n              ui.setModified(true);\n            },\n          };\n          action.redo();\n          history.push(action);\n          break;\n        }\n        case 'pick':\n          ui.setColor(currentColor);\n          ui.setTool('paint', modifier);\n          break;\n        default:\n          break;\n      }\n    }\n  };\n};\n","import UI from '@/core/ui';\n\nclass EditorUI extends UI {\n  constructor({\n    floorCount,\n    onAddFloor,\n    onRemoveFloor,\n    onSave,\n    onSetFloor,\n    onImport,\n    onExport,\n  }) {\n    super('toolbar');\n    this.onKeyup = this.onKeyup.bind(this);\n    this.onSetFloor = onSetFloor;\n    // Floor\n    {\n      const label = this.add('label');\n      label.innerText = 'Floor';\n      const input = this.add('input');\n      input.type = 'number';\n      input.addEventListener('change', ({ target: { value: floor } }) => {\n        this.setFloor(parseInt(floor, 10));\n      }, false);\n      input.min = 0;\n      input.step = 1;\n      this.floorInput = input;\n      const buttons = this.add('div');\n      {\n        const add = this.add('button');\n        add.innerText = '+';\n        add.addEventListener('click', onAddFloor, false);\n        const remove = this.add('button');\n        remove.innerText = '×';\n        remove.addEventListener('click', onRemoveFloor, false);\n        buttons.appendChild(add);\n        buttons.appendChild(remove);\n      }\n      const wrapper = this.add('div');\n      wrapper.appendChild(input);\n      wrapper.appendChild(buttons);\n    }\n    // Color\n    {\n      const label = this.add('label');\n      label.innerText = 'Color';\n      const input = this.add('input');\n      input.type = 'color';\n      input.addEventListener('change', ({ target: { value: color } }) => {\n        this.setColor(color);\n      }, false);\n      this.colorInput = input;\n      const button = this.add('button');\n      button.innerText = 'Pick';\n      button.addEventListener('click', () => {\n        const { tool, modifier } = this.tool;\n        this.setTool('pick', tool === 'paint' ? modifier : 1);\n      }, false);\n      this.pickButton = button;\n      const wrapper = this.add('div');\n      wrapper.appendChild(input);\n      wrapper.appendChild(button);\n    }\n    // Tiles\n    {\n      const tiles = [\n        'Air',\n        'Tile',\n        'Wall',\n        'Window',\n        'Fence',\n        'Door',\n        'Dude',\n        'ThiccBoi',\n      ].map((label, tile) => {\n        const button = this.add('button');\n        button.innerText = label;\n        button.addEventListener('click', () => {\n          this.setTool('paint', tile);\n        }, false);\n        return button;\n      });\n      {\n        const label = this.add('label');\n        label.innerText = 'Tiles';\n        const wrapper = this.add('div');\n        tiles.slice(0, 6).forEach(button => wrapper.appendChild(button));\n      }\n      {\n        const label = this.add('label');\n        label.innerText = 'Actors';\n        const wrapper = this.add('div');\n        tiles.slice(6).forEach(button => wrapper.appendChild(button));\n      }\n      this.tiles = tiles;\n    }\n    // Save\n    const save = this.add('button');\n    save.className = 'save';\n    save.innerText = 'Save';\n    save.addEventListener('click', onSave, false);\n    this.saveButton = save;\n    {\n      // Import/Export\n      const importButton = this.add('button');\n      importButton.innerText = 'Import';\n      importButton.addEventListener('click', onImport, false);\n      const exportButton = this.add('button');\n      exportButton.innerText = 'Export';\n      exportButton.addEventListener('click', onExport, false);\n      const wrapper = this.add('div');\n      wrapper.appendChild(importButton);\n      wrapper.appendChild(exportButton);\n    }\n    // Initial state\n    this.setFloorCount(floorCount);\n    this.setFloor(0);\n    this.setTool('paint', 1);\n    this.setColor('#aaaaaa');\n    // Mount UI\n    this.mount();\n  }\n\n  mount() {\n    super.mount();\n    window.addEventListener('keyup', this.onKeyup, false);\n  }\n\n  unmount() {\n    super.unmount();\n    window.removeEventListener('keyup', this.onKeyup);\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    if (repeat) {\n      return;\n    }\n    if (keyCode >= 49 && keyCode <= 57) {\n      this.setTool('paint', keyCode - 49);\n    }\n  }\n\n  setColor(value) {\n    const { colorInput } = this;\n    colorInput.value = value;\n    this.color = value;\n  }\n\n  setFloorCount(count) {\n    const { floorInput } = this;\n    floorInput.max = count - 1;\n    this.floorCount = count;\n  }\n\n  setFloor(value) {\n    const { floorInput } = this;\n    floorInput.value = value;\n    this.floor = value;\n    this.onSetFloor(value);\n  }\n\n  setModified(value) {\n    const { saveButton } = this;\n    saveButton.className = `save${value ? ' modified' : ''}`;\n  }\n\n  setTool(tool, modifier) {\n    const { pickButton, tiles } = this;\n    this.tool = { tool, modifier };\n    tiles.forEach((button) => { button.className = ''; });\n    pickButton.className = '';\n    switch (tool) {\n      case 'paint':\n        tiles[modifier].className = 'active';\n        break;\n      case 'pick':\n        pickButton.className = 'active';\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport default EditorUI;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xBEBEBE,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","class UI {\n  constructor(className) {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = className;\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default UI;\n","class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Object3D,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Object3D {\n  constructor() {\n    super();\n    {\n      const position = new Float32Array(Rain.numDrops * 3);\n      const geometry = new BufferGeometry();\n      geometry.addAttribute('position', (new BufferAttribute(position, 3).setDynamic(true)));\n      const ripples = new Points(\n        geometry,\n        new PointsMaterial({\n          color: 0xAAAADD,\n          fog: true,\n          size: 0.01,\n          sizeAttenuation: true,\n          transparent: true,\n          opacity: 1 / 3,\n        })\n      );\n      ripples.frustumCulled = false;\n      ripples.offsets = position;\n      this.add(ripples);\n      this.ripples = ripples;\n    }\n    {\n      const drop = (new BufferGeometry()).fromGeometry(\n        (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n      ).attributes.position.array;\n      const offsets = new Float32Array(Rain.numDrops * 3);\n      const geometry = new InstancedBufferGeometry();\n      geometry.addAttribute('position', new BufferAttribute(drop, 3));\n      geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n      const drops = new Mesh(\n        geometry,\n        new RainMaterial({\n          color: 0xAAAADD,\n        })\n      );\n      drops.frustumCulled = false;\n      drops.drop = new Vector3();\n      drops.offsets = offsets;\n      this.add(drops);\n      this.drops = drops;\n      for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n        this.resetDrop(i);\n        this.ripples.offsets[i] = 0;\n        this.ripples.offsets[i + 1] = -999;\n        this.ripples.offsets[i + 2] = 0;\n      }\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { drops, position, ripples } = this;\n    const { offsets } = drops;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        offsets[i + 1] = height;\n        this.resetDrop(i);\n      }\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drops, position, ripples } = this;\n    const { drop, offsets } = drops;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    ripples.offsets[i] = offsets[i];\n    ripples.offsets[i + 1] = offsets[i + 1] + 0.01;\n    ripples.offsets[i + 2] = offsets[i + 2];\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { drops, ripples } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import {\n  BoxBufferGeometry,\n  Mesh,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Door extends Mesh {\n  constructor({\n    color,\n  }) {\n    const geometry = new BoxBufferGeometry(1, 1.9, 0.2);\n    geometry.translate(0, 0.95, 0);\n    super(\n      geometry,\n      new GridMaterial({\n        color,\n      })\n    );\n    this.geometries = {\n      xAxis: geometry,\n      yAxis: geometry.clone(),\n    };\n    this.geometries.yAxis.rotateY(Math.PI * 0.5);\n    this.timeOffset = Math.random() * 100;\n  }\n\n  onAnimationTick({ time }) {\n    const { position, timeOffset } = this;\n    const scale = 1 - Math.max(Math.sin(time * 2 + timeOffset), 0);\n    this.scale.set(1, scale, 1);\n    position.y = (1 - scale) * 1.9;\n  }\n\n  get yAxis() {\n    return this._yAxis || false;\n  }\n\n  set yAxis(value) {\n    const current = this.yAxis;\n    this._yAxis = value;\n    if (current !== value) {\n      this.geometry = this.geometries[value ? 'yAxis' : 'xAxis'];\n    }\n  }\n}\n\nexport default Door;\n","import { Grid } from 'pathfinding';\nimport {\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneBufferGeometry,\n  VertexColors,\n  Object3D,\n} from 'three';\nimport Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport GridMaterial from '@/materials/grid';\nimport Door from './door';\n\nclass Floor extends Object3D {\n  constructor({ grid, number } = { number: 0 }) {\n    super();\n    this.setNumber(number);\n    this.entities = new Object3D();\n    this.entities.position.set(0, 0.1, 0);\n    this.add(this.entities);\n    const { width, height } = Floor.defaultGridSize;\n    this.grid = new Grid(width, height);\n    this.grid.setTile = ({\n      color,\n      type,\n      x,\n      y,\n    }) => {\n      const { entities, grid } = this;\n      const tile = grid.nodes[y][x];\n      const entity = entities.children.findIndex(({ spawn }) => (\n        x === spawn.x && y === spawn.y\n      ));\n      if (~entity) {\n        entities.remove(entities.children[entity]);\n      }\n      tile.color = color;\n      tile.type = type;\n      tile.walkable = type !== Floor.tiles.tile;\n      switch (type) {\n        case Floor.tiles.dude:\n        case Floor.tiles.thiccboi:\n        {\n          let Actor;\n          switch (type) {\n            case Floor.tiles.dude:\n              Actor = Dude;\n              break;\n            case Floor.tiles.thiccboi:\n              Actor = ThiccBoi;\n              break;\n            default:\n              break;\n          }\n          const actor = new Actor({\n            arms: 0x222222,\n            eyes: 0x999999 * Math.random(),\n            hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n            head: 0x999999 * Math.random(),\n            legs: 0x222222,\n            torso: 0x999999 * Math.random(),\n          });\n          actor.spawn = { x, y };\n          actor.position.set(x + 0.5, 0, y + 0.5);\n          entities.add(actor);\n          break;\n        }\n        case Floor.tiles.door: {\n          let { r, g, b } = color;\n          const avg = (r + g + b) / 3;\n          r += avg * 0.3;\n          g += avg * 0.3;\n          b += avg * 0.3;\n          const door = new Door({\n            color: (new Color())\n              .setRGB(r, g, b),\n          });\n          door.spawn = { x, y };\n          door.position.set(x + 0.5, 0, y + 0.5);\n          entities.add(door);\n          break;\n        }\n        default:\n          break;\n      }\n    };\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        if (grid) {\n          const [type, r, g, b] = grid[y][x];\n          this.grid.setTile({\n            x,\n            y,\n            type,\n            color: (new Color())\n              .setRGB(r / 0xFF, g / 0xFF, b / 0xFF),\n          });\n        } else {\n          this.grid.setTile({\n            x,\n            y,\n            type: Floor.tiles.air,\n            color: new Color(0),\n          });\n        }\n      }\n    }\n    const plane = new PlaneBufferGeometry(width, height, 2, 2);\n    plane.rotateX(Math.PI * -0.5);\n    plane.translate(width * 0.5, 0, height * 0.5);\n    const intersect = new Mesh(\n      plane,\n      new MeshBasicMaterial({\n        side: DoubleSide,\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.add(intersect);\n    this.intersect = [intersect];\n    const material = new GridMaterial({\n      vertexColors: VertexColors,\n    });\n    this.chunks = [...Array(Math.ceil(this.grid.height / Floor.chunkSize.height))].map(() => (\n      [...Array(Math.ceil(this.grid.width / Floor.chunkSize.width))].map(() => {\n        const geometry = new BufferGeometry();\n        geometry.setIndex(new BufferAttribute(new Uint16Array(), 1));\n        geometry.addAttribute('position', new BufferAttribute(new Float32Array(), 3));\n        geometry.addAttribute('color', new BufferAttribute(new Float32Array(), 3));\n        geometry.addAttribute('normal', new BufferAttribute(new Float32Array(), 3));\n        const chunk = new Mesh(\n          geometry,\n          material\n        );\n        chunk.visible = false;\n        this.add(chunk);\n        this.intersect.push(chunk);\n        return chunk;\n      })\n    ));\n    for (let y = 0; y < this.chunks.length; y += 1) {\n      for (let x = 0; x < this.chunks[0].length; x += 1) {\n        this.updateChunk(x, y);\n      }\n    }\n  }\n\n  setNumber(number) {\n    this.number = number;\n    this.position.set(0, Floor.height * number, 0);\n  }\n\n  setTile({\n    color,\n    type,\n    x,\n    y,\n  }) {\n    const { chunks, grid } = this;\n    if (\n      x < 0\n      || x > grid.width - 1\n      || y < 0\n      || y > grid.height - 1\n    ) {\n      return;\n    }\n    color = new Color(color || 0);\n    const avg = (color.r + color.g + color.b) / 3 * 0.1;\n    color.offsetHSL(\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg\n    );\n    grid.setTile({\n      color,\n      type,\n      x,\n      y,\n    });\n    const chunk = {\n      x: Math.floor(x / Floor.chunkSize.width),\n      y: Math.floor(y / Floor.chunkSize.height),\n    };\n    for (\n      let cy = Math.max(chunk.y - 1, 0);\n      cy <= Math.min(y + 1, chunks.length - 1);\n      cy += 1\n    ) {\n      for (\n        let cx = Math.max(chunk.x - 1, 0);\n        cx <= Math.min(x + 1, chunks[0].length - 1);\n        cx += 1\n      ) {\n        this.updateChunk(cx, cy);\n      }\n    }\n  }\n\n  testTile(x, y, types) {\n    const { grid } = this;\n    if (x < 0 || x > grid.width - 1 || y < 0 || y > grid.height - 1) {\n      return false;\n    }\n    return types.indexOf(grid.getNodeAt(x, y).type) !== -1;\n  }\n\n  updateChunk(cx, cy) {\n    const {\n      chunks,\n      entities,\n      grid,\n      number,\n    } = this;\n    const indices = [];\n    const vertices = [];\n    const colors = [];\n    const normals = [];\n    const pushFace = (v, c, n) => {\n      const offset = vertices.length / 3;\n      vertices.push(...v);\n      colors.push(...c);\n      normals.push(...n);\n      indices.push(\n        offset, offset + 1, offset + 2,\n        offset + 2, offset + 3, offset\n      );\n    };\n    const pushBox = (x, y, width, length, height, { r, g, b }, testNeighbor, topAO, z = 0) => {\n      const o = {\n        x: x + 0.5,\n        y: y + 0.5,\n      };\n      const hw = width * 0.5;\n      const hl = length * 0.5;\n      const wallAO = {\n        bottom: 0.8 + (0.2 * z / Floor.height),\n        top: 0.8 + (0.2 * (z + height) / Floor.height),\n      };\n      if (!testNeighbor(x, y + 1)) {\n        pushFace(\n          [\n            o.x - hw, z, o.y + hl,\n            o.x + hw, z, o.y + hl,\n            o.x + hw, z + height, o.y + hl,\n            o.x - hw, z + height, o.y + hl,\n          ],\n          [\n            r * wallAO.bottom, g * wallAO.bottom, b * wallAO.bottom,\n            r * wallAO.bottom, g * wallAO.bottom, b * wallAO.bottom,\n            r * wallAO.top, g * wallAO.top, b * wallAO.top,\n            r * wallAO.top, g * wallAO.top, b * wallAO.top,\n          ],\n          [\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n          ]\n        );\n      }\n      if (!testNeighbor(x, y - 1)) {\n        pushFace(\n          [\n            o.x + hw, z, o.y - hl,\n            o.x - hw, z, o.y - hl,\n            o.x - hw, z + height, o.y - hl,\n            o.x + hw, z + height, o.y - hl,\n          ],\n          [\n            r * wallAO.bottom, g * wallAO.bottom, b * wallAO.bottom,\n            r * wallAO.bottom, g * wallAO.bottom, b * wallAO.bottom,\n            r * wallAO.top, g * wallAO.top, b * wallAO.top,\n            r * wallAO.top, g * wallAO.top, b * wallAO.top,\n          ],\n          [\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n          ]\n        );\n      }\n      if (!testNeighbor(x - 1, y)) {\n        pushFace(\n          [\n            o.x - hw, z, o.y - hl,\n            o.x - hw, z, o.y + hl,\n            o.x - hw, z + height, o.y + hl,\n            o.x - hw, z + height, o.y - hl,\n          ],\n          [\n            r * wallAO.bottom, g * wallAO.bottom, b * wallAO.bottom,\n            r * wallAO.bottom, g * wallAO.bottom, b * wallAO.bottom,\n            r * wallAO.top, g * wallAO.top, b * wallAO.top,\n            r * wallAO.top, g * wallAO.top, b * wallAO.top,\n          ],\n          [\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n          ]\n        );\n      }\n      if (!testNeighbor(x + 1, y)) {\n        pushFace(\n          [\n            o.x + hw, z, o.y + hl,\n            o.x + hw, z, o.y - hl,\n            o.x + hw, z + height, o.y - hl,\n            o.x + hw, z + height, o.y + hl,\n          ],\n          [\n            r * wallAO.bottom, g * wallAO.bottom, b * wallAO.bottom,\n            r * wallAO.bottom, g * wallAO.bottom, b * wallAO.bottom,\n            r * wallAO.top, g * wallAO.top, b * wallAO.top,\n            r * wallAO.top, g * wallAO.top, b * wallAO.top,\n          ],\n          [\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n          ]\n        );\n      }\n      if (number > 0 || z !== 0) {\n        pushFace(\n          [\n            o.x - hw, z + 0.001, o.y - hl,\n            o.x + hw, z + 0.001, o.y - hl,\n            o.x + hw, z + 0.001, o.y + hl,\n            o.x - hw, z + 0.001, o.y + hl,\n          ],\n          [\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n            r * 0.6, g * 0.6, b * 0.6,\n          ],\n          [\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n          ]\n        );\n      }\n      pushFace(\n        [\n          o.x - hw, z + height, o.y + hl,\n          o.x + hw, z + height, o.y + hl,\n          o.x + hw, z + height, o.y - hl,\n          o.x - hw, z + height, o.y - hl,\n        ],\n        [\n          r * topAO[0], g * topAO[0], b * topAO[0],\n          r * topAO[1], g * topAO[1], b * topAO[1],\n          r * topAO[2], g * topAO[2], b * topAO[2],\n          r * topAO[3], g * topAO[3], b * topAO[3],\n        ],\n        [\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n          0, 1, 0,\n        ]\n      );\n    };\n    const testTileNeighbor = (x, y) => this.testTile(\n      x,\n      y,\n      [\n        Floor.tiles.tile,\n        Floor.tiles.wall,\n        Floor.tiles.window,\n        Floor.tiles.fence,\n        Floor.tiles.door,\n        Floor.tiles.dude,\n        Floor.tiles.thiccboi,\n      ]\n    );\n    const testWallNeighbor = (x, y) => this.testTile(x, y, [Floor.tiles.wall]);\n    const testWindowNeighbor = (x, y) => this.testTile(x, y, [\n      Floor.tiles.wall,\n      Floor.tiles.window,\n    ]);\n    const tileAO = (x, y, s = 0.2) => (\n      this.testTile(x, y, [Floor.tiles.wall, Floor.tiles.window, Floor.tiles.fence]) ? s : 0\n    );\n    const windowAO = (x, y, s = 0.2) => (\n      this.testTile(x, y, [Floor.tiles.wall]) ? s : 0\n    );\n    const pushTile = (x, y, color) => (\n      pushBox(x, y, 1, 1, 0.1, color, testTileNeighbor, [\n        1 - Math.min(tileAO(x, y + 1) + tileAO(x - 1, y) + tileAO(x - 1, y + 1, 0.1), 0.4),\n        1 - Math.min(tileAO(x, y + 1) + tileAO(x + 1, y) + tileAO(x + 1, y + 1, 0.1), 0.4),\n        1 - Math.min(tileAO(x, y - 1) + tileAO(x + 1, y) + tileAO(x + 1, y - 1, 0.1), 0.4),\n        1 - Math.min(tileAO(x, y - 1) + tileAO(x - 1, y) + tileAO(x - 1, y - 1, 0.1), 0.4),\n      ])\n    );\n    const pushDoorway = (x, y, color) => {\n      pushTile(x, y, color);\n      pushBox(\n        x,\n        y,\n        1,\n        1,\n        Floor.height * (1 / 3),\n        color,\n        testWindowNeighbor,\n        [1, 1, 1, 1],\n        Floor.height * (1 / 3) * 2\n      );\n      entities.children[entities.children.findIndex(({ spawn }) => (\n        x === spawn.x && y === spawn.y\n      ))].yAxis = (\n        this.testTile(x, y + 1, [Floor.tiles.wall, Floor.tiles.door])\n        && this.testTile(x, y - 1, [Floor.tiles.wall, Floor.tiles.door])\n      );\n    };\n    const pushWall = (x, y, color) => (\n      pushBox(x, y, 1, 1, Floor.height, color, testWallNeighbor, [1, 1, 1, 1])\n    );\n    const pushFence = (x, y, color) => {\n      pushBox(x, y, 1, 1, Floor.height * (1 / 3), color, testWindowNeighbor, [\n        1 - Math.min(windowAO(x, y + 1) + windowAO(x - 1, y) + windowAO(x - 1, y + 1, 0.1), 0.4),\n        1 - Math.min(windowAO(x, y + 1) + windowAO(x + 1, y) + windowAO(x + 1, y + 1, 0.1), 0.4),\n        1 - Math.min(windowAO(x, y - 1) + windowAO(x + 1, y) + windowAO(x + 1, y - 1, 0.1), 0.4),\n        1 - Math.min(windowAO(x, y - 1) + windowAO(x - 1, y) + windowAO(x - 1, y - 1, 0.1), 0.4),\n      ]);\n    };\n    const pushWindow = (x, y, color) => {\n      pushFence(x, y, color);\n      pushBox(\n        x,\n        y,\n        1,\n        1,\n        Floor.height * (1 / 3),\n        color,\n        testWindowNeighbor,\n        [1, 1, 1, 1],\n        Floor.height * (1 / 3) * 2\n      );\n    };\n    for (\n      let y = cy * Floor.chunkSize.height;\n      y < Math.min((cy + 1) * Floor.chunkSize.height, grid.height);\n      y += 1\n    ) {\n      for (\n        let x = cx * Floor.chunkSize.width;\n        x < Math.min((cx + 1) * Floor.chunkSize.width, grid.width);\n        x += 1\n      ) {\n        const tile = grid.getNodeAt(x, y);\n        switch (tile.type) {\n          case Floor.tiles.air:\n            break;\n          case Floor.tiles.wall:\n            pushWall(x, y, tile.color);\n            break;\n          case Floor.tiles.window:\n            pushWindow(x, y, tile.color);\n            break;\n          case Floor.tiles.fence:\n            pushFence(x, y, tile.color);\n            break;\n          case Floor.tiles.door:\n            pushDoorway(x, y, tile.color);\n            break;\n          default:\n            pushTile(x, y, tile.color);\n            break;\n        }\n      }\n    }\n    const mesh = chunks[cy][cx];\n    const { geometry } = mesh;\n    const index = geometry.getIndex();\n    const position = geometry.getAttribute('position');\n    const color = geometry.getAttribute('color');\n    const normal = geometry.getAttribute('normal');\n    index.setArray(new Uint16Array(indices));\n    index.needsUpdate = true;\n    position.setArray(new Float32Array(vertices));\n    position.needsUpdate = true;\n    color.setArray(new Float32Array(colors));\n    color.needsUpdate = true;\n    normal.setArray(new Float32Array(normals));\n    normal.needsUpdate = true;\n    geometry.computeBoundingSphere();\n    mesh.visible = !!position.count;\n  }\n}\n\nFloor.height = 3;\n\nFloor.tiles = {\n  air: 0,\n  tile: 1,\n  wall: 2,\n  window: 3,\n  fence: 4,\n  door: 5,\n  dude: 6,\n  thiccboi: 7,\n};\n\nFloor.defaultGridSize = {\n  width: 48,\n  height: 48,\n};\n\nFloor.chunkSize = {\n  width: 16,\n  height: 16,\n};\n\nexport default Floor;\n","import {\n  Object3D,\n} from 'three';\nimport Floor from './floor';\n\nclass Building extends Object3D {\n  constructor(meta = {}) {\n    super();\n    this.floors = meta.floors ? (\n      meta.floors.map((grid, number) => new Floor({ grid, number }))\n    ) : [new Floor()];\n    this.floors.forEach(floor => this.add(floor));\n    this.activeFloor = 0;\n    this.computeHeightmap();\n  }\n\n  onAnimationTick(animation) {\n    const { floors } = this;\n    floors.forEach(floor => (\n      floor.entities.children.forEach(actor => actor.onAnimationTick(animation))\n    ));\n  }\n\n  computeHeightmap() {\n    const { floors } = this;\n    const heightmap = [];\n    floors.forEach(({ grid: { nodes: row } }, floor) => (\n      row.forEach(nodes => (\n        nodes.forEach(({ x, y, type }) => {\n          if (!heightmap[y]) heightmap[y] = [];\n          let height;\n          switch (type) {\n            case Floor.tiles.tile:\n              height = (floor * 3) + 0.1;\n              break;\n            case Floor.tiles.wall:\n            case Floor.tiles.window:\n              height = (floor + 1) * 3;\n              break;\n            default:\n              height = 0;\n              break;\n          }\n          heightmap[y][x] = Math.max(heightmap[y][x] || 0, height);\n        })\n      ))\n    ));\n    this.heightmap = heightmap;\n  }\n\n  getHeight(x, y) {\n    const { heightmap } = this;\n    x = Math.floor(x);\n    y = Math.floor(y);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || y < 0\n      || y > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[y][x];\n  }\n\n  export() {\n    const { floors } = this;\n    return {\n      floors: floors.map(({ grid: { nodes: row } }) => (\n        row.map(nodes => (\n          nodes.map(({ type, color }) => [\n            type & 0xFF,\n            Math.floor(color.r * 0xFF) & 0xFF,\n            Math.floor(color.g * 0xFF) & 0xFF,\n            Math.floor(color.b * 0xFF) & 0xFF,\n          ])\n        ))\n      )),\n    };\n  }\n\n  addFloor() {\n    const { floors, activeFloor } = this;\n    const floor = new Floor({ number: activeFloor + 1 });\n    floors.splice(activeFloor + 1, 0, floor);\n    this.add(floor);\n    for (let i = activeFloor + 1; i < floors.length; i += 1) {\n      floors[i].setNumber(i);\n    }\n    this.activeFloor += 1;\n  }\n\n  removeFloor() {\n    const { floors, activeFloor } = this;\n    const [floor] = floors.splice(activeFloor, 1);\n    this.remove(floor);\n    if (!floors.length) this.addFloor();\n    if (!floors[activeFloor]) {\n      this.activeFloor -= 1;\n    }\n    for (let i = activeFloor; i < floors.length; i += 1) {\n      floors[i].setNumber(i);\n    }\n  }\n}\n\nexport default Building;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.keyboard = {\n      backwards: false,\n      forwards: false,\n      leftwards: false,\n      rightwards: false,\n    };\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('blur', this.onBlur.bind(this), false);\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('keydown', this.onKeydown.bind(this), false);\n    window.addEventListener('keyup', this.onKeyup.bind(this), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onBlur() {\n    const { keyboard } = this;\n    keyboard.forwards = false;\n    keyboard.backwards = false;\n    keyboard.leftwards = false;\n    keyboard.rightwards = false;\n  }\n\n  onKeydown({ keyCode, repeat, target }) {\n    const { keyboard } = this;\n    if (\n      repeat\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = true;\n        break;\n      case 83:\n        keyboard.backwards = true;\n        break;\n      case 65:\n        keyboard.leftwards = true;\n        break;\n      case 68:\n        keyboard.rightwards = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    const { keyboard } = this;\n    if (repeat) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = false;\n        break;\n      case 83:\n        keyboard.backwards = false;\n        break;\n      case 65:\n        keyboard.leftwards = false;\n        break;\n      case 68:\n        keyboard.rightwards = false;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled || e.target.tagName !== 'CANVAS') return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: Dude.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/meshes/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    bonesOrigin,\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    Object.keys(bonesOrigin).forEach((bone) => {\n      this.skeleton.bones[Actor.Bones[bone]].position.copy(bonesOrigin[bone]);\n    });\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 24);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/meshes/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processPointer(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.minHeight = 0.1;\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/meshes/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += (animation.delta * 0.5) / Math.abs(route.travel);\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshLambertMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Road extends Mesh {\n  constructor() {\n    const geometry = new Geometry();\n    const track = new PlaneGeometry(512, 4);\n    track.rotateX(Math.PI * -0.5);\n    track.faces.forEach((face) => {\n      face.color.set(0x222233);\n      face.materialIndex = 0;\n    });\n    const markings = new PlaneGeometry(1, 0.2);\n    markings.rotateX(Math.PI * -0.5);\n    markings.faces.forEach((face) => {\n      face.color.set(0xBEBEBE);\n      face.materialIndex = 0;\n    });\n    for (let x = -128; x < 128; x += 5) {\n      geometry.merge(\n        markings.clone().translate(x, 0.001, 0)\n      );\n    }\n    geometry.merge(track);\n    geometry.translate(0, 0, 4);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshLambertMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Road;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.floor(Math.min(Math.max(point.x, 0), grid.width - 1));\n    point.z = Math.floor(Math.min(Math.max(point.z, 0), grid.height - 1));\n    return point;\n  }\n}\n\nexport default Walkable;\n","import {\n  Vector3,\n} from 'three';\n\nclass AI {\n  constructor(building) {\n    this.building = building;\n    this.actors = [];\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    const { actors } = this;\n    actors.push({\n      actor,\n      floor,\n      position,\n      lastThought: 0,\n      state: AI.states.IDLE,\n    });\n  }\n\n  onAnimationTick({ time }) {\n    const { actors, building } = this;\n    actors.forEach((actor) => {\n      const {\n        floor,\n        position,\n        lastThought,\n        state,\n      } = actor;\n      if (state === AI.states.IDLE) {\n        if (time - lastThought > 3) {\n          actor.lastThought = time;\n          if (Math.random() > 0.75) {\n            actor.state = AI.states.WALKING;\n          }\n        }\n        switch (actor.state) {\n          case AI.states.WALKING: {\n            const { walkable } = building.floors[floor];\n            const { finder, grid } = walkable;\n            let destination;\n            let path;\n            grid.setWalkableAt(position.x, position.z, true);\n            do {\n              destination = {\n                x: Math.floor(Math.random() * grid.width),\n                z: Math.floor(Math.random() * grid.height),\n              };\n              path = finder.findPath(\n                position.x, position.z,\n                destination.x, destination.z,\n                grid.clone()\n              )\n                .map(([x, z]) => (\n                  walkable.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n                ));\n            } while (\n              path.length < 2\n            );\n            grid.setWalkableAt(destination.x, destination.z, false);\n            actor.actor.walk(path.slice(1), () => {\n              position.x = destination.x;\n              position.z = destination.z;\n              actor.lastThought = time;\n              actor.state = AI.states.IDLE;\n            });\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n\nAI.states = {\n  IDLE: 0,\n  WALKING: 1,\n};\n\nexport default AI;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Road from './road';\nimport Wall from './wall';\nimport Walkable from './walkable';\nimport AI from './ai';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.ai = new AI(this);\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n    this.road = new Road();\n    this.add(this.road);\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    this.addToGrid({ floor, mesh: actor, position });\n    this.ai.addActor({ actor, floor, position });\n  }\n\n  addToGrid({\n    floor,\n    mesh,\n    position,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(position.x, position.z, false);\n    mesh.position.set(position.x + 0.5, 0, position.z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { ai, children } = this;\n    ai.onAnimationTick(animation);\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","import UI from '@/core/ui';\n\nclass ElevatorUI extends UI {\n  constructor() {\n    super('dialog');\n  }\n\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport Building from '@/meshes/legacy_building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/meshes/marker';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 4,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 4,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.minHeight = 0.1;\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const actors = [Dude, ThiccBoi, ThiccBoi];\n  const dudes = [...Array(building.floors.length * actors.length)].map(() => {\n    const Actor = actors[Math.floor(Math.random() * actors.length)];\n    const dude = new Actor({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * building.floors.length);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * (grid.height - 1)),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addActor({\n      floor,\n      actor: dude,\n      position: spawn,\n    });\n    dude.position.y += 0.001;\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const from = player.position.clone();\n        const to = dude.position.clone();\n        to.z += 1;\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    elevator.removePassenger(player);\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const from = player.position.clone();\n          const to = point.clone();\n          const path = walkable.getPath(from, to);\n          if (path.length) {\n            walkable.grid.setWalkableAt(from.x, from.z, true);\n            if (path.length > 1) {\n              player.walk(path.slice(1), onDestination);\n            } else {\n              onDestination();\n            }\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const from = player.position.clone();\n        const to = point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const from = player.position.clone();\n        const to = hit.point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n          });\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as editor } from './editor';\nexport { default as game } from './game';\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(90, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxDistance = 16;\n    this.minHeight = -Infinity;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.forward = new Vector3();\n    this.right = new Vector3();\n    this.worldUp = new Vector3(0, 1, 0);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processPointer({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      const { maxDistance } = this;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), maxDistance);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  processKeyboard({\n    backwards,\n    delta,\n    forwards,\n    leftwards,\n    rightwards,\n  }) {\n    const {\n      forward,\n      right,\n      tilt,\n      pitch,\n      root: { position },\n      worldUp,\n    } = this;\n    const step = delta * 4;\n    forward.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      0,\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize().negate();\n    right.crossVectors(forward, worldUp);\n    if (forwards) {\n      position.addScaledVector(forward, step);\n    }\n    if (backwards) {\n      position.addScaledVector(forward, -step);\n    }\n    if (leftwards) {\n      position.addScaledVector(right, -step);\n    }\n    if (rightwards) {\n      position.addScaledVector(right, step);\n    }\n  }\n\n  updateOrbit() {\n    const {\n      minHeight,\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, minHeight), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.001);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from '@/meshes/grid';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x666666));\n    const light = new DirectionalLight(0xffffff, 0.3);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.2);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","class History {\n  constructor() {\n    this.past = [];\n    this.future = [];\n  }\n\n  empty() {\n    const { past, future } = this;\n    past.length = 0;\n    future.length = 0;\n  }\n\n  undo() {\n    const { past, future } = this;\n    const prev = past.pop();\n    if (!prev) {\n      return;\n    }\n    prev.undo();\n    future.unshift(prev);\n  }\n\n  redo() {\n    const { past, future } = this;\n    const next = future.shift();\n    if (!next) {\n      return;\n    }\n    next.redo();\n    past.push(next);\n  }\n\n  push({ undo, redo }) {\n    const { past, future } = this;\n    past.push({ undo, redo });\n    future.length = 0;\n  }\n}\n\nexport default History;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.lambert.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n        'varying float vOrientation;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n        'vOrientation = normal.y != 0.0 ? 1.0 : (normal.x != 0.0 ? 2.0 : 0.0);',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.lambert.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'varying float vOrientation;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = (vOrientation > 1.5 ? vPosition.zy : (vOrientation > 0.5 ? vPosition.xz : vPosition.xy)) * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.lambert.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/core/input';\nimport Music from '@/core/music';\nimport Scene from '@/core/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst splash = document.getElementById('splash');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    splash.style.display = 'none';\n    input.isEnabled = true;\n    if (__PRODUCTION__) music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n\nif (window.process && window.process.type) {\n  // We're running inside electron.\n  // Allow the user to exit with the ESC key.\n  window.addEventListener('keydown', ({ keyCode, repeat }) => {\n    if (keyCode === 27 && !repeat) {\n      if (splash.style.display !== 'none') {\n        window.close();\n      } else {\n        splash.style.display = '';\n        input.isEnabled = false;\n        input.touches.once('end', () => {\n          splash.style.display = 'none';\n          input.isEnabled = true;\n        });\n      }\n    }\n  }, false);\n}\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass ThiccBoi extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: ThiccBoi.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: ThiccBoi.geometry(palette),\n      material: ThiccBoi.material,\n    });\n  }\n}\n\nThiccBoi.bones = {\n  hip: new Vector3(0, 0.4, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.325, 0.45, 0),\n  rightArm: new Vector3(0.325, 0.45, 0),\n  leftLeg: new Vector3(-0.08, 0.1, 0),\n  rightLeg: new Vector3(0.08, 0.1, 0),\n};\n\nThiccBoi.geometry = (palette) => {\n  // const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  const torso = new SphereGeometry(0.26, 8, 8);\n  torso.translate(0, 0.25, 0);\n  torso.scale(1.5, 1, 1.5);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new CylinderGeometry(0.175, 0.15, 0.4, 6);\n  // const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.03, 0.075, 0.3, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.15, 0);\n  rightArm.translate(0, -0.15, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.1, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nThiccBoi.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default ThiccBoi;\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}