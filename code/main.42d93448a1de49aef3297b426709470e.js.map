{"version":3,"sources":["webpack:///./src/core/music.js","webpack:///./src/core/input.js","webpack:///./src/meshes/bubble.js","webpack:///./src/core/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/meshes/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/meshes/building/floor.js","webpack:///./src/meshes/building/index.js","webpack:///./src/meshes/moon.js","webpack:///./src/meshes/starfield.js","webpack:///./src/scenes/editor.js","webpack:///./src/actors/thiccboi.js","webpack:///./src/meshes/legacy_building/elevator/cabin.js","webpack:///./src/meshes/button.js","webpack:///./src/meshes/legacy_building/elevator/doors.js","webpack:///./src/meshes/legacy_building/elevator/shaft.js","webpack:///./src/meshes/legacy_building/elevator/index.js","webpack:///./src/meshes/legacy_building/wall.js","webpack:///./src/meshes/legacy_building/hallway.js","webpack:///./src/meshes/legacy_building/road.js","webpack:///./src/meshes/legacy_building/walkable.js","webpack:///./src/meshes/legacy_building/ai.js","webpack:///./src/meshes/legacy_building/index.js","webpack:///./src/ui/dialog.js","webpack:///./src/ui/elevator.js","webpack:///./src/materials/rain.js","webpack:///./src/meshes/rain.js","webpack:///./src/scenes/game.js","webpack:///./src/scenes/index.js","webpack:///./src/core/camera.js","webpack:///./src/meshes/grid.js","webpack:///./src/core/vignette.js","webpack:///./src/core/scene.js","webpack:///./src/materials/grid.js","webpack:///./src/index.js","webpack:///./src/materials/sprite.js"],"names":["Music","_ref","_this","this","toggle","_classCallCheck","script","document","createElement","async","defer","src","body","appendChild","check","window","SC","api","initialize","client_id","tracks","shuffle","track","addEventListener","wantsToPlay","play","setTimeout","index","length","random","Math","floor","temp","_this2","player","kill","id","stream","concat","then","on","next","setVolume","catch","button","isPlaying","pause","className","Input","_ref$mount","mount","keyboard","backwards","forwards","leftwards","rightwards","pointer","current","Vector2","movement","x","y","normalized","last","wheel","touches","Touches","preventSimulated","target","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","e","preventDefault","onKeydown","onKeyup","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","keyCode","_ref2","repeat","indexOf","tagName","_ref3","isEnabled","secondary","primary","_ref4","_ref6","_slicedToArray","_ref5","rect","top","left","i","_touches$i","clientX","clientY","width","height","copy","_ref7","deltaY","_ref8","getBoundingClientRect","Bubble","_possibleConstructorReturn","_getPrototypeOf","call","SpriteMaterial","depthTest","scale","set","visible","Sprite","lines","delay","arguments","undefined","_this$material","material","renderer","ctx","clearRect","fillStyle","textAlign","textBaseline","shadowColor","shadowBlur","font","fillText","shift","map","needsUpdate","clearTimeout","timer","display","Actor","bonesOrigin","collisionGeometry","geometry","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","add","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","Object","keys","forEach","bone","skeleton","bones","Bones","position","mixer","AnimationMixer","actor_assertThisInitialized","actions","animations","reduce","action","_defineProperty","clipAction","animation","idle","timeScale","rotationAux","movementAux","Vector3","collisionMesh","Mesh","MeshBasicMaterial","opacity","transparent","wireframe","SkinnedMesh","limbs","merged","Geometry","limb","faces","face","materialIndex","merge","vertices","a","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","computeVertexNormals","computeBoundingSphere","delta","walkingSpeed","walk","destinationMarker","callback","onDestinationCallback","rotationSpeed","route","targetRotation","update","rotationStep","rotationDelta","rotation","min","max","abs","waypoint","path","distance","distanceTo","step","sub","normalize","multiplyScalar","faceTo","setAnimation","fadeOut","reset","fadeIn","point","angle","z","PI","bubble","boundingSphere","radius","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","QuaternionKeyframeTrack","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","dude_possibleConstructorReturn","dude_getPrototypeOf","CylinderBufferGeometry","translate","CylinderGeometry","color","SphereGeometry","hat","leftEye","eyes","rightEye","clone","arms","legs","geometryFromLimbs","center","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","rotateX","marker_possibleConstructorReturn","marker_getPrototypeOf","time","inc","sin","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","v","dude","root","onAnimationTick","camera","grid","getPointerFrame","processPointer","hit","getRaycaster","intersectObject","walkTo","mainDudeX","mainDudeZ","mainDude","pitch","updateOrbit","Floor","floor_classCallCheck","floor_possibleConstructorReturn","floor_getPrototypeOf","_Floor$defaultGridSiz","defaultGridSize","Grid","setTile","type","tile","nodes","tiles","air","plane","PlaneBufferGeometry","intersect","GridMaterial","updateTiles","isActive","Object3D","avg","Color","r","g","offsetHSL","indices","colors","normals","getNodeAt","offset","_tile$color","getIndex","setIndex","BufferAttribute","Uint16Array","getAttribute","addAttribute","normal","setArray","_isActive","active","Building","meta","building_classCallCheck","building_possibleConstructorReturn","building_getPrototypeOf","floors","activeFloor","_activeFloor","Moon","moon_classCallCheck","moon_possibleConstructorReturn","moon_getPrototypeOf","SphereBufferGeometry","fog","Starfield","starfield_classCallCheck","count","size","aux","o","starfield_possibleConstructorReturn","starfield_getPrototypeOf","PointsMaterial","sizeAttenuation","moon","Points","editor","starfield","building","tilt","_building$floors$buil","lastTile","processKeyboard","editor_objectSpread","raycaster","ThiccBoi","thiccboi_classCallCheck","thiccboi_possibleConstructorReturn","thiccboi_getPrototypeOf","Cabin","cabin_classCallCheck","BoxGeometry","setHSL","splice","cabin_possibleConstructorReturn","cabin_getPrototypeOf","side","DoubleSide","Button","onTap","button_classCallCheck","BoxBufferGeometry","button_possibleConstructorReturn","button_getPrototypeOf","animationVector","origin","ret","tapping","ThreeMath","smoothstep","addScaledVector","Doors","onCall","doors_classCallCheck","doors_possibleConstructorReturn","doors_getPrototypeOf","PlaneGeometry","door","animationScale","state","states","CLOSED","targetState","callButton","MOVING","OPEN","close","open","children","animationStep","Shaft","shaft_classCallCheck","back","rotateY","shaft_possibleConstructorReturn","shaft_getPrototypeOf","Elevator","elevator_classCallCheck","elevator_getPrototypeOf","animationStart","shaft","doors","elevator_toConsumableArray","elevator","elevator_assertThisInitialized","cabin","passengers","passenger","findIndex","p","travel","to","from","Wall","_ref2$aoTop","aoTop","_ref2$aoBottom","aoBottom","wall_classCallCheck","getGeometry","orientation","wall_possibleConstructorReturn","wall_getPrototypeOf","_ref$aoTop","_ref$aoBottom","_ref$width","_ref$height","wall","ceil","wall_toConsumableArray","j","Hallway","hasCeiling","hasElevator","isEdge","isLobby","hallway_classCallCheck","hallway_possibleConstructorReturn","hallway_getPrototypeOf","Road","road_classCallCheck","markings","road_possibleConstructorReturn","road_getPrototypeOf","MeshLambertMaterial","Walkable","walkable_classCallCheck","walkable_possibleConstructorReturn","walkable_getPrototypeOf","finder","AStarFinder","allowDiagonal","dontCrossCorners","worldToGrid","findPath","walkable_slicedToArray","localToWorld","worldToLocal","AI","ai_classCallCheck","actors","actor","lastThought","IDLE","WALKING","destination","walkable","setWalkableAt","ai_slicedToArray","slice","elevators","legacy_building_classCallCheck","legacy_building_getPrototypeOf","ai","legacy_building_assertThisInitialized","layout","split","heightmap","legacy_building_toConsumableArray","buttons","meshes","rooms","room","mesh","elevatorIndex","road","addToGrid","addActor","child","Dialog","dialog_classCallCheck","wrapper","content","removeChild","tag","node","firstChild","ElevatorUI","onFloor","onExit","empty","unmount","innerText","RainMaterial","_ref$color","rest","_objectWithoutProperties","rain_classCallCheck","vertexShader","ShaderLib","basic","replace","join","rain_possibleConstructorReturn","rain_getPrototypeOf","rain_objectSpread","name","uniforms","UniformsUtils","fragmentShader","diffuse","value","ShaderMaterial","Rain","meshes_rain_classCallCheck","meshes_rain_possibleConstructorReturn","meshes_rain_getPrototypeOf","numDrops","setDynamic","ripples","frustumCulled","offsets","drop","attributes","array","InstancedBufferGeometry","InstancedBufferAttribute","drops","resetDrop","testHeight","func","game","rain","reverse","maxHeight","testMeshes","game_toConsumableArray","setHeightTest","getHeight","spawn","isWalkableAt","elevatorUI","_building$floors$floo","intersectObjects","object","parent","onDestination","say","getPath","elevatorFloor","show","addPassenger","removePassenger","tap","__webpack_require__","d","__webpack_exports__","Camera","Infinity","speed","Raycaster","_assertThisInitialized","forward","right","worldUp","PerspectiveCamera","setFromCamera","far","hasUpdated","cos","negate","crossVectors","ray","direction","lookAt","_ref$background","background","_ref$size","_ref$subdivisions","subdivisions","grid_classCallCheck","grid_possibleConstructorReturn","grid_getPrototypeOf","Vignette","vignette_classCallCheck","vignette_possibleConstructorReturn","vignette_getPrototypeOf","OrthographicCamera","sprite","wrapS","ClampToEdgeWrapping","wrapT","magFilter","NearestFilter","minFilter","LinearFilter","Scene","grd","createRadialGradient","addColorStop","beginPath","fill","clearDepth","render","scene_classCallCheck","clock","Clock","WebGLRenderer","alpha","antialias","autoClear","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","sky","setClearColor","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","vignette","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","getDelta","oldTime","clear","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","lambert","primaryGrid","secondaryGrid","extensions","derivatives","lights","setImmediate","fonts","loaded","_core_input__WEBPACK_IMPORTED_MODULE_0__","_core_music__WEBPACK_IMPORTED_MODULE_1__","_core_scene__WEBPACK_IMPORTED_MODULE_2__","_scenes__WEBPACK_IMPORTED_MODULE_3__","getElementById","splash","music","location","hash","Scenes","reload","test","fontTester","style","fontFamily","initialWidth","once","process","texture","CanvasTexture","getContext","ThreeSprite"],"mappings":"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","file":"code/main.0f6c0bc704817aebe1c6.js","sourcesContent":["class Music {\n  static shuffle(tracks) {\n    for (let index = tracks.length - 1; index >= 0; index -= 1) {\n      const random = Math.floor(Math.random() * tracks.length);\n      const temp = tracks[index];\n      tracks[index] = tracks[random];\n      tracks[random] = temp;\n    }\n    return tracks;\n  }\n\n  constructor({ toggle }) {\n    const loaded = () => {\n      this.api = window.SC;\n      this.api.initialize({\n        client_id: 'eb5fcff9e107aab508431b4c3c416415',\n      });\n      // this.api.resolve('https://soundcloud.com/travis-stanley-3/sets/jazz-noir-dark-jazz').then(({ tracks }) => {\n      //   console.log(JSON.stringify(tracks.map(({ id }) => (id))));\n      // });\n      // eslint-disable-next-line\n      this.tracks = Music.shuffle([14281750,14449372,201545618,130450594,43516158,20969172,6582510,89379153,96594845,199889475,137188503,74658085,90256034,183847047,3916883]);\n      this.track = 0;\n      toggle.addEventListener('click', () => this.toggle(toggle), false);\n      if (this.wantsToPlay) {\n        delete this.wantsToPlay;\n        this.play();\n      }\n    };\n    const check = () => {\n      if (!window.SC) {\n        setTimeout(check, 10);\n        return;\n      }\n      loaded();\n    };\n    const script = document.createElement('script');\n    script.async = true;\n    script.defer = true;\n    script.src = 'https://connect.soundcloud.com/sdk/sdk-3.3.1.js';\n    document.body.appendChild(script);\n    check();\n  }\n\n  next() {\n    this.track = (this.track + 1) % this.tracks.length;\n    this.play();\n  }\n\n  play() {\n    const {\n      api,\n      player,\n      track,\n      tracks,\n    } = this;\n    if (!api) {\n      this.wantsToPlay = true;\n      return;\n    }\n    if (player) {\n      player.kill();\n      delete this.player;\n    }\n    const id = tracks[track];\n    if (!__PRODUCTION__) console.log(`playing: ${id}`);\n    api.stream(`/tracks/${id}`).then((player) => {\n      this.player = player;\n      player.on('audio_error', () => this.next());\n      player.on('finish', () => this.next());\n      player.setVolume(0.8);\n      player.play();\n    }).catch(() => {\n      this.next();\n    });\n  }\n\n  toggle(button) {\n    const { player } = this;\n    if (!player) return;\n    if (player.isPlaying()) {\n      player.pause();\n      button.className = 'muted';\n    } else {\n      button.className = '';\n      player.play();\n    }\n  }\n}\n\nexport default Music;\n","import { Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.keyboard = {\n      backwards: false,\n      forwards: false,\n      leftwards: false,\n      rightwards: false,\n    };\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('keydown', this.onKeydown.bind(this), false);\n    window.addEventListener('keyup', this.onKeyup.bind(this), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onKeydown({ keyCode, repeat, target }) {\n    const { keyboard } = this;\n    if (\n      repeat\n      || ~['INPUT', 'TEXTAREA'].indexOf(target.tagName)\n    ) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = true;\n        break;\n      case 83:\n        keyboard.backwards = true;\n        break;\n      case 65:\n        keyboard.leftwards = true;\n        break;\n      case 68:\n        keyboard.rightwards = true;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onKeyup({ keyCode, repeat }) {\n    const { keyboard } = this;\n    if (repeat) {\n      return;\n    }\n    switch (keyCode) {\n      case 87:\n        keyboard.forwards = false;\n        break;\n      case 83:\n        keyboard.backwards = false;\n        break;\n      case 65:\n        keyboard.leftwards = false;\n        break;\n      case 68:\n        keyboard.rightwards = false;\n        break;\n      default:\n        break;\n    }\n  }\n\n  onPointerDown(e) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    const { button, touches } = e;\n    if (touches) {\n      if (touches.length > 1) {\n        e.preventDefault();\n      }\n      if (!pointer.secondary) {\n        if (touches.length === 1) {\n          pointer.primary = true;\n          pointer.primaryDown = true;\n        } else {\n          pointer.secondary = true;\n          pointer.secondaryDown = true;\n          pointer.primary = false;\n        }\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove({ touches }, [x, y]) {\n    const { isEnabled, pointer, rect } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      const { top, left } = rect;\n      x = 0;\n      y = 0;\n      for (let i = 0; i < touches.length; i += 1) {\n        const { clientX, clientY } = touches[i];\n        x += (clientX - left);\n        y += (clientY - top);\n      }\n      x /= touches.length;\n      y /= touches.length;\n    }\n    const { width, height } = rect;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button, touches }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    if (touches) {\n      if (pointer.primary) {\n        pointer.primary = false;\n        pointer.primaryUp = true;\n      }\n      if (pointer.secondary) {\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n      }\n      return;\n    }\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { isEnabled, pointer } = this;\n    if (!isEnabled) return;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.rect = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Sprite,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\nclass Bubble extends Sprite {\n  constructor() {\n    super(new SpriteMaterial({\n      width: 512,\n      height: 64,\n      depthTest: false,\n    }));\n    this.scale.set(3, 0.375, 1);\n    this.visible = false;\n  }\n\n  display(lines, delay = 1500) {\n    const { renderer, ctx } = this.material;\n    const { width, height } = renderer;\n    ctx.clearRect(0, 0, width, height);\n    ctx.fillStyle = '#fff';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n    ctx.shadowBlur = 10;\n    ctx.font = \"24px 'Print Char 21',monospace\";\n    ctx.fillText(lines.shift(), width * 0.5, height * 0.5);\n    this.material.map.needsUpdate = true;\n    this.visible = true;\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      if (lines.length) {\n        this.display(lines, delay);\n        return;\n      }\n      this.visible = false;\n    }, delay);\n  }\n}\n\nexport default Bubble;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\nimport Bubble from '@/meshes/bubble';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const merged = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      merged.merge(limbs[limb]);\n    });\n    merged.faces.forEach((face) => {\n      merged.vertices[face.a].bone = face.materialIndex;\n      merged.vertices[face.b].bone = face.materialIndex;\n      merged.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    merged.vertices.forEach((vertex) => {\n      merged.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      merged.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    const geometry = (new BufferGeometry()).fromGeometry(merged);\n    geometry.computeVertexNormals();\n    geometry.computeBoundingSphere();\n    return geometry;\n  }\n\n  constructor({\n    bonesOrigin,\n    collisionGeometry,\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    Object.keys(bonesOrigin).forEach((bone) => {\n      this.skeleton.bones[Actor.Bones[bone]].position.copy(bonesOrigin[bone]);\n    });\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n    this.collisionMesh = new Mesh(\n      collisionGeometry,\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destinationMarker,\n      mixer,\n      movementAux,\n      onDestinationCallback: callback,\n      position,\n      rotationSpeed,\n      route,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation !== undefined) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        delete this.targetRotation;\n      }\n    }\n    if (!route) return;\n    const waypoint = route.path[route.current];\n    const distance = position.distanceTo(waypoint);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(waypoint)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance > step) {\n      return;\n    }\n    if (route.current < route.path.length - 1) {\n      route.current += 1;\n      this.faceTo(route.path[route.current]);\n      return;\n    }\n    this.setAnimation('idle');\n    delete this.route;\n    if (destinationMarker) {\n      destinationMarker.visible = false;\n    }\n    if (callback) {\n      delete this.onDestinationCallback;\n      callback();\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walk(path, callback) {\n    const { destinationMarker, position } = this;\n    const distance = position.distanceTo(path[path.length - 1]);\n    delete this.onDestinationCallback;\n    if (distance === 0) {\n      if (callback) callback();\n      return;\n    }\n    this.setAnimation('walk');\n    this.route = {\n      current: 0,\n      path,\n    };\n    if (destinationMarker) {\n      destinationMarker.position.copy(path[path.length - 1]);\n      destinationMarker.visible = true;\n    }\n    if (callback) {\n      this.onDestinationCallback = callback;\n    }\n    this.faceTo(path[0]);\n  }\n\n  faceTo(point) {\n    const { position, rotationAux } = this;\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n\n  say(lines, delay) {\n    if (!this.bubble) {\n      this.bubble = new Bubble();\n      this.bubble.position.set(0, this.geometry.boundingSphere.radius * 2.25, 0);\n      this.add(this.bubble);\n    }\n    const { bubble } = this;\n    bubble.display(lines, delay);\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: Dude.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.49, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 24);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.001, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x222222,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { material, scale, visible } = this;\n    if (!visible) return;\n    const inc = ((1 + Math.sin(time * 4)) * 0.125);\n    const s = 0.75 + inc;\n    scale.set(s, 1, s);\n    material.opacity = 0.25 + inc;\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/meshes/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    onAnimationTick() {\n      const { camera, grid } = scene;\n      const pointer = input.getPointerFrame();\n      camera.processPointer(pointer);\n      if (pointer.primaryUp) {\n        const raycaster = camera.getRaycaster(pointer.normalized);\n        const hit = raycaster.intersectObject(grid)[0];\n        if (!hit) return;\n        pack.walkTo(hit.point);\n      }\n    },\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walk([point.clone()]);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.camera.distance = 6;\n  scene.camera.pitch = Math.PI * 0.125;\n  scene.camera.updateOrbit();\n\n  scene.onAnimationTick = pack.onAnimationTick.bind(pack);\n};\n","import { Grid } from 'pathfinding';\nimport {\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneBufferGeometry,\n  VertexColors,\n  Object3D,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Floor extends Object3D {\n  constructor(grid) {\n    super();\n    const { width, height } = Floor.defaultGridSize;\n    this.grid = new Grid(width, height);\n    this.grid.setTile = function setTile({\n      color,\n      type,\n      x,\n      y,\n    }) {\n      const tile = this.nodes[y][x];\n      tile.color = color;\n      tile.type = type;\n    };\n    for (let y = 0; y < height; y += 1) {\n      for (let x = 0; x < width; x += 1) {\n        if (grid) {\n          // TODO !!!\n          console.error('Slow down! Grid loading is not yet implemented!!');\n        } else {\n          this.grid.setTile({\n            x,\n            y,\n            type: Floor.tiles.air,\n          });\n        }\n      }\n    }\n    const plane = new PlaneBufferGeometry(width, height, 2, 2);\n    plane.rotateX(Math.PI * -0.5);\n    plane.translate(width * 0.5, 0, height * 0.5);\n    this.intersect = new Mesh(\n      plane,\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.add(this.intersect);\n    this.tiles = new Mesh(\n      new BufferGeometry(),\n      new GridMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n    this.updateTiles();\n    this.add(this.tiles);\n    this.isActive = false;\n  }\n\n  setTile({ color, x, y }) {\n    const { grid } = this;\n    if (\n      x < 0\n      || x > grid.width - 1\n      || y < 0\n      || y > grid.height - 1\n    ) {\n      return;\n    }\n    color = new Color(color);\n    const avg = (color.r + color.g + color.b) / 3 * 0.1;\n    color.offsetHSL(\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg,\n      Math.random() * (avg * 2) - avg\n    );\n    grid.setTile({\n      x,\n      y,\n      color,\n      type: Floor.tiles.floor,\n    });\n    this.updateTiles();\n  }\n\n  get isActive() {\n    return this._isActive;\n  }\n\n  set isActive(active) {\n    const { intersect, tiles } = this;\n    intersect.visible = active;\n    tiles.visible = !!(tiles.geometry.getAttribute('position') && active);\n    this._isActive = active;\n  }\n\n  updateTiles() {\n    const { grid, tiles } = this;\n    const indices = [];\n    const vertices = [];\n    const colors = [];\n    const normals = [];\n    for (let y = 0; y < grid.height; y += 1) {\n      for (let x = 0; x < grid.width; x += 1) {\n        const tile = grid.getNodeAt(x, y);\n        if (tile.type !== Floor.tiles.air) {\n          const offset = vertices.length / 3;\n          vertices.push(\n            x, 0, y + 1,\n            x + 1, 0, y + 1,\n            x + 1, 0, y,\n            x, 0, y\n          );\n          const { r, g, b } = tile.color;\n          colors.push(\n            r, g, b,\n            r, g, b,\n            r, g, b,\n            r, g, b\n          );\n          normals.push(\n            0, 1, 0,\n            0, 1, 0,\n            0, 1, 0,\n            0, 1, 0\n          );\n          indices.push(\n            offset, offset + 1, offset + 2,\n            offset + 2, offset + 3, offset\n          );\n        }\n      }\n    }\n    if (!vertices.length) return;\n    const { geometry } = tiles;\n    let index = geometry.getIndex();\n    if (!index) {\n      geometry.setIndex(new BufferAttribute(new Uint16Array(), 1));\n      index = geometry.getIndex();\n    }\n    let position = geometry.getAttribute('position');\n    if (!position) {\n      geometry.addAttribute('position', new BufferAttribute(new Float32Array(), 3));\n      position = geometry.getAttribute('position');\n    }\n    let color = geometry.getAttribute('color');\n    if (!color) {\n      geometry.addAttribute('color', new BufferAttribute(new Float32Array(), 3));\n      color = geometry.getAttribute('color');\n    }\n    let normal = geometry.getAttribute('normal');\n    if (!normal) {\n      geometry.addAttribute('normal', new BufferAttribute(new Float32Array(), 3));\n      normal = geometry.getAttribute('normal');\n    }\n    index.setArray(new Uint16Array(indices));\n    index.needsUpdate = true;\n    position.setArray(new Float32Array(vertices));\n    position.needsUpdate = true;\n    color.setArray(new Float32Array(colors));\n    color.needsUpdate = true;\n    normal.setArray(new Float32Array(normals));\n    normal.needsUpdate = true;\n    if (this.isActive) {\n      tiles.visible = true;\n    }\n  }\n}\n\nFloor.tiles = {\n  air: 0,\n  floor: 1,\n};\n\nFloor.defaultGridSize = {\n  width: 48,\n  height: 48,\n};\n\nexport default Floor;\n","import {\n  Object3D,\n} from 'three';\nimport Floor from './floor';\n\nclass Building extends Object3D {\n  constructor(meta = {}) {\n    super();\n    this.floors = meta.floors ? (\n      meta.floors.map(grid => new Floor(grid))\n    ) : [new Floor()];\n    this.floors.forEach(floor => this.add(floor));\n    this.activeFloor = 0;\n  }\n\n  get activeFloor() {\n    return this._activeFloor;\n  }\n\n  set activeFloor(floor) {\n    const { floors } = this;\n    if (this._activeFloor !== undefined) {\n      floors[this._activeFloor].isActive = false;\n    }\n    floors[floor].isActive = true;\n    this._activeFloor = floor;\n  }\n}\n\nexport default Building;\n","import {\n  Mesh,\n  MeshBasicMaterial,\n  SphereBufferGeometry,\n} from 'three';\n\nclass Moon extends Mesh {\n  constructor() {\n    super(\n      new SphereBufferGeometry(100, 32, 32),\n      new MeshBasicMaterial({\n        color: 0xAAAAAA,\n        fog: false,\n      })\n    );\n  }\n}\n\nexport default Moon;\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport Moon from './moon';\n\nclass Starfield extends Points {\n  constructor() {\n    const count = 10000;\n    const radius = 1024;\n    const geometry = new BufferGeometry();\n    const position = new Float32Array(count * 3);\n    const size = new Float32Array(count);\n    const aux = new Vector3();\n    for (let i = 0; i < count; i += 1) {\n      aux.set(\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius,\n        Math.floor(Math.random() * (radius + 1)),\n        Math.floor(Math.random() * ((radius * 2) + 1)) - radius\n      ).normalize().multiplyScalar(radius);\n      const o = i * 3;\n      position[o] = aux.x;\n      position[o + 1] = aux.y;\n      position[o + 2] = aux.z;\n      size[i] = 10 + Math.floor(Math.random() * 100);\n    }\n    geometry.addAttribute('position', new BufferAttribute(position, 3));\n    geometry.addAttribute('size', new BufferAttribute(size, 1));\n    super(\n      geometry,\n      new PointsMaterial({\n        color: 0x999999,\n        fog: false,\n        sizeAttenuation: false,\n      })\n    );\n    this.moon = new Moon();\n    this.moon.position.set(radius, radius * 0.5, radius);\n    this.add(this.moon);\n  }\n}\n\nexport default Starfield;\n","import Building from '@/meshes/building';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn building\n  const building = new Building();\n  scene.root.add(building);\n\n  // Setup camera\n  scene.camera.distance = 8;\n  scene.camera.pitch = Math.PI * 0.2;\n  scene.camera.tilt = Math.PI * -0.5;\n  scene.camera.updateOrbit();\n  const { width, height } = building.floors[building.activeFloor].grid;\n  scene.camera.root.position.set(\n    width * 0.5 + 0.5,\n    0,\n    height * 0.5 + 0.5\n  );\n  // scene.camera.maxHeight = 2.9;\n\n  const lastTile = { x: -1, y: -1 };\n  scene.onAnimationTick = ({ delta }) => {\n    const { camera } = scene;\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    camera.processKeyboard({ ...input.keyboard, delta });\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    const floor = building.floors[building.activeFloor];\n    const hit = raycaster.intersectObject(floor.intersect)[0];\n    if (hit) {\n      const x = Math.floor(hit.point.x);\n      const y = Math.floor(hit.point.z);\n      if (pointer.primary && (x !== lastTile.x || y !== lastTile.y)) {\n        lastTile.x = x;\n        lastTile.y = y;\n        floor.setTile({ color: 0xFFFFFF, x, y });\n      }\n    }\n  };\n};\n","import {\n  CylinderGeometry,\n  CylinderBufferGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/core/actor';\n\nclass ThiccBoi extends Actor {\n  constructor(palette) {\n    super({\n      bonesOrigin: ThiccBoi.bones,\n      collisionGeometry: (\n        (new CylinderBufferGeometry(0.25, 0.25, 1.4))\n          .translate(0, 0.7, 0)\n      ),\n      geometry: ThiccBoi.geometry(palette),\n      material: ThiccBoi.material,\n    });\n  }\n}\n\nThiccBoi.bones = {\n  hip: new Vector3(0, 0.4, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.325, 0.45, 0),\n  rightArm: new Vector3(0.325, 0.45, 0),\n  leftLeg: new Vector3(-0.08, 0.1, 0),\n  rightLeg: new Vector3(0.08, 0.1, 0),\n};\n\nThiccBoi.geometry = (palette) => {\n  // const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  const torso = new SphereGeometry(0.26, 8, 8);\n  torso.translate(0, 0.25, 0);\n  torso.scale(1.5, 1, 1.5);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new CylinderGeometry(0.175, 0.15, 0.4, 6);\n  // const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  if (palette.hat) {\n    const hat = new CylinderGeometry(0.3, 0.3, 0.05);\n    const top = new CylinderGeometry(0.2, 0.2, 0.3);\n    top.translate(0, 0.15, 0);\n    hat.merge(top);\n    hat.translate(0, 0.3, 0);\n    hat.faces.forEach((face) => {\n      face.color.set(palette.hat);\n    });\n    head.merge(hat);\n  }\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.03, 0.075, 0.3, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.15, 0);\n  rightArm.translate(0, -0.15, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.1, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.boundingSphere.center.set(0, 0.7, 0);\n  geometry.boundingSphere.radius = 0.7;\n  return geometry;\n};\n\nThiccBoi.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default ThiccBoi;\n","import {\n  BoxGeometry,\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\n\nclass Cabin extends Mesh {\n  constructor({\n    color,\n    scale,\n  }) {\n    const geometry = new BoxGeometry(\n      0.998, 0.999, 0.998,\n      scale.x, scale.y, scale.z\n    );\n    const aux = new Color();\n    geometry.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    geometry.translate(0, 0.5, 0);\n    for (let i = 0; i < 12; i += 1) {\n      geometry.faces.splice(40, 1);\n    }\n    geometry.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Cabin;\n","import {\n  BoxBufferGeometry,\n  Math as ThreeMath,\n  Mesh,\n  MeshPhongMaterial,\n  Vector3,\n} from 'three';\n\nclass Button extends Mesh {\n  constructor({ onTap, position }) {\n    const geometry = new BoxBufferGeometry(0.2, 0.15, 0.08);\n    geometry.translate(0, 0, 0.039);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0x440000,\n      })\n    );\n    this.animation = 0;\n    this.animationVector = new Vector3(0, 0, -0.04);\n    this.onTap = onTap;\n    this.position.copy(position);\n    this.origin = position.clone();\n  }\n\n  tap() {\n    const { onTap, tapping } = this;\n    if (tapping) return false;\n    let ret;\n    if (onTap) {\n      ret = onTap();\n    }\n    this.animation = 0;\n    this.tapping = true;\n    return ret;\n  }\n\n  onAnimationTick({ delta }) {\n    const { animationVector, origin, tapping } = this;\n    if (!tapping) return;\n    this.animation = Math.min(this.animation + (delta * 0.75), 1);\n    if (this.animation === 1) {\n      delete this.tapping;\n    }\n    const step = ThreeMath.smoothstep(\n      (this.animation > 0.5 ? 1 - this.animation : this.animation) * 2,\n      0,\n      1\n    );\n    this.position\n      .copy(origin)\n      .addScaledVector(animationVector, step);\n  }\n}\n\nexport default Button;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Math as ThreeMath,\n  Mesh,\n  MeshBasicMaterial,\n  MeshPhongMaterial,\n  Object3D,\n  PlaneGeometry,\n  PlaneBufferGeometry,\n  VertexColors,\n  Vector3,\n} from 'three';\nimport Button from '@/meshes/button';\n\nclass Doors extends Object3D {\n  constructor({\n    color,\n    onCall,\n    scale,\n  }) {\n    super();\n    const plane = new PlaneGeometry(0.5, 1, scale.x * 0.5, scale.y);\n    const aux = new Color();\n    plane.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        aux.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.color.copy(aux);\n    });\n    plane.scale(scale.x, scale.y, scale.z);\n    const geometry = (new BufferGeometry()).fromGeometry(plane);\n    for (let i = 0; i < 2; i += 1) {\n      const door = new Mesh(\n        geometry,\n        new MeshPhongMaterial({\n          color,\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        })\n      );\n      door.position.set(\n        (-0.26 + (i * 0.52)) * scale.x,\n        0.5 * scale.y,\n        0.499 * scale.z\n      );\n      this.add(door);\n    }\n    this.animation = 0;\n    this.animationScale = scale.x;\n    this.state = Doors.states.CLOSED;\n    this.targetState = this.state;\n    this.callButton = new Button({\n      onTap: onCall,\n      position: new Vector3(0.6 * scale.x, (1 / 3) * scale.y, 0.5 * scale.z),\n    });\n    this.add(this.callButton);\n    this.collisionMesh = new Mesh(\n      new PlaneBufferGeometry(1, 1)\n        .scale(scale.x, scale.y, 1)\n        .translate(0, scale.y * 0.5, scale.z * 0.5),\n      new MeshBasicMaterial({\n        opacity: 0.1,\n        transparent: true,\n        visible: false,\n        wireframe: true,\n      })\n    );\n    this.add(this.collisionMesh);\n  }\n\n  open() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.OPEN;\n  }\n\n  close() {\n    this.state = Doors.states.MOVING;\n    this.targetState = Doors.states.CLOSED;\n  }\n\n  toggle() {\n    const { state } = this;\n    switch (state) {\n      case Doors.states.OPEN:\n        this.close();\n        break;\n      case Doors.states.CLOSED:\n        this.open();\n        break;\n      default:\n        break;\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      animationScale,\n      children,\n      state,\n      targetState,\n    } = this;\n    this.callButton.onAnimationTick(animation);\n    if (state !== Doors.states.MOVING) return;\n    const { delta } = animation;\n    const animationStep = delta * 0.75;\n    switch (targetState) {\n      case Doors.states.OPEN:\n        this.animation = Math.min(this.animation + animationStep, 1);\n        if (this.animation === 1) {\n          this.state = Doors.states.OPEN;\n        }\n        break;\n      case Doors.states.CLOSED:\n        this.animation = Math.max(this.animation - animationStep, 0);\n        if (this.animation === 0) {\n          this.state = Doors.states.CLOSED;\n        }\n        break;\n      default:\n        break;\n    }\n    const step = ThreeMath.smoothstep(this.animation, 0, 1) * 0.4;\n    for (let i = 0; i < 2; i += 1) {\n      children[i].position.x = (-0.26 + (i * 0.52) + (step * (i === 0 ? -1 : 1))) * animationScale;\n    }\n  }\n}\n\nDoors.states = {\n  OPEN: 0,\n  CLOSED: 1,\n  MOVING: 2,\n};\n\nexport default Doors;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n} from 'three';\n\nclass Shaft extends Mesh {\n  constructor({\n    color,\n    floors,\n    scale,\n  }) {\n    const merged = new Geometry();\n    for (let i = 0; i <= floors; i += 1) {\n      if (i === 0 || i === floors) {\n        const floor = new PlaneGeometry(1, 1);\n        floor.rotateX(Math.PI * -0.5);\n        floor.translate(0, i, 0);\n        merged.merge(floor);\n        if (i === floors) break;\n      }\n      const back = new PlaneGeometry(1, 1);\n      back.translate(0, i + 0.5, -0.5);\n      merged.merge(back);\n      const side = new PlaneGeometry(1, 1);\n      side.rotateY(Math.PI * -0.5);\n      side.translate(-0.5, i + 0.5, 0);\n      merged.merge(side);\n      side.translate(1, 0, 0);\n      merged.merge(side);\n    }\n    merged.scale(scale.x, scale.y, scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      new MeshPhongMaterial({\n        color,\n        side: DoubleSide,\n      })\n    );\n  }\n}\n\nexport default Shaft;\n","import {\n  Math as ThreeMath,\n  Object3D,\n  Vector3,\n} from 'three';\nimport Cabin from './cabin';\nimport Doors from './doors';\nimport Shaft from './shaft';\n\nclass Elevator extends Object3D {\n  constructor({\n    floors,\n    origin,\n  }) {\n    super();\n    this.floors = floors;\n    this.origin = origin;\n    this.animationStart = Math.random() * 512;\n\n    this.shaft = new Shaft({\n      color: Elevator.shaft,\n      floors,\n      scale: Elevator.scale,\n    });\n    this.add(this.shaft);\n\n    this.doors = [...Array(floors)].map((v, floor) => {\n      const doors = new Doors({\n        color: Elevator.doors,\n        onCall: () => this.onCall(floor),\n        scale: Elevator.scale,\n      });\n      doors.collisionMesh.elevator = this;\n      doors.position.y = floor * Elevator.scale.y;\n      this.add(doors);\n      return doors;\n    });\n\n    this.cabin = new Cabin({\n      color: Elevator.cabin,\n      scale: Elevator.scale,\n    });\n    this.add(this.cabin);\n    this.position.z = -1.5 * Elevator.scale.z;\n    this.floor = 0;\n    this.passengers = [];\n  }\n\n  addPassenger(passenger) {\n    const { passengers } = this;\n    passengers.push(passenger);\n  }\n\n  removePassenger(passenger) {\n    const { passengers } = this;\n    const index = passengers.findIndex(p => (p === passenger));\n    if (~index) {\n      passengers.splice(index, 1);\n    }\n  }\n\n  onAnimationTick(animation) {\n    const {\n      cabin,\n      doors,\n      passengers,\n      position,\n      route,\n    } = this;\n    if (route) {\n      route.step += (animation.delta * 0.5) / Math.abs(route.travel);\n      if (route.step >= 1) {\n        route.step = 1;\n        doors[route.to].open();\n        this.floor = route.to;\n        delete this.route;\n        if (route.callback) {\n          route.callback();\n        }\n      }\n      const step = ThreeMath.smoothstep(route.step, 0, 1) * route.travel;\n      cabin.position.y = (route.from + step) * Elevator.scale.y;\n      passengers.forEach((passenger) => {\n        passenger.position\n          .copy(cabin.position)\n          .add(position);\n      });\n    }\n    doors.forEach(door => door.onAnimationTick(animation));\n  }\n\n  onCall(floor, callback) {\n    const { route, doors } = this;\n    if (route) return;\n    if (floor === this.floor) {\n      doors[floor].toggle();\n      return;\n    }\n    doors[this.floor].close();\n    this.route = {\n      callback,\n      from: this.floor,\n      to: floor,\n      travel: floor - this.floor,\n      step: 0,\n    };\n  }\n}\n\nElevator.scale = new Vector3(2, 3, 2);\nElevator.cabin = 0x440000;\nElevator.doors = 0x333333;\nElevator.shaft = 0x333333;\n\nexport default Elevator;\n","import {\n  BufferGeometry,\n  Color,\n  DoubleSide,\n  Mesh,\n  MeshPhongMaterial,\n  PlaneGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\n\nclass Wall extends Mesh {\n  static getGeometry({\n    aoTop = true,\n    aoBottom = true,\n    width = 1,\n    height = 1,\n    material,\n    orientation,\n  }) {\n    const wall = new PlaneGeometry(\n      width,\n      height,\n      Math.ceil(width * Wall.scale.x),\n      Math.ceil(height * (orientation === 'horizontal' ? Wall.scale.x : Wall.scale.y))\n    );\n    const color = new Color();\n    wall.faces.forEach((face, i) => {\n      if (i % 2 === 0) {\n        color.setHSL(Math.random(), 0.05, 0.25 + (Math.random() * 0.125));\n      }\n      face.materialIndex = material;\n      const vertices = [\n        wall.vertices[face.a],\n        wall.vertices[face.b],\n        wall.vertices[face.c],\n      ];\n      face.vertexColors = [...Array(3)].map((v, j) => {\n        const c = color.clone();\n        if (\n          (aoTop && Math.abs(vertices[j].y - height * 0.5) < 0.0001)\n          || (aoBottom && Math.abs(vertices[j].y - height * -0.5) < 0.0001)\n        ) {\n          c.offsetHSL(0, 0, -0.1);\n        }\n        return c;\n      });\n    });\n    if (orientation === 'horizontal') {\n      wall.rotateX(Math.PI * -0.5);\n    }\n    return wall;\n  }\n\n  constructor({\n    aoTop = false,\n    aoBottom = false,\n  } = {}) {\n    const geometry = Wall.getGeometry({\n      aoTop,\n      aoBottom,\n      orientation: 'vertical',\n      material: 0,\n    });\n    geometry.translate(0, 0.5, -0.5);\n    geometry.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshPhongMaterial({\n        side: DoubleSide,\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nWall.scale = new Vector3(4, 3, 4);\n\nexport default Wall;\n","import {\n  BufferGeometry,\n  DoubleSide,\n  Geometry,\n  Mesh,\n  MeshPhongMaterial,\n  VertexColors,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\nimport Wall from './wall';\n\nclass Hallway extends Mesh {\n  constructor({\n    hasCeiling,\n    hasElevator,\n    isEdge,\n    isLobby,\n  }) {\n    const merged = new Geometry();\n    const floor = Wall.getGeometry({\n      aoBottom: !isLobby,\n      material: 0,\n      orientation: 'horizontal',\n    });\n    merged.merge(floor);\n    if (hasElevator) {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        width: 0.25,\n        material: 1,\n      });\n      wall.translate(-0.375, 0.5, -0.5);\n      merged.merge(wall);\n      wall.translate(0.75, 0, 0);\n      merged.merge(wall);\n    } else {\n      const wall = Wall.getGeometry({\n        aoTop: hasCeiling,\n        material: 1,\n      });\n      wall.translate(0, 0.5, -0.5);\n      merged.merge(wall);\n    }\n    if (!isLobby) {\n      const wall = Wall.getGeometry({\n        aoTop: false,\n        height: 1 / 3,\n        material: 1,\n      });\n      wall.rotateY(Math.PI);\n      wall.translate(0, 1 / 3 / 2, 0.5);\n      merged.merge(wall);\n      if (isEdge) {\n        const wall = Wall.getGeometry({\n          aoTop: false,\n          height: 1 / 3,\n          material: 1,\n        });\n        wall.rotateY(Math.PI * 0.5 * (isEdge === 'left' ? 1 : -1));\n        wall.translate(isEdge === 'left' ? -0.5 : 0.5, 1 / 3 / 2, 0);\n        merged.merge(wall);\n      }\n    }\n    merged.scale(Wall.scale.x, Wall.scale.y, Wall.scale.z);\n    super(\n      (new BufferGeometry()).fromGeometry(merged),\n      [\n        new GridMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n        new MeshPhongMaterial({\n          side: DoubleSide,\n          vertexColors: VertexColors,\n        }),\n      ]\n    );\n  }\n}\n\nexport default Hallway;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshLambertMaterial,\n  PlaneGeometry,\n  VertexColors,\n} from 'three';\n\nclass Road extends Mesh {\n  constructor() {\n    const geometry = new Geometry();\n    const track = new PlaneGeometry(512, 4);\n    track.rotateX(Math.PI * -0.5);\n    track.faces.forEach((face) => {\n      face.color.set(0x222233);\n      face.materialIndex = 0;\n    });\n    const markings = new PlaneGeometry(1, 0.2);\n    markings.rotateX(Math.PI * -0.5);\n    markings.faces.forEach((face) => {\n      face.color.set(0xBEBEBE);\n      face.materialIndex = 0;\n    });\n    for (let x = -128; x < 128; x += 5) {\n      geometry.merge(\n        markings.clone().translate(x, 0.001, 0)\n      );\n    }\n    geometry.merge(track);\n    geometry.translate(0, 0, 4);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshLambertMaterial({\n        vertexColors: VertexColors,\n      })\n    );\n  }\n}\n\nexport default Road;\n","import {\n  BufferGeometry,\n  Geometry,\n  Mesh,\n  MeshBasicMaterial,\n  PlaneGeometry,\n  Vector3,\n} from 'three';\n\nimport { AStarFinder, Grid } from 'pathfinding';\n\nclass Walkable extends Mesh {\n  constructor(grid) {\n    const geometry = new Geometry();\n    const floor = new PlaneGeometry(1024, 1024, 2, 2);\n    floor.rotateX(Math.PI * -0.5);\n    floor.translate(0, 0, 512);\n    const intersect = new PlaneGeometry(1024, 1024, 2, 2);\n    intersect.translate(0, 512, 0);\n    geometry.merge(floor);\n    geometry.merge(intersect);\n    super(\n      (new BufferGeometry()).fromGeometry(geometry),\n      new MeshBasicMaterial({\n        transparent: true,\n        visible: false,\n      })\n    );\n    this.finder = new AStarFinder({\n      allowDiagonal: true,\n      dontCrossCorners: true,\n    });\n    this.grid = new Grid(grid);\n  }\n\n  getPath(from, to) {\n    const { grid, finder } = this;\n    from = this.worldToGrid(from);\n    to = this.worldToGrid(to);\n    return finder.findPath(from.x, from.z, to.x, to.z, grid.clone()).map(([x, z]) => (\n      this.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n    ));\n  }\n\n  worldToGrid(point) {\n    const { grid, position } = this;\n    point.y = position.y;\n    this.worldToLocal(point);\n    point.x = Math.floor(Math.min(Math.max(point.x, 0), grid.width - 1));\n    point.z = Math.floor(Math.min(Math.max(point.z, 0), grid.height - 1));\n    return point;\n  }\n}\n\nexport default Walkable;\n","import {\n  Vector3,\n} from 'three';\n\nclass AI {\n  constructor(building) {\n    this.building = building;\n    this.actors = [];\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    const { actors } = this;\n    actors.push({\n      actor,\n      floor,\n      position,\n      lastThought: 0,\n      state: AI.states.IDLE,\n    });\n  }\n\n  onAnimationTick({ time }) {\n    const { actors, building } = this;\n    actors.forEach((actor) => {\n      const {\n        floor,\n        position,\n        lastThought,\n        state,\n      } = actor;\n      if (state === AI.states.IDLE) {\n        if (time - lastThought > 3) {\n          actor.lastThought = time;\n          if (Math.random() > 0.75) {\n            actor.state = AI.states.WALKING;\n          }\n        }\n        switch (actor.state) {\n          case AI.states.WALKING: {\n            const { walkable } = building.floors[floor];\n            const { finder, grid } = walkable;\n            let destination;\n            let path;\n            grid.setWalkableAt(position.x, position.z, true);\n            do {\n              destination = {\n                x: Math.floor(Math.random() * grid.width),\n                z: Math.floor(Math.random() * grid.height),\n              };\n              path = finder.findPath(\n                position.x, position.z,\n                destination.x, destination.z,\n                grid.clone()\n              )\n                .map(([x, z]) => (\n                  walkable.localToWorld(new Vector3(x + 0.5, 0, z + 0.5))\n                ));\n            } while (\n              path.length < 2\n            );\n            grid.setWalkableAt(destination.x, destination.z, false);\n            actor.actor.walk(path.slice(1), () => {\n              position.x = destination.x;\n              position.z = destination.z;\n              actor.lastThought = time;\n              actor.state = AI.states.IDLE;\n            });\n            break;\n          }\n          default:\n            break;\n        }\n      }\n    });\n  }\n}\n\nAI.states = {\n  IDLE: 0,\n  WALKING: 1,\n};\n\nexport default AI;\n","import { Object3D } from 'three';\nimport Elevator from './elevator';\nimport Hallway from './hallway';\nimport Road from './road';\nimport Wall from './wall';\nimport Walkable from './walkable';\nimport AI from './ai';\n\nclass Building extends Object3D {\n  constructor({\n    elevators,\n    floors,\n  }) {\n    super();\n    this.ai = new AI(this);\n    this.elevators = elevators.map(({\n      floors,\n      origin,\n    }) => {\n      const elevator = new Elevator({ floors, origin });\n      elevator.position.x = origin.x * 4;\n      elevator.position.y = origin.y * 3;\n      this.add(elevator);\n      return elevator;\n    });\n    const width = floors.reduce((width, layout) => Math.max(width, layout.split('').length * 4), 0);\n    this.heightmap = [...Array(6)].map(() => [...Array(width)].map(() => (0)));\n    this.floors = floors.map((layout, floor) => {\n      const buttons = [];\n      const elevators = [];\n      const meshes = [];\n      const rooms = layout.split('');\n      const grid = [...Array(4)].map(() => [...Array(rooms.length * 4)].map(() => (1)));\n      rooms.forEach((type, room) => {\n        let mesh;\n        switch (type) {\n          case ' ':\n            return;\n          case '_':\n            mesh = new Wall();\n            break;\n          case '.':\n          default: {\n            let isEdge = false;\n            if (room === 0 || ~[' ', '_'].indexOf(rooms[room - 1])) isEdge = 'left';\n            else if (room === rooms.length - 1 || ~[' ', '_'].indexOf(rooms[room + 1])) isEdge = 'right';\n            const hasCeiling = floor < floors.length - 1 && [' ', '_'].indexOf(floors[floor + 1].split('')[room]) === -1;\n            const elevatorIndex = (\n              this.elevators.findIndex(({\n                floors,\n                origin,\n              }) => (\n                origin.x === room\n                && origin.y <= floor\n                && origin.y + floors > floor\n              ))\n            );\n            const hasElevator = ~elevatorIndex;\n            if (hasElevator) {\n              const elevator = this.elevators[elevatorIndex];\n              const doors = elevator.doors[floor - elevator.origin.y];\n              buttons.push(doors.callButton);\n              elevators.push(doors.collisionMesh);\n              meshes.push(doors.collisionMesh);\n            }\n            mesh = new Hallway({\n              hasCeiling,\n              hasElevator,\n              isEdge,\n              isLobby: floor === 0,\n            });\n            for (let x = 0; x < 4; x += 1) {\n              for (let z = 0; z < 6; z += 1) {\n                if (z > 1) {\n                  this.heightmap[z][(room * 4) + x] = floor * 3;\n                } else if (hasElevator && x > 0 && x < 3) {\n                  this.heightmap[z][(room * 4) + x] = (floor + 1) * 3;\n                }\n              }\n              for (let y = 0; y < 4; y += 1) {\n                grid[y][(room * 4) + x] = 0;\n              }\n            }\n            break;\n          }\n        }\n        mesh.position.set(room * 4, floor * 3, 0);\n        this.add(mesh);\n        meshes.push(mesh);\n      });\n      const walkable = new Walkable(grid);\n      walkable.position.set(-2, floor * 3, -2);\n      this.add(walkable);\n      return {\n        buttons,\n        elevators,\n        meshes,\n        walkable,\n      };\n    });\n    this.road = new Road();\n    this.add(this.road);\n  }\n\n  addActor({\n    actor,\n    floor,\n    position,\n  }) {\n    this.addToGrid({ floor, mesh: actor, position });\n    this.ai.addActor({ actor, floor, position });\n  }\n\n  addToGrid({\n    floor,\n    mesh,\n    position,\n  }) {\n    const { floors: { [floor]: { walkable } } } = this;\n    walkable.grid.setWalkableAt(position.x, position.z, false);\n    mesh.position.set(position.x + 0.5, 0, position.z + 0.5).add(walkable.position);\n    this.add(mesh);\n  }\n\n  getHeight(x, z) {\n    const { heightmap } = this;\n    x = Math.floor(x + 2);\n    z = Math.floor(z + 4);\n    if (\n      x < 0\n      || x > heightmap[0].length - 1\n      || z < 0\n      || z > heightmap.length - 1\n    ) {\n      return 0;\n    }\n    return heightmap[z][x];\n  }\n\n  onAnimationTick(animation) {\n    const { ai, children } = this;\n    ai.onAnimationTick(animation);\n    children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n  }\n}\n\nexport default Building;\n","class Dialog {\n  constructor() {\n    this.wrapper = document.createElement('div');\n    this.wrapper.className = 'dialog';\n    this.content = document.createElement('div');\n    this.wrapper.appendChild(this.content);\n  }\n\n  mount() {\n    const { wrapper } = this;\n    document.body.appendChild(wrapper);\n  }\n\n  unmount() {\n    const { wrapper } = this;\n    document.body.removeChild(wrapper);\n  }\n\n  add(tag, className) {\n    const { content } = this;\n    const node = document.createElement(tag);\n    if (className) {\n      node.className = className;\n    }\n    content.appendChild(node);\n    return node;\n  }\n\n  empty() {\n    const { content } = this;\n    while (content.firstChild) {\n      content.removeChild(content.firstChild);\n    }\n  }\n}\n\nexport default Dialog;\n","import Dialog from './dialog';\n\nclass ElevatorUI extends Dialog {\n  show(\n    {\n      floor,\n      floors,\n      origin,\n    },\n    {\n      onFloor,\n      onExit,\n    }\n  ) {\n    this.empty();\n    for (let i = floors - 1; i >= 0; i -= 1) {\n      const button = this.add('button', floor === i ? 'active' : '');\n      if (floor !== i) {\n        button.addEventListener('click', (i => () => {\n          this.unmount();\n          onFloor(i);\n        })(i), false);\n      }\n      button.innerText = origin.y + i;\n    }\n    const button = this.add('button', 'exit');\n    button.addEventListener('click', () => {\n      this.unmount();\n      onExit();\n    }, false);\n    button.innerText = 'Exit elevator';\n    this.mount();\n  }\n}\n\nexport default ElevatorUI;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass RainMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'attribute vec3 offset;',\n      ].join('\\n')\n    ).replace(\n      '#include <begin_vertex>',\n      [\n        'vec3 transformed = vec3(position + offset);',\n      ].join('\\n')\n    );\n    super({\n      name: 'rain-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader: ShaderLib.basic.fragmentShader,\n      vertexShader,\n      fog: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default RainMaterial;\n","import {\n  BufferAttribute,\n  BoxGeometry,\n  BufferGeometry,\n  InstancedBufferGeometry,\n  InstancedBufferAttribute,\n  Mesh,\n  Object3D,\n  Points,\n  PointsMaterial,\n  Vector3,\n} from 'three';\nimport RainMaterial from '@/materials/rain';\n\nclass Rain extends Object3D {\n  constructor() {\n    super();\n    {\n      const position = new Float32Array(Rain.numDrops * 3);\n      const geometry = new BufferGeometry();\n      geometry.addAttribute('position', (new BufferAttribute(position, 3).setDynamic(true)));\n      const ripples = new Points(\n        geometry,\n        new PointsMaterial({\n          color: 0xAAAADD,\n          fog: true,\n          size: 0.01,\n          sizeAttenuation: true,\n          transparent: true,\n          opacity: 1 / 3,\n        })\n      );\n      ripples.frustumCulled = false;\n      ripples.offsets = position;\n      this.add(ripples);\n      this.ripples = ripples;\n    }\n    {\n      const drop = (new BufferGeometry()).fromGeometry(\n        (new BoxGeometry(0.01, 0.5, 0.01)).translate(0, 0.25, 0)\n      ).attributes.position.array;\n      const offsets = new Float32Array(Rain.numDrops * 3);\n      const geometry = new InstancedBufferGeometry();\n      geometry.addAttribute('position', new BufferAttribute(drop, 3));\n      geometry.addAttribute('offset', (new InstancedBufferAttribute(offsets, 3).setDynamic(true)));\n      const drops = new Mesh(\n        geometry,\n        new RainMaterial({\n          color: 0xAAAADD,\n        })\n      );\n      drops.frustumCulled = false;\n      drops.drop = new Vector3();\n      drops.offsets = offsets;\n      this.add(drops);\n      this.drops = drops;\n      for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n        this.resetDrop(i);\n        this.ripples.offsets[i] = 0;\n        this.ripples.offsets[i + 1] = -999;\n        this.ripples.offsets[i + 2] = 0;\n      }\n    }\n  }\n\n  onAnimationTick({ delta }) {\n    const { drops, position, ripples } = this;\n    const { offsets } = drops;\n    const step = delta * 16;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      offsets[i + 1] -= step;\n      let height = 0;\n      if (this.testHeight) {\n        height = this.testHeight(offsets[i] + position.x, offsets[i + 2] + position.z);\n      }\n      if (offsets[i + 1] <= height) {\n        offsets[i + 1] = height;\n        this.resetDrop(i);\n      }\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n\n  resetDrop(i) {\n    const { drops, position, ripples } = this;\n    const { drop, offsets } = drops;\n    drop.set(\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius,\n      0,\n      (Math.random() * (Rain.radius * 2 + 1)) - Rain.radius\n    );\n    let height = Math.random() * Rain.radius * 0.5;\n    if (this.testHeight) {\n      height = Math.max(height, this.testHeight(drop.x + position.x, drop.z + position.z));\n    }\n    ripples.offsets[i] = offsets[i];\n    ripples.offsets[i + 1] = offsets[i + 1] + 0.01;\n    ripples.offsets[i + 2] = offsets[i + 2];\n    offsets[i] = drop.x;\n    offsets[i + 1] = height;\n    offsets[i + 2] = drop.z;\n  }\n\n  setHeightTest(func) {\n    const { drops, ripples } = this;\n    this.testHeight = func;\n    for (let i = 0; i < Rain.numDrops * 3; i += 3) {\n      this.resetDrop(i);\n    }\n    drops.geometry.attributes.offset.needsUpdate = true;\n    ripples.geometry.attributes.position.needsUpdate = true;\n  }\n}\n\nRain.numDrops = 10000;\nRain.radius = 50;\n\nexport default Rain;\n","import Dude from '@/actors/dude';\nimport ThiccBoi from '@/actors/thiccboi';\nimport Building from '@/meshes/legacy_building';\nimport ElevatorUI from '@/ui/elevator';\nimport Marker from '@/meshes/marker';\nimport Rain from '@/meshes/rain';\nimport Starfield from '@/meshes/starfield';\n\nexport default ({ input, scene }) => {\n  // Scenery\n  const rain = new Rain();\n  scene.root.add(rain);\n  const starfield = new Starfield();\n  scene.root.add(starfield);\n\n  // Spawn player\n  const player = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  player.position.set(6, 0, 0);\n  player.destinationMarker = new Marker();\n  scene.root.add(player);\n  scene.root.add(player.destinationMarker);\n  scene.camera.target = player.position;\n\n  // Spawn test building\n  const building = new Building({\n    elevators: [\n      {\n        floors: 4,\n        origin: { x: 2, y: 0 },\n      },\n      {\n        floors: 4,\n        origin: { x: 4, y: 1 },\n      },\n    ],\n    floors: [\n      '  ...',\n      ' .._..',\n      '..._..',\n      '......',\n      ' ....',\n    ].reverse(),\n  });\n  scene.root.add(building);\n  scene.camera.maxHeight = 2.9;\n  scene.camera.testMeshes = building.floors.reduce((floors, { meshes }) => ([\n    ...floors,\n    ...meshes,\n  ]), []);\n  rain.position.x = building.heightmap[0].length * 0.5;\n  rain.setHeightTest(building.getHeight.bind(building));\n\n  // Spawn some dudes\n  const actors = [Dude, ThiccBoi, ThiccBoi];\n  const dudes = [...Array(building.floors.length * actors.length)].map(() => {\n    const Actor = actors[Math.floor(Math.random() * actors.length)];\n    const dude = new Actor({\n      arms: 0x222222,\n      eyes: 0x999999 * Math.random(),\n      hat: Math.random() > 0.5 ? (0x999999 * Math.random()) : false,\n      head: 0x999999 * Math.random(),\n      legs: 0x222222,\n      torso: 0x999999 * Math.random(),\n    });\n    const floor = Math.floor(Math.random() * building.floors.length);\n    const { walkable: { grid } } = building.floors[floor];\n    let spawn;\n    do {\n      spawn = {\n        x: Math.floor(Math.random() * grid.width),\n        z: Math.floor(Math.random() * (grid.height - 1)),\n      };\n    } while (!grid.isWalkableAt(spawn.x, spawn.z));\n    building.addActor({\n      floor,\n      actor: dude,\n      position: spawn,\n    });\n    dude.position.y += 0.001;\n    dude.collisionMesh.floor = floor;\n    return dude.collisionMesh;\n  }).reduce((floors, dude) => {\n    if (!floors[dude.floor]) {\n      floors[dude.floor] = [];\n    }\n    floors[dude.floor].push(dude);\n    return floors;\n  }, {});\n\n  const elevatorUI = new ElevatorUI();\n\n  // Animation loop\n  let floor = 0;\n  scene.onAnimationTick = () => {\n    const { camera } = scene;\n    const { buttons, elevators, walkable } = building.floors[floor];\n    const pointer = input.getPointerFrame();\n    camera.processPointer(pointer);\n    if (!pointer.primaryUp) {\n      return;\n    }\n    const raycaster = camera.getRaycaster(pointer.normalized);\n    {\n      // Dudes interaction\n      const hit = raycaster.intersectObjects(dudes[floor] || [])[0];\n      if (hit) {\n        const { object: { parent: dude } } = hit;\n        const lines = [\n          'Fuck You',\n          'Go away',\n          'Leave me alone',\n        ];\n        const onDestination = () => {\n          player.faceTo(dude.position);\n          setTimeout(() => (\n            dude.say([lines[Math.floor(Math.random() * lines.length)]])\n          ), 500);\n        };\n        const from = player.position.clone();\n        const to = dude.position.clone();\n        to.z += 1;\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Elevators interaction\n      const hit = raycaster.intersectObjects(elevators)[0];\n      if (hit) {\n        const { point, object: { elevator } } = hit;\n        const elevatorFloor = floor - elevator.origin.y;\n        if (\n          elevator.floor === elevatorFloor\n          && elevator.doors[elevatorFloor].state === 0\n        ) {\n          const onDestination = () => {\n            input.isEnabled = false;\n            const cabin = elevator.cabin.position\n              .clone()\n              .add(elevator.position);\n            player.walk([cabin], () => {\n              elevator.doors[elevatorFloor].close();\n              elevatorUI.show(elevator, {\n                onFloor(target) {\n                  elevator.addPassenger(player);\n                  elevator.onCall(target, () => {\n                    cabin\n                      .copy(elevator.cabin.position)\n                      .add(elevator.position);\n                    cabin.z += 1;\n                    elevator.removePassenger(player);\n                    player.walk([cabin], () => {\n                      floor = elevator.origin.y + target;\n                      input.isEnabled = true;\n                    });\n                  });\n                },\n                onExit() {\n                  elevator.doors[elevatorFloor].open();\n                  cabin.z += 1;\n                  player.walk([cabin], () => {\n                    input.isEnabled = true;\n                  });\n                },\n              });\n            });\n          };\n          const from = player.position.clone();\n          const to = point.clone();\n          const path = walkable.getPath(from, to);\n          if (path.length) {\n            walkable.grid.setWalkableAt(from.x, from.z, true);\n            if (path.length > 1) {\n              player.walk(path.slice(1), onDestination);\n            } else {\n              onDestination();\n            }\n          }\n          return;\n        }\n      }\n    }\n    {\n      // Button tapping\n      const hit = raycaster.intersectObjects(buttons)[0];\n      if (hit) {\n        const { point, object: button } = hit;\n        const onDestination = () => {\n          player.faceTo(point);\n          button.tap();\n        };\n        const from = player.position.clone();\n        const to = point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n            onDestination();\n          });\n        } else if (path.length) {\n          onDestination();\n        }\n        return;\n      }\n    }\n    {\n      // Walk\n      const hit = raycaster.intersectObject(walkable)[0];\n      if (hit) {\n        const from = player.position.clone();\n        const to = hit.point.clone();\n        const path = walkable.getPath(from, to);\n        if (path.length > 1) {\n          walkable.grid.setWalkableAt(from.x, from.z, true);\n          player.walk(path.slice(1), () => {\n            walkable.grid.setWalkableAt(to.x, to.z, false);\n          });\n        }\n      }\n    }\n  };\n};\n","export { default as debug } from './debug';\nexport { default as editor } from './editor';\nexport { default as game } from './game';\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Raycaster,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.1, 2048);\n    this.distance = 5;\n    this.maxHeight = Infinity;\n    this.offset = new Vector3(0, 1.2, 0);\n    this.tilt = Math.PI * -0.45;\n    this.pitch = Math.PI * 0.1;\n    this.speed = 1.25;\n    this.step = new Vector3();\n    this.raycaster = new Raycaster();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.forward = new Vector3();\n    this.right = new Vector3();\n    this.worldUp = new Vector3(0, 1, 0);\n    this.updateOrbit();\n  }\n\n  getRaycaster(pointer) {\n    const { raycaster } = this;\n    raycaster.setFromCamera(pointer, this);\n    raycaster.far = Infinity;\n    return raycaster;\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  processPointer({\n    movement,\n    secondary,\n    wheel,\n  }) {\n    let hasUpdated = false;\n    if (secondary) {\n      const sensitivity = 0.003;\n      this.tilt -= movement.x * sensitivity;\n      this.pitch += movement.y * sensitivity;\n      this.pitch = Math.min(Math.max(this.pitch, Math.PI * -0.45), Math.PI * 0.45);\n      hasUpdated = true;\n    }\n    if (wheel) {\n      const sensitivity = 0.006;\n      this.distance = Math.min(Math.max(this.distance + (wheel * sensitivity), 1), 16);\n      hasUpdated = true;\n    }\n    if (hasUpdated) this.updateOrbit();\n    return hasUpdated;\n  }\n\n  processKeyboard({\n    backwards,\n    delta,\n    forwards,\n    leftwards,\n    rightwards,\n  }) {\n    const {\n      forward,\n      right,\n      tilt,\n      pitch,\n      root: { position },\n      worldUp,\n    } = this;\n    const step = delta * 4;\n    forward.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      0,\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize().negate();\n    right.crossVectors(forward, worldUp);\n    if (forwards) {\n      position.addScaledVector(forward, step);\n    }\n    if (backwards) {\n      position.addScaledVector(forward, -step);\n    }\n    if (leftwards) {\n      position.addScaledVector(right, -step);\n    }\n    if (rightwards) {\n      position.addScaledVector(right, step);\n    }\n  }\n\n  updateOrbit() {\n    const {\n      maxHeight,\n      offset,\n      pitch,\n      position,\n      raycaster,\n      root,\n      testMeshes,\n      tilt,\n    } = this;\n    let { distance } = this;\n    position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    ).normalize();\n    raycaster.ray.origin\n      .copy(root.position)\n      .add(offset);\n    if (testMeshes) {\n      raycaster.ray.direction\n        .copy(position);\n      raycaster.far = distance;\n      const hit = raycaster.intersectObjects(testMeshes)[0];\n      if (hit) {\n        distance = hit.distance - 0.25;\n      }\n    }\n    position\n      .multiplyScalar(distance)\n      .add(offset);\n    position.y = Math.min(Math.max(position.y, 0.1), maxHeight);\n    this.lookAt(raycaster.ray.origin);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  CircleBufferGeometry,\n} from 'three';\nimport GridMaterial from '@/materials/grid';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new CircleBufferGeometry(128, 8);\n    geometry.translate(0, 0, -0.001);\n    geometry.rotateX(Math.PI * -0.5);\n    super(\n      geometry,\n      new GridMaterial({\n        size,\n        subdivisions,\n      })\n    );\n    this.material.color.set(background);\n  }\n}\n\nexport default Grid;\n","import {\n  ClampToEdgeWrapping,\n  NearestFilter,\n  LinearFilter,\n  Sprite,\n  Scene,\n  OrthographicCamera,\n} from 'three';\nimport SpriteMaterial from '@/materials/sprite';\n\n\nclass Vignette extends Scene {\n  constructor() {\n    super();\n    this.camera = new OrthographicCamera(-0.5, 0.5, 0.5, -0.5, 0, 1);\n    this.sprite = new SpriteMaterial({\n      width: 0,\n      height: 0,\n    });\n    this.sprite.map.wrapS = ClampToEdgeWrapping;\n    this.sprite.map.wrapT = ClampToEdgeWrapping;\n    this.sprite.map.magFilter = NearestFilter;\n    this.sprite.map.minFilter = LinearFilter;\n    this.add(new Sprite(this.sprite));\n  }\n\n  onResize({ width, height }) {\n    const { sprite } = this;\n    const { renderer, ctx } = sprite;\n    const size = Math.max(width, height);\n    renderer.width = size;\n    renderer.height = size;\n    const grd = ctx.createRadialGradient(\n      size * 0.5, size * 0.5, size * 0.6,\n      size * 0.5, size * 0.5, size\n    );\n    grd.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    grd.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.rect(0, 0, size, size);\n    ctx.fill();\n    sprite.map.needsUpdate = true;\n  }\n\n  render(renderer) {\n    renderer.clearDepth();\n    renderer.render(this, this.camera);\n  }\n}\n\nexport default Vignette;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from '@/meshes/grid';\nimport Vignette from './vignette';\n\nclass Scene {\n  constructor({\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.autoClear = false;\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    const sky = new Color(0x334455);\n    this.renderer.setClearColor(sky);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(sky, 0.03);\n    this.root.add(new AmbientLight(0x333333));\n    const light = new DirectionalLight(0xffffff, 0.6);\n    light.position.set(1, 0.5, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.4);\n    secondaryLight.position.set(-1, -0.5, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: new Color(0x333344) });\n    this.root.add(this.grid);\n    this.vignette = new Vignette();\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.top = 'auto';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.bottom = '0';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n      vignette,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(camera.root.position.x, 0, camera.root.position.z);\n    renderer.clear();\n    renderer.render(root, camera);\n    vignette.render(renderer);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n      vignette,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    vignette.onResize({ width, height });\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass GridMaterial extends ShaderMaterial {\n  constructor({\n    color = 0xFFFFFF,\n    size = 1,\n    subdivisions = 10,\n    ...rest\n  } = {}) {\n    const vertexShader = ShaderLib.lambert.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.lambert.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    super({\n      name: `grid-material-${size}-${subdivisions}`,\n      uniforms: UniformsUtils.clone(ShaderLib.lambert.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n      lights: true,\n      ...rest,\n    });\n    this.color = this.uniforms.diffuse.value;\n    this.color.set(color);\n  }\n}\n\nexport default GridMaterial;\n","import Input from '@/core/input';\nimport Music from '@/core/music';\nimport Scene from '@/core/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst splash = document.getElementById('splash');\nconst input = new Input({ mount });\nconst music = new Music({ toggle: document.getElementById('sound') });\nconst scene = new Scene({ mount });\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/game';\n  route = 'game';\n}\nsetImmediate(() => window.addEventListener('hashchange', () => window.location.reload(), false));\n\nfunction onLoad() {\n  document.body.className = 'loaded';\n  Scenes[route]({ input, scene });\n  input.touches.once('end', () => {\n    splash.style.display = 'none';\n    input.isEnabled = true;\n    if (__PRODUCTION__) music.play();\n  });\n}\n\nfunction waitForFonts(fonts) {\n  let loaded = 0;\n  fonts.forEach(({ font, test }) => {\n    const fontTester = document.createElement('div');\n    fontTester.innerText = test;\n    fontTester.style.position = 'absolute';\n    fontTester.style.fontFamily = 'sans-serif';\n    fontTester.style.top = '-999999px';\n    document.body.appendChild(fontTester);\n    const { width: initialWidth } = fontTester.getBoundingClientRect();\n    fontTester.style.fontFamily = font;\n    const check = () => {\n      const { width } = fontTester.getBoundingClientRect();\n      if (width > initialWidth) {\n        document.body.removeChild(fontTester);\n        loaded += 1;\n        if (loaded === fonts.length) {\n          onLoad();\n        }\n      } else {\n        setTimeout(check, 10);\n      }\n    };\n    check();\n  });\n}\n\nwaitForFonts([\n  { font: \"'Print Char 21'\", test: 'QW@HhsXJ' },\n]);\n\nif (window.process && window.process.type) {\n  // We're running inside electron.\n  // Allow the user to exit with the ESC key.\n  window.addEventListener('keydown', ({ keyCode, repeat }) => {\n    if (keyCode === 27 && !repeat) {\n      if (splash.style.display !== 'none') {\n        window.close();\n      } else {\n        splash.style.display = '';\n        input.isEnabled = false;\n        input.touches.once('end', () => {\n          splash.style.display = 'none';\n          input.isEnabled = true;\n        });\n      }\n    }\n  }, false);\n}\n","import {\n  CanvasTexture,\n  SpriteMaterial as ThreeSprite,\n} from 'three';\n\nclass SpriteMaterial extends ThreeSprite {\n  constructor({ width, height, ...rest }) {\n    const renderer = document.createElement('canvas');\n    renderer.width = width;\n    renderer.height = height;\n    const texture = new CanvasTexture(renderer);\n    super({\n      map: texture,\n      ...rest,\n    });\n    this.renderer = renderer;\n    this.ctx = renderer.getContext('2d');\n  }\n}\n\nexport default SpriteMaterial;\n"],"sourceRoot":""}