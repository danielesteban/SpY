{"version":3,"sources":["webpack:///./src/engine/input.js","webpack:///./src/engine/camera.js","webpack:///./src/engine/grid.js","webpack:///./src/engine/scene.js","webpack:///./src/engine/actor.js","webpack:///./src/actors/dude.js","webpack:///./src/items/marker.js","webpack:///./src/scenes/debug.js","webpack:///./src/scenes/test.js","webpack:///./src/index.js"],"names":["Input","_ref","_ref$mount","mount","document","body","_classCallCheck","this","pointer","current","Vector2","movement","x","y","normalized","last","raycaster","Raycaster","wheel","touches","Touches","window","filtered","preventSimulated","target","on","onPointerDown","bind","onPointerMove","onPointerUp","addWheelListener","onPointerWheel","addEventListener","e","preventDefault","onResize","frame","_objectSpread","primaryDown","primaryUp","secondaryDown","secondaryUp","button","_ref2","primary","secondary","_ref4","_slicedToArray","_ref3","_this$size","size","width","height","copy","_ref5","deltaY","_ref6","getBoundingClientRect","Camera","_this","camera_classCallCheck","_getPrototypeOf","call","distance","offset","Vector3","tilt","Math","PI","pitch","speed","step","root","Object3D","add","_assertThisInitialized","updateOrbit","PerspectiveCamera","delta","position","distanceTo","sub","normalize","multiplyScalar","set","cos","sin","lookAt","Grid","arguments","length","undefined","_ref$background","background","Color","_ref$size","_ref$subdivisions","subdivisions","grid_classCallCheck","geometry","PlaneBufferGeometry","translate","rotateX","vertexShader","ShaderLib","basic","replace","join","primaryGrid","secondaryGrid","fragmentShader","concat","material","ShaderMaterial","name","uniforms","UniformsUtils","clone","extensions","derivatives","fog","color","diffuse","value","grid_possibleConstructorReturn","grid_getPrototypeOf","Mesh","Scene","scene_classCallCheck","camera","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setAnimationLoop","onAnimate","setPixelRatio","devicePixelRatio","setClearColor","appendChild","domElement","Root","FogExp2","AmbientLight","light","DirectionalLight","secondaryLight","grid","ShaderChunk","fog_pars_vertex","fog_vertex","fog_pars_fragment","fog_fragment","stats","begin","animation","min","getDelta","time","oldTime","onAnimationTick","children","forEach","child","floor","z","render","end","_mount$getBoundingCli","setSize","aspect","updateProjectionMatrix","fixThreeJSFog","QuaternionKeyframeTrack","DefaultInterpolation","InterpolateSmooth","VectorKeyframeTrack","Actor","actor_classCallCheck","actor_getPrototypeOf","hip","Bone","torso","head","leftArm","rightArm","leftLeg","rightLeg","Skeleton","mixer","AnimationMixer","actor_assertThisInitialized","actions","Object","keys","animations","reduce","action","actor_objectSpread","actor_defineProperty","clipAction","idle","timeScale","play","rotationAux","movementAux","SkinnedMesh","limbs","Geometry","limb","faces","face","materialIndex","Bones","merge","vertices","a","bone","b","c","vertex","skinIndices","push","Vector4","skinWeights","BufferGeometry","fromGeometry","walkingSpeed","walk","destination","destinationMarker","rotationSpeed","targetRotation","update","rotationStep","rotationDelta","rotation","max","abs","setAnimation","visible","fadeOut","reset","fadeIn","point","angle","eulerToQuat","Quaternion","setFromEuler","Euler","toArray","AnimationClip","Float32Array","_toConsumableArray","Dude","palette","dude_classCallCheck","bones","dude_assertThisInitialized","dude_getPrototypeOf","skeleton","CylinderGeometry","SphereGeometry","leftEye","eyes","rightEye","arms","legs","geometryFromLimbs","computeVertexNormals","MeshPhongMaterial","skinning","vertexColors","VertexColors","Marker","marker_classCallCheck","CircleBufferGeometry","marker_possibleConstructorReturn","marker_getPrototypeOf","opacity","transparent","scale","s","debug","input","scene","pack","dudes","debug_toConsumableArray","Array","map","v","i","dude","random","walkTo","mainDudeX","mainDudeZ","mainDude","debug_slicedToArray","getPointerFrame","setFromCamera","hit","intersectObject","test","getElementById","once","style","display","route","location","hash","split","slice","Scenes"],"mappings":"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","file":"code/main.92bbadd26a065c7af12f.js","sourcesContent":["import { Raycaster, Vector2 } from 'three';\nimport Touches from 'touches';\nimport { addWheelListener } from 'wheel';\n\nclass Input {\n  constructor({\n    mount = document.body,\n  }) {\n    this.mount = mount;\n    this.pointer = {\n      current: new Vector2(0, 0),\n      movement: { x: 0, y: 0 },\n      normalized: new Vector2(0, 0),\n      last: new Vector2(0, 0),\n      raycaster: new Raycaster(),\n      wheel: 0,\n    };\n    this.touches = Touches(window, {\n      filtered: true,\n      preventSimulated: false,\n      target: mount,\n    })\n      .on('start', this.onPointerDown.bind(this))\n      .on('move', this.onPointerMove.bind(this))\n      .on('end', this.onPointerUp.bind(this));\n    addWheelListener(window, this.onPointerWheel.bind(this));\n    window.addEventListener('contextmenu', e => e.preventDefault(), false);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n  }\n\n  getPointerFrame() {\n    const { pointer } = this;\n    const frame = { ...pointer };\n    pointer.primaryDown = false;\n    pointer.primaryUp = false;\n    pointer.secondaryDown = false;\n    pointer.secondaryUp = false;\n    pointer.movement = { x: 0, y: 0 };\n    pointer.wheel = 0;\n    return frame;\n  }\n\n  onPointerDown({ button }) {\n    const { pointer } = this;\n    switch (button) {\n      case 0:\n        pointer.primary = true;\n        pointer.primaryDown = true;\n        break;\n      case 2:\n        pointer.secondary = true;\n        pointer.secondaryDown = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerMove(e, [x, y]) {\n    const { pointer, size: { width, height } } = this;\n    pointer.current.x = x;\n    pointer.current.y = y;\n    pointer.normalized.x = ((x / width) * 2) - 1;\n    pointer.normalized.y = 1 - ((y / height) * 2);\n    pointer.movement = {\n      x: pointer.current.x - pointer.last.x,\n      y: pointer.current.y - pointer.last.y,\n    };\n    pointer.last.copy(pointer.current);\n  }\n\n  onPointerUp({ button }) {\n    const { pointer } = this;\n    switch (button) {\n      case 0:\n        pointer.primary = false;\n        pointer.primaryUp = true;\n        break;\n      case 2:\n        pointer.secondary = false;\n        pointer.secondaryUp = true;\n        break;\n      default:\n    }\n  }\n\n  onPointerWheel({ deltaY }) {\n    const { pointer } = this;\n    pointer.wheel = deltaY;\n  }\n\n  onResize() {\n    const { mount } = this;\n    this.size = mount.getBoundingClientRect();\n  }\n}\n\n\nexport default Input;\n","import {\n  Object3D,\n  PerspectiveCamera,\n  Vector3,\n} from 'three';\n\nclass Camera extends PerspectiveCamera {\n  constructor() {\n    super(60, 1, 0.01, 2048);\n    this.distance = 6;\n    this.offset = new Vector3(0, 1.5, 0);\n    this.tilt = Math.PI * -0.5;\n    this.pitch = Math.PI * 0.125;\n    this.speed = 1.5;\n    this.step = new Vector3();\n    this.root = new Object3D();\n    this.root.add(this);\n    this.updateOrbit();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      root: { position },\n      speed,\n      step,\n      target,\n    } = this;\n    if (!target || position.distanceTo(target) <= 0.1) return;\n    step\n      .copy(target)\n      .sub(position)\n      .normalize()\n      .multiplyScalar(delta * speed);\n    position.add(step);\n  }\n\n  updateOrbit() {\n    const {\n      distance,\n      offset,\n      pitch,\n      root,\n      tilt,\n    } = this;\n    this.position.set(\n      Math.cos(tilt) * Math.cos(pitch),\n      Math.sin(pitch),\n      Math.sin(-tilt) * Math.cos(pitch)\n    )\n      .normalize()\n      .multiplyScalar(distance)\n      .add(offset);\n    this.lookAt(root.position);\n  }\n}\n\nexport default Camera;\n","import {\n  Color,\n  Mesh,\n  PlaneBufferGeometry,\n  ShaderLib,\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass Grid extends Mesh {\n  constructor({\n    background = new Color(0xFFFFFF),\n    size = 1,\n    subdivisions = 10,\n  } = {}) {\n    const geometry = new PlaneBufferGeometry(2048, 2048, 2, 2);\n    geometry.translate(0, 0, -0.001);\n    geometry.rotateX(Math.PI * -0.5);\n    const vertexShader = ShaderLib.basic.vertexShader.replace(\n      '#include <clipping_planes_pars_vertex>',\n      [\n        '#include <clipping_planes_pars_vertex>',\n        'varying vec3 vPosition;',\n      ].join('\\n')\n    ).replace(\n      '#include <fog_vertex>',\n      [\n        '#include <fog_vertex>',\n        'vPosition = (modelMatrix * vec4( transformed, 1.0 )).xyz;',\n      ].join('\\n')\n    );\n    const primaryGrid = 1 / size;\n    const secondaryGrid = primaryGrid * subdivisions;\n    const fragmentShader = ShaderLib.basic.fragmentShader.replace(\n      '#include <clipping_planes_pars_fragment>',\n      [\n        '#include <clipping_planes_pars_fragment>',\n        'varying vec3 vPosition;',\n        'float getGrid(float scale) {',\n        ' vec2 coord = vPosition.xz * scale;',\n        ' vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);',\n        ' return 1.0 - min(min(grid.x, grid.y), 1.0);',\n        '}',\n      ].join('\\n')\n    ).replace(\n      'vec4 diffuseColor = vec4( diffuse, opacity );',\n      [\n        `float primaryGrid = getGrid(${primaryGrid}${primaryGrid % 1 === 0 ? '.0' : ''});`,\n        `float secondaryGrid = getGrid(${secondaryGrid}${secondaryGrid % 1 === 0 ? '.0' : ''});`,\n        'vec3 grid = mix(mix(diffuse, diffuse * 0.95, secondaryGrid), diffuse * 1.15, primaryGrid);',\n        'vec4 diffuseColor = vec4(grid, opacity);',\n      ].join('\\n')\n    );\n    const material = new ShaderMaterial({\n      name: 'grid-material',\n      uniforms: UniformsUtils.clone(ShaderLib.basic.uniforms),\n      fragmentShader,\n      vertexShader,\n      extensions: { derivatives: true },\n      fog: true,\n    });\n    material.color = material.uniforms.diffuse.value;\n    material.color.set(background);\n    super(\n      geometry,\n      material\n    );\n  }\n}\n\nexport default Grid;\n","import Stats from 'stats.js';\nimport {\n  AmbientLight,\n  Clock,\n  Color,\n  DirectionalLight,\n  FogExp2,\n  InterpolateSmooth,\n  QuaternionKeyframeTrack,\n  Scene as Root,\n  ShaderChunk,\n  VectorKeyframeTrack,\n  WebGLRenderer,\n} from 'three';\nimport Camera from './camera';\nimport Grid from './grid';\n\nclass Scene {\n  constructor({\n    background = new Color(0x223322),\n    mount = document.body,\n  } = {}) {\n    this.camera = new Camera();\n    this.clock = new Clock();\n    this.mount = mount;\n    this.renderer = new WebGLRenderer({\n      alpha: false,\n      antialias: true,\n    });\n    this.renderer.setAnimationLoop(this.onAnimate.bind(this));\n    this.renderer.setPixelRatio(window.devicePixelRatio || 1);\n    this.renderer.setClearColor(background);\n    mount.appendChild(this.renderer.domElement);\n    this.root = new Root();\n    this.root.fog = new FogExp2(background, 0.03);\n    this.root.add(new AmbientLight(0x454545));\n    const light = new DirectionalLight(0xffffff, 0.8);\n    light.position.set(1, 1, 1);\n    this.root.add(light);\n    const secondaryLight = new DirectionalLight(0xffffff, 0.2);\n    secondaryLight.position.set(-1, -1, 1);\n    this.root.add(secondaryLight);\n    this.root.add(this.camera.root);\n    this.grid = new Grid({ background: background.clone().multiplyScalar(0.75) });\n    this.root.add(this.grid);\n    window.addEventListener('resize', this.onResize.bind(this), false);\n    this.onResize();\n    if (!__PRODUCTION__) {\n      this.stats = new Stats();\n      this.stats.dom.style.position = 'absolute';\n      this.stats.dom.style.left = 'auto';\n      this.stats.dom.style.right = '0';\n      mount.style.position = 'relative';\n      mount.appendChild(this.stats.dom);\n    }\n  }\n\n  onAnimate() {\n    const {\n      clock,\n      camera,\n      grid,\n      renderer,\n      root,\n      stats,\n    } = this;\n    if (stats) stats.begin();\n    const animation = { delta: Math.min(clock.getDelta(), 1), time: clock.oldTime / 1000 };\n    if (this.onAnimationTick) {\n      this.onAnimationTick(animation);\n    }\n    root.children.forEach((child) => {\n      if (child.onAnimationTick) {\n        child.onAnimationTick(animation);\n      }\n    });\n    if (camera.onAnimationTick) {\n      camera.onAnimationTick(animation);\n    }\n    grid.position.set(Math.floor(camera.position.x), 0, Math.floor(camera.position.z));\n    renderer.render(root, camera);\n    if (stats) stats.end();\n  }\n\n  onResize() {\n    const {\n      camera,\n      mount,\n      renderer,\n    } = this;\n    const { width, height } = mount.getBoundingClientRect();\n    renderer.setSize(width, height);\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n  }\n\n  static fixThreeJSFog() {\n    ShaderChunk.fog_pars_vertex = ShaderChunk.fog_pars_vertex.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_vertex = ShaderChunk.fog_vertex.replace(\n      'fogDepth = -mvPosition.z;',\n      'fogDepth = mvPosition;'\n    );\n    ShaderChunk.fog_pars_fragment = ShaderChunk.fog_pars_fragment.replace(\n      'varying float fogDepth;',\n      'varying vec4 fogDepth;'\n    );\n    ShaderChunk.fog_fragment = ShaderChunk.fog_fragment.replace(\n      'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );',\n      [\n        'float fogDist = length(fogDepth);',\n        'float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDist * fogDist * LOG2 ) );',\n      ].join('\\n')\n    ).replace(\n      'float fogFactor = smoothstep( fogNear, fogFar, fogDepth );',\n      'float fogFactor = smoothstep( fogNear, fogFar, length(fogDepth) );'\n    );\n  }\n}\n\nScene.fixThreeJSFog();\nQuaternionKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\nVectorKeyframeTrack.DefaultInterpolation = InterpolateSmooth;\n\nexport default Scene;\n","import {\n  AnimationClip,\n  AnimationMixer,\n  Bone,\n  BufferGeometry,\n  Euler,\n  Geometry,\n  QuaternionKeyframeTrack,\n  Quaternion,\n  SkinnedMesh,\n  Skeleton,\n  Vector2,\n  Vector3,\n  Vector4,\n} from 'three';\n\nclass Actor extends SkinnedMesh {\n  static geometryFromLimbs(limbs) {\n    const geometry = new Geometry();\n    Object.keys(limbs).forEach((limb) => {\n      limbs[limb].faces.forEach((face) => {\n        face.materialIndex = Actor.Bones[limb];\n      });\n      geometry.merge(limbs[limb]);\n    });\n    geometry.faces.forEach((face) => {\n      geometry.vertices[face.a].bone = face.materialIndex;\n      geometry.vertices[face.b].bone = face.materialIndex;\n      geometry.vertices[face.c].bone = face.materialIndex;\n      face.materialIndex = 0;\n    });\n    geometry.vertices.forEach((vertex) => {\n      geometry.skinIndices.push(new Vector4(vertex.bone, 0, 0, 0));\n      geometry.skinWeights.push(new Vector4(1, 0, 0, 0));\n    });\n    return (new BufferGeometry()).fromGeometry(geometry);\n  }\n\n  constructor({\n    geometry,\n    material,\n  }) {\n    super(\n      geometry,\n      material\n    );\n    const hip = new Bone();\n    this.add(hip);\n    const torso = new Bone();\n    hip.add(torso);\n    const head = new Bone();\n    torso.add(head);\n    const leftArm = new Bone();\n    torso.add(leftArm);\n    const rightArm = new Bone();\n    torso.add(rightArm);\n    const leftLeg = new Bone();\n    hip.add(leftLeg);\n    const rightLeg = new Bone();\n    hip.add(rightLeg);\n    this.bind(new Skeleton([\n      hip,\n      torso,\n      head,\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    ]));\n    this.mixer = new AnimationMixer(this);\n    this.actions = Object.keys(Actor.animations).reduce((actions, action) => ({\n      ...actions,\n      [action]: this.mixer.clipAction(Actor.animations[action]),\n    }), {});\n    this.animation = 'idle';\n    this.actions.idle.timeScale = 0.5;\n    this.actions.idle.play();\n    this.rotationAux = new Vector2();\n    this.movementAux = new Vector3();\n  }\n\n  onAnimationTick({ delta }) {\n    const {\n      actions: { walk: { timeScale: walkingSpeed } },\n      destination,\n      destinationMarker,\n      mixer,\n      movementAux,\n      position,\n      rotationSpeed,\n      targetRotation,\n    } = this;\n    mixer.update(delta);\n    if (targetRotation) {\n      const rotationStep = delta * rotationSpeed;\n      const rotationDelta = targetRotation - this.rotation.y;\n      this.rotation.y += Math.min(\n        Math.max(\n          rotationDelta,\n          -rotationStep\n        ),\n        rotationStep\n      );\n      if (Math.abs(rotationDelta) <= rotationStep) {\n        this.targetRotation = false;\n      }\n    }\n    if (!destination) return;\n    const distance = position.distanceTo(destination);\n    const step = delta * 1.5 * walkingSpeed;\n    position.add(\n      movementAux\n        .copy(destination)\n        .sub(position)\n        .normalize()\n        .multiplyScalar(Math.min(distance, step))\n    );\n    if (distance <= step) {\n      this.setAnimation('idle');\n      this.destination = false;\n      if (destinationMarker) {\n        destinationMarker.visible = false;\n      }\n    }\n  }\n\n  setAnimation(animation) {\n    const { actions } = this;\n    if (this.animation === animation) return;\n    actions[this.animation].fadeOut(0.2);\n    this.animation = animation;\n    actions[this.animation]\n      .reset()\n      .fadeIn(0.2)\n      .play();\n  }\n\n  walkTo(point) {\n    const { destinationMarker, position, rotationAux } = this;\n    this.setAnimation('walk');\n    this.destination = point.clone();\n    if (destinationMarker) {\n      destinationMarker.position.copy(this.destination);\n      destinationMarker.visible = true;\n    }\n    const angle = rotationAux.set(point.x - position.x, point.z - position.z).angle();\n    while (this.rotation.y < -Math.PI) this.rotation.y += Math.PI * 2;\n    while (this.rotation.y > Math.PI) this.rotation.y -= Math.PI * 2;\n    this.targetRotation = (Math.PI * 0.5) - angle;\n    while (this.targetRotation < -Math.PI) this.targetRotation += Math.PI * 2;\n    while (this.targetRotation > Math.PI) this.targetRotation -= Math.PI * 2;\n    if ((this.targetRotation - this.rotation.y) > Math.PI) {\n      this.targetRotation -= Math.PI * 2;\n    } else if ((this.targetRotation - this.rotation.y) < -Math.PI) {\n      this.targetRotation += Math.PI * 2;\n    }\n    this.rotationSpeed = Math.abs(this.targetRotation - this.rotation.y) * 1.5;\n  }\n}\n\nActor.Bones = {\n  hip: 0,\n  torso: 1,\n  head: 2,\n  leftArm: 3,\n  rightArm: 4,\n  leftLeg: 5,\n  rightLeg: 6,\n};\n\nconst eulerToQuat = (x, y, z) => (new Quaternion()).setFromEuler(new Euler(x, y, z)).toArray();\n\nActor.animations = {\n  idle: (\n    new AnimationClip('idle', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n          ...eulerToQuat(0, Math.PI * 0.05, 0),\n          ...eulerToQuat(0, Math.PI * -0.05, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * 0.025),\n          ...eulerToQuat(Math.PI * -0.075, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.75,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n          ...eulerToQuat(0, 0, Math.PI * -0.1),\n          ...eulerToQuat(0, 0, Math.PI * -0.05),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.25,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n          ...eulerToQuat(0, 0, Math.PI * 0.1),\n          ...eulerToQuat(0, 0, Math.PI * 0.05),\n        ])\n      ),\n    ])\n  ),\n  walk: (\n    new AnimationClip('walk', 1, [\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.torso}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.02, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.02, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.head}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n          ...eulerToQuat(0, 0, Math.PI * 0.025),\n          ...eulerToQuat(0, 0, Math.PI * -0.025),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * -0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightArm}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n          ...eulerToQuat(Math.PI * 0.1, 0, 0),\n          ...eulerToQuat(Math.PI * -0.1, 0, Math.PI * 0.1),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.leftLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n        ])\n      ),\n      new QuaternionKeyframeTrack(\n        `.bones[${Actor.Bones.rightLeg}].quaternion`,\n        new Float32Array([\n          0,\n          0.5,\n          1,\n        ]),\n        new Float32Array([\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n          ...eulerToQuat(Math.PI * -0.15, 0, Math.PI * 0.01),\n          ...eulerToQuat(Math.PI * 0.15, 0, Math.PI * -0.01),\n        ])\n      ),\n    ])\n  ),\n};\n\nexport default Actor;\n","import {\n  CylinderGeometry,\n  MeshPhongMaterial,\n  SphereGeometry,\n  Vector3,\n  VertexColors,\n} from 'three';\nimport Actor from '@/engine/actor';\n\nclass Dude extends Actor {\n  constructor(palette) {\n    super({\n      geometry: Dude.geometry(palette),\n      material: Dude.material,\n    });\n    const { skeleton: { bones } } = this;\n    Object.keys(Dude.bones).forEach((bone) => {\n      bones[Actor.Bones[bone]].position.copy(Dude.bones[bone]);\n    });\n  }\n}\n\nDude.bones = {\n  hip: new Vector3(0, 0.5, 0),\n  torso: new Vector3(0, 0, 0),\n  head: new Vector3(0, 0.5, 0),\n  leftArm: new Vector3(-0.15, 0.475, 0),\n  rightArm: new Vector3(0.15, 0.475, 0),\n  leftLeg: new Vector3(-0.075, 0, 0),\n  rightLeg: new Vector3(0.075, 0, 0),\n};\n\nDude.geometry = (palette) => {\n  const torso = new CylinderGeometry(0.175, 0.15, 0.5, 6);\n  torso.translate(0, 0.25, 0);\n  torso.faces.forEach((face) => {\n    face.color.set(palette.torso || 0x990000);\n  });\n  const head = new SphereGeometry(0.2, 8, 4);\n  head.translate(0, 0.2, 0);\n  head.faces.forEach((face) => {\n    face.color.set(palette.head);\n  });\n  const leftEye = new SphereGeometry(0.05);\n  leftEye.faces.forEach((face) => {\n    face.color.set(palette.eyes);\n  });\n  const rightEye = leftEye.clone();\n  leftEye.translate(-0.1, 0.2, 0.15);\n  rightEye.translate(0.1, 0.2, 0.15);\n  head.merge(leftEye);\n  head.merge(rightEye);\n  const leftArm = new CylinderGeometry(0.05, 0.03, 0.4, 6);\n  leftArm.faces.forEach((face) => {\n    face.color.set(palette.arms);\n  });\n  const rightArm = leftArm.clone();\n  leftArm.translate(0, -0.2, 0);\n  rightArm.translate(0, -0.2, 0);\n  const leftLeg = new CylinderGeometry(0.05, 0.05, 0.5, 4);\n  leftLeg.faces.forEach((face) => {\n    face.color.set(palette.legs);\n  });\n  const rightLeg = leftLeg.clone();\n  leftLeg.translate(0, -0.25, 0);\n  rightLeg.translate(0, -0.25, 0);\n  const geometry = Actor.geometryFromLimbs({\n    torso,\n    head,\n    leftArm,\n    rightArm,\n    leftLeg,\n    rightLeg,\n  });\n  geometry.computeVertexNormals();\n  return geometry;\n};\n\nDude.material = new MeshPhongMaterial({\n  skinning: true,\n  vertexColors: VertexColors,\n});\n\nexport default Dude;\n","import {\n  CircleBufferGeometry,\n  Mesh,\n  MeshPhongMaterial,\n} from 'three';\n\nclass Marker extends Mesh {\n  constructor() {\n    const geometry = new CircleBufferGeometry(0.25, 16);\n    geometry.rotateX(Math.PI * -0.5);\n    geometry.translate(0, 0.002, 0);\n    super(\n      geometry,\n      new MeshPhongMaterial({\n        color: 0xFF0000,\n        opacity: 0.25,\n        transparent: true,\n      })\n    );\n    this.visible = false;\n  }\n\n  onAnimationTick({ time }) {\n    const { scale, visible } = this;\n    if (!visible) return;\n    const s = 0.75 + ((1 + Math.sin(time * 4)) * 0.125);\n    scale.set(s, 1, s);\n  }\n}\n\nexport default Marker;\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const pack = {\n    dudes: [...Array(13)].map((v, i) => {\n      const dude = new Dude({\n        arms: 0x222222,\n        eyes: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n        head: i === 0 ? 0x333333 : (0x999999 * Math.random()),\n        legs: 0x222222,\n        torso: i === 0 ? 0x990000 : (0x999999 * Math.random()),\n      });\n      dude.position.set(Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1), 0, 0);\n      scene.root.add(dude);\n      return dude;\n    }),\n    walkTo(point) {\n      const { x: mainDudeX, z: mainDudeZ } = point;\n      this.dudes.forEach((dude, i) => {\n        point.x = mainDudeX + Math.floor((i + 1) / 2) * ((i + 1) % 2 === 0 ? 1 : -1);\n        point.z = mainDudeZ + Math.floor((i + 1) / 2) * -1;\n        if (i > 0) {\n          point.x += (Math.random() * 2) - 1;\n          point.z += (Math.random() * 2) - 1;\n          dude.actions.walk.timeScale = 0.8 + Math.random() * 0.4;\n        }\n        dude.walkTo(point);\n      });\n    },\n  };\n\n  const [mainDude] = pack.dudes;\n  mainDude.destinationMarker = new Marker();\n  scene.root.add(mainDude.destinationMarker);\n  scene.camera.target = mainDude.position;\n\n  scene.onAnimationTick = () => {\n    const { camera, grid } = scene;\n    const pointer = input.getPointerFrame();\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObject(grid)[0];\n      if (!hit) return;\n      pack.walkTo(hit.point);\n    }\n    if (pointer.secondary) {\n      const { movement } = pointer;\n      const sensitivity = 0.003;\n      camera.tilt -= movement.x * sensitivity;\n      camera.pitch += movement.y * sensitivity;\n      camera.pitch = Math.min(Math.max(camera.pitch, 0), Math.PI * 0.5);\n      camera.updateOrbit();\n    }\n    if (pointer.wheel) {\n      const sensitivity = 0.006;\n      camera.distance = Math.min(Math.max(camera.distance + (pointer.wheel * sensitivity), 1), 16);\n      camera.updateOrbit();\n    }\n  };\n};\n","import Dude from '@/actors/dude';\nimport Marker from '@/items/marker';\n\nexport default ({ input, scene }) => {\n  const dude = new Dude({\n    arms: 0x222222,\n    eyes: 0x990000,\n    head: 0x333333,\n    legs: 0x222222,\n    torso: 0x990000,\n  });\n  dude.destinationMarker = new Marker();\n  scene.root.add(dude);\n  scene.root.add(dude.destinationMarker);\n  scene.camera.target = dude.position;\n\n  scene.onAnimationTick = () => {\n    const { camera, grid } = scene;\n    const pointer = input.getPointerFrame();\n    if (pointer.primaryUp) {\n      const { raycaster } = pointer;\n      raycaster.setFromCamera(pointer.normalized, camera);\n      const hit = raycaster.intersectObject(grid)[0];\n      if (!hit) return;\n      dude.walkTo(hit.point);\n    }\n    if (pointer.secondary) {\n      const { movement } = pointer;\n      const sensitivity = 0.003;\n      camera.tilt -= movement.x * sensitivity;\n      camera.pitch += movement.y * sensitivity;\n      camera.pitch = Math.min(Math.max(camera.pitch, 0), Math.PI * 0.5);\n      camera.updateOrbit();\n    }\n    if (pointer.wheel) {\n      const sensitivity = 0.006;\n      camera.distance = Math.min(Math.max(camera.distance + (pointer.wheel * sensitivity), 1), 16);\n      camera.updateOrbit();\n    }\n  };\n};\n","import Input from '@/engine/input';\nimport Scene from '@/engine/scene';\nimport * as Scenes from '@/scenes';\n\nconst mount = document.getElementById('mount');\nconst input = new Input({ mount });\nconst scene = new Scene({ mount });\n\ninput.touches.once('start', () => {\n  document.getElementById('credits').style.display = 'none';\n});\n\nlet route = window.location.hash.split('/').slice(1)[0];\nif (!Scenes[route]) {\n  window.location.hash = '/debug';\n  route = 'debug';\n}\nScenes[route]({ input, scene });\n"],"sourceRoot":""}